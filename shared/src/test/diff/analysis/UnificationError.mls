:unifyDbg
let temp = if true then 0 else "oops" in 0
//│ [ERROR 1] String != Int unifying because [[[String]]] | [[[Int]]] <: α22'
//│ allVarPols: 
//│ norm[+] String
//│ | DNF: DNF(string<>{})
//│ ~> string<>
//│ allVarPols: 
//│ norm[+] Int
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[String]]] and [[[Int]]] cannot be unified but flows into the same location
//│ ╟── string is used as argument
//│ ║  l.2: 	let temp = if true then 0 else "oops" in 0
//│ ║       	                               ^^^^^^
//│ ╟── int is used as argument
//│ ║  l.2: 	let temp = if true then 0 else "oops" in 0
//│ ║       	                        ^
//│ ╙── The following tvars cannot be resolved α22'
//│ unified α22'
//│  [Int] = α22' are arg type in ([Int] -> α24') = (α22' -> (α22' -> α22'))
//│  α22' :> [[[Int]]]
//│  α22' :> [[[String]]]
//│  α22' <: [[α25']]
//│ unified α23'
//│  α23' :> [[(α22' -> (α22' -> α22'))]]
//│  α23' <: [([Int] -> α24')]
//│ unified α24'
//│  α24' <: [([String] -> α25')]
//│  α24' = (α22' -> α22') are result type in ([Int] -> α24') = (α22' -> (α22' -> α22'))
//│ unified α25'
//│  [[α25']] = [[[Int]]] because α22' <: [[α25']] and α22' :> [[[Int]]]
//│  [[α25']] = [[[String]]] because α22' <: [[α25']] and α22' :> [[[String]]]
//│ res: int

:unifyDbg
def s x = if x then x else 3
//│ [ERROR 2] bool<> != Int unifying because [[[[[bool<>]]]]] = [[[Int]]] because [[[[α27']]]] & [[[[[bool<>]]]]] :> α26' and α27' :> [[[Int]]]
//│ allVarPols: +α36'
//│ norm[+] α36'
//│ | DNF: DNF(α36')
//│ | norm[+] [[[Int]]]
//│ | | DNF: DNF(int<>{})
//│ | ~> int<>
//│ | norm[-] [[α37']]
//│ | | DNF: DNF(α37')
//│ | | norm[+] [[[[[Int]]]]]
//│ | | | DNF: DNF(int<>{})
//│ | | ~> int<>
//│ | ~> α37'
//│ ~> α36'
//│ allVarPols: 
//│ norm[+] bool<>
//│ | DNF: DNF(bool<>{})
//│ ~> bool<>
//│ allVarPols: 
//│ norm[+] Int
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[[[bool<>]]]]] and [[[Int]]] cannot be unified but flows into the same location
//│ ╟── bool is used as reference
//│ ║  l.37: 	def s x = if x then x else 3
//│ ║        	             ^
//│ ╟── int is used as argument
//│ ║  l.37: 	def s x = if x then x else 3
//│ ║        	                           ^
//│ ╟── The following tvars cannot be resolved α26', [[[[α27']]]]
//│ ╟── ?a is used as reference
//│ ║  l.37: 	def s x = if x then x else 3
//│ ╙──      	                    ^
//│ unified α26'
//│  α26' <: [[[[[bool<>]]]]]
//│  α26' <: [[[[α27']]]]
//│ unified α27'
//│  α27' :> [[[Int]]]
//│  α27' <: [[α30']]
//│  [[[[α27']]]] & [[[[[bool<>]]]]] :> α26'
//│ unified α28'
//│  α28' :> [[(α27' -> (α27' -> α27'))]]
//│  α28' <: [([[α26']] -> α29')]
//│ unified α29'
//│  α29' <: [([Int] -> α30')]
//│  α29' = (α27' -> α27') are result type in ([[α26']] -> α29') = (α27' -> (α27' -> α27'))
//│ unified α30'
//│  [[α30']] = [[[Int]]] because α27' <: [[α30']] and α27' :> [[[Int]]]
//│  [[[[[bool<>]]]]] = [[α30']] because [[[[α27']]]] & [[[[[bool<>]]]]] :> α26' and α27' <: [[α30']]
//│ s: (bool & 'a) -> (int | 'a)

:unifyDbg
rec def clone x n =
  let rec helper acc n' =
    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
  helper x (n - 1)
//│ [ERROR 0] Int != int<> unifying because Int = int<> are arg type in ([(Int,)] -> α46'') = (int<> -> bool<>)
//│ allVarPols: 
//│ norm[+] Int
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Int and int<> cannot be unified but flows into the same location
//│ ╟── int is used as integer literal
//│ ║  l.92: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	              ^
//│ unified clone38'
//│  clone38' :> [(α39' -> (α40' -> α68'))]
//│ unified α39'
//│  [α39'] = α62' are arg type in ([([α39'],)] -> α65') = ([(α62',)] -> α63')
//│  α39' <: [[[[[[α57']]]]]]
//│ unified α40'
//│  α40' <: [[[[[[int<>]]]]]]
//│ unified helper41''
//│  helper41'' :> [(α42'' -> (α43'' -> α55''))]
//│  helper41'' <: [([(α50'',)] -> α51'')]
//│ unified α42''
//│  α42'' <: [[[[α44'']]]]
//│  α42'' <: [[[[[[int<>]]]]]]
//│ unified α43''
//│  int<> = [[[[α43'']]]] because α53'' = int<> are result type in ([(Int,)] -> α53'') = (int<> -> int<>) and α53'' <: [[[[α43'']]]]
//│  α43'' = α53'' are arg type in (α43'' -> α55'') = ([(α53'',)] -> α54'')
//│  α43'' <: [[[[[[int<>]]]]]]
//│ unified α44''
//│  α44'' = [α54''] are arg type in (α44'' -> α44'') = ([α54''] -> α55'')
//│  α44'' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]]
//│  α44'' <: [[α55'']]
//│  [[[[[[int<>]]]]]] & [[[[α44'']]]] :> α42''
//│ unified α45''
//│  α45'' :> [[(int<> -> bool<>)]]
//│  α45'' <: [([(Int,)] -> α46'')]
//│ unified α46''
//│  α46'' = bool<> are result type in ([(Int,)] -> α46'') = (int<> -> bool<>)
//│ unified α47''
//│  α47'' :> [[(α44'' -> (α44'' -> α44''))]]
//│  α47'' <: [([[α42'']] -> α48'')]
//│ unified α48''
//│  α48'' <: [([α54''] -> α55'')]
//│  α48'' = (α44'' -> α44'') are result type in ([[α42'']] -> α48'') = (α44'' -> (α44'' -> α44''))
//│ unified α49''
//│  α49'' :> [[(int<> -> int<>)]]
//│  α49'' <: [([(Int,)] -> α50'')]
//│ unified α50''
//│  α50'' = int<> are result type in ([(Int,)] -> α50'') = (int<> -> int<>)
//│  α50'' = α42'' are arg type in ([(α50'',)] -> α51'') = (α42'' -> (α43'' -> α55''))
//│ unified α51''
//│  α51'' <: [([(α53'',)] -> α54'')]
//│  α51'' = (α43'' -> α55'') are result type in ([(α50'',)] -> α51'') = (α42'' -> (α43'' -> α55''))
//│ unified α52''
//│  α52'' :> [[(int<> -> int<>)]]
//│  α52'' <: [([(Int,)] -> α53'')]
//│ unified α53''
//│  α53'' <: [[[[α43'']]]]
//│  α53'' = int<> are result type in ([(Int,)] -> α53'') = (int<> -> int<>)
//│  [[[[[[int<>]]]]]] = α53'' because α43'' <: [[[[[[int<>]]]]]] and α43'' = α53'' are arg type in (α43'' -> α55'') = ([(α53'',)] -> α54'')
//│ unified α54''
//│  α54'' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]]
//│  α54'' <: [[[α44'']]]
//│  [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] = [α54''] because α44'' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] and α44'' = [α54''] are arg type in (α44'' -> α44'') = ([α54''] -> α55'')
//│ unified α55''
//│  [[α55'']] = [α54''] because α44'' <: [[α55'']] and α44'' = [α54''] are arg type in (α44'' -> α44'') = ([α54''] -> α55'')
//│  [[α55'']] = [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] because α44'' <: [[α55'']] and α44'' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]]
//│ unified helper56'
//│  helper56' :> [(α57' -> (α61' -> α59'))]
//│  helper56' <: [([(α62',)] -> α63')]
//│  helper56' <: [([([α39'],)] -> α65')]
//│ unified α57'
//│  α57' <: [[[[α58']]]]
//│  α57' <: [[[[[[int<>]]]]]]
//│  [[[[[[α57']]]]]] = α62' because α39' <: [[[[[[α57']]]]]] and [α39'] = α62' are arg type in ([([α39'],)] -> α65') = ([(α62',)] -> α63')
//│ unified α58'
//│  [[[α58']]] = α68' because α60' <: [[[α58']]] and α60' = α68' are result type in ([(α64',)] -> α60') = ([(α67',)] -> α68')
//│  α58' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]]
//│  α58' <: [[α59']]
//│  [[[[[[int<>]]]]]] & [[[[α58']]]] :> α57'
//│ unified α59'
//│  α59' <: [[[α60']]]
//│  α59' <: [[[α68']]]
//│  [[α59']] = [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] because α58' <: [[α59']] and α58' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]]
//│ unified α60'
//│  α60' = α68' are result type in ([(α64',)] -> α60') = ([(α67',)] -> α68')
//│  α60' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]]
//│  α60' <: [[[α58']]]
//│  [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] = [[[α60']]] because [[α59']] = [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] because α58' <: [[α59']] and α58' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] and α59' <: [[[α60']]]
//│ unified α61'
//│  int<> = [[[[α61']]]] because α67' = int<> are result type in ([(Int,)] -> α67') = (int<> -> int<>) and α67' <: [[[[α61']]]]
//│  α61' = α67' are arg type in (α61' -> α59') = ([(α67',)] -> α68')
//│  α61' = α64' are Tup(0) field type
//│  α61' <: [[[[[[int<>]]]]]]
//│ unified α62'
//│  α62' = [[[[α58']]]] because [[[[[[α57']]]]]] = α62' because α39' <: [[[[[[α57']]]]]] and [α39'] = α62' are arg type in ([([α39'],)] -> α65') = ([(α62',)] -> α63') and α57' <: [[[[α58']]]]
//│  α62' = [[[[[[int<>]]]]]] because [[[[[[α57']]]]]] = α62' because α39' <: [[[[[[α57']]]]]] and [α39'] = α62' are arg type in ([([α39'],)] -> α65') = ([(α62',)] -> α63') and α57' <: [[[[[[int<>]]]]]]
//│  α62' = α57' are Tup(0) field type
//│ unified α63'
//│  α63' = [([(α67',)] -> α68')] because α65' = α63' are result type in ([([α39'],)] -> α65') = ([(α62',)] -> α63') and α65' <: [([(α67',)] -> α68')]
//│  α63' <: [([(α64',)] -> α60')]
//│  α63' = (α61' -> α59') are result type in ([(α62',)] -> α63') = (α57' -> (α61' -> α59'))
//│ unified α64'
//│  α64' = α67' because α61' = α64' are Tup(0) field type and α61' = α67' are arg type in (α61' -> α59') = ([(α67',)] -> α68')
//│  α64' :> [[[int<>]]]
//│  α64' <: [[[[α61']]]]
//│  [[[[[[int<>]]]]]] = α64' because α61' <: [[[[[[int<>]]]]]] and α61' = α64' are Tup(0) field type
//│ unified α65'
//│  α65' <: [([(α67',)] -> α68')]
//│  α65' = (α61' -> α59') are result type in ([([α39'],)] -> α65') = (α57' -> (α61' -> α59'))
//│  α65' = α63' are result type in ([([α39'],)] -> α65') = ([(α62',)] -> α63')
//│ unified α66'
//│  α66' :> [[(int<> -> int<>)]]
//│  α66' <: [([(Int,)] -> α67')]
//│ unified α67'
//│  α67' <: [[[[α61']]]]
//│  α67' = int<> are result type in ([(Int,)] -> α67') = (int<> -> int<>)
//│  [[[int<>]]] = α67' because α64' :> [[[int<>]]] and α64' = α67' because α61' = α64' are Tup(0) field type and α61' = α67' are arg type in (α61' -> α59') = ([(α67',)] -> α68')
//│ unified α68'
//│  α68' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]]
//│  [[[α68']]] & [[[α60']]] :> α59'
//│  [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] = [[[α68']]] because [[α59']] = [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] because α58' <: [[α59']] and α58' :> [[[[[[[[[[[[[[int<>]]]]]]]]]]]]]] and α59' <: [[[α68']]]
//│ clone: int -> int -> int

:unifyDbg
let rec l = fun a -> fun a -> l in let rec r = fun a -> r in if true then l else r
//│ unified l78'
//│  l78' :> [(α79' -> (α80' -> [l78']))]
//│ unified α79'
//│ unified α80'
//│ unified r81'
//│  r81' :> [(α82' -> [r81'])]
//│ unified α82'
//│ unified α83
//│  (α87 -> [l85]) = [[[α83]]] because [r89] = (α87 -> [l85]) are result type in (α90 -> [r89]) = (α86 -> (α87 -> [l85])) and r89 <: [[[α83]]]
//│  [[[[(α90 -> [r89])]]]] = [[[α83]]] because [[r89]] = [[[[(α90 -> [r89])]]]] because [[[[(α86 -> (α87 -> [l85]))]]]] = [[r89]] because α83 :> [[[[(α86 -> (α87 -> [l85]))]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91) and [[[[(α90 -> [r89])]]]] = [[r89]] because α83 :> [[[[(α90 -> [r89])]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91) and r89 <: [[[α83]]]
//│  α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91)
//│  α83 = (α87 -> [l85]) because [[l85]] = α83 are arg type in ([[l85]] -> α88) = (α83 -> (α83 -> α83)) and (α87 -> [l85]) = [l85] are result type in (α86 -> (α87 -> [l85])) = (α87 -> [l85])
//│  α83 :> [[[[(α86 -> (α87 -> [l85]))]]]]
//│  α83 :> [[[[(α90 -> [r89])]]]]
//│  α83 <: [[α91]]
//│ unified α84
//│  α84 :> [[(α83 -> (α83 -> α83))]]
//│  α84 <: [([[l85]] -> α88)]
//│ unified l85
//│  [l85] = [[[[(α90 -> [r89])]]]] because [r89] = [l85] are result type in (α90 -> [r89]) = (α87 -> [l85]) and [[r89]] = [[[[(α90 -> [r89])]]]] because [[[[(α86 -> (α87 -> [l85]))]]]] = [[r89]] because α83 :> [[[[(α86 -> (α87 -> [l85]))]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91) and [[[[(α90 -> [r89])]]]] = [[r89]] because α83 :> [[[[(α90 -> [r89])]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91)
//│  [l85] = [r89] are result type in (α87 -> [l85]) = (α90 -> [r89])
//│  [l85] = (α87 -> [l85]) are result type in (α87 -> [l85]) = (α86 -> (α87 -> [l85]))
//│  (α87 -> [l85]) = [l85] are result type in (α86 -> (α87 -> [l85])) = (α87 -> [l85])
//│  l85 :> [(α86 -> (α87 -> [l85]))]
//│  [[l85]] = α83 are arg type in ([[l85]] -> α88) = (α83 -> (α83 -> α83))
//│ unified α86
//│  α86 = α90 because α87 = α86 are Tup(0) field type and α87 = α90 are Tup(0) field type
//│  α86 = α87 are Tup(0) field type
//│ unified α87
//│  α87 = α90 are Tup(0) field type
//│  α87 = α86 are Tup(0) field type
//│ unified α88
//│  α88 <: [([[r89]] -> α91)]
//│  α88 = (α83 -> α83) are result type in ([[l85]] -> α88) = (α83 -> (α83 -> α83))
//│ unified r89
//│  r89 <: [[[α83]]]
//│  [[[[(α90 -> [r89])]]]] = [[r89]] because α83 :> [[[[(α90 -> [r89])]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91)
//│  [[r89]] = [[[[(α90 -> [r89])]]]] because [[[[(α86 -> (α87 -> [l85]))]]]] = [[r89]] because α83 :> [[[[(α86 -> (α87 -> [l85]))]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91) and [[[[(α90 -> [r89])]]]] = [[r89]] because α83 :> [[[[(α90 -> [r89])]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91)
//│  (α87 -> [l85]) = [r89] because [l85] = (α87 -> [l85]) are result type in (α87 -> [l85]) = (α86 -> (α87 -> [l85])) and [l85] = [r89] are result type in (α87 -> [l85]) = (α90 -> [r89])
//│  [[[[(α86 -> (α87 -> [l85]))]]]] = [[r89]] because α83 :> [[[[(α86 -> (α87 -> [l85]))]]]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91)
//│  [r89] = [l85] are result type in (α90 -> [r89]) = (α87 -> [l85])
//│  [r89] = (α87 -> [l85]) are result type in (α90 -> [r89]) = (α86 -> (α87 -> [l85]))
//│ unified α90
//│  α90 = α87 are Tup(0) field type
//│  α90 = α86 are Tup(0) field type
//│ unified α91
//│  [[α91]] = [[r89]] because α83 <: [[α91]] and α83 = [[r89]] are arg type in (α83 -> α83) = ([[r89]] -> α91)
//│  [[α91]] = (α87 -> [l85]) because α83 <: [[α91]] and α83 = (α87 -> [l85]) because [[l85]] = α83 are arg type in ([[l85]] -> α88) = (α83 -> (α83 -> α83)) and (α87 -> [l85]) = [l85] are result type in (α86 -> (α87 -> [l85])) = (α87 -> [l85])
//│  [[α91]] = [[[[(α86 -> (α87 -> [l85]))]]]] because α83 <: [[α91]] and α83 :> [[[[(α86 -> (α87 -> [l85]))]]]]
//│  [[α91]] = [[[[(α90 -> [r89])]]]] because α83 <: [[α91]] and α83 :> [[[[(α90 -> [r89])]]]]
//│ res: 'l | 'r
//│   where
//│     'r :> anything -> 'r
//│     'l :> anything -> anything -> 'l
