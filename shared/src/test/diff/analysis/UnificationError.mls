:ns
:unify
 def s x = if x then x else 3
//│ ╔══[WARNING] Level 1 unification error with 3 and bool
//│ ╟── Lower bound of α25'
//│ ╟── Lower bound of α24'
//│ ╙── Lower bound of α24'
//│ s: 'a -> 'b
//│   where
//│     'a <: 'c & bool
//│     'c :> 3
//│        <: 'b
//│     'b :> 3
//│  = [Function: s]

:ns
:unify
 rec def clone x n =
   let rec helper acc n' =
     if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
   helper x (n - 1)
//│ ╔══[WARNING] Level 1 unification error with int and number
//│ ╟── Lower bound of α48'
//│ ╙── Lower bound of α48'
//│ clone: 'clone
//│   where
//│     'clone :> 'a -> 'b -> 'c
//│     'b <: int
//│     'a <: 'd
//│     'd :> int
//│        <: int & 'e & number
//│     'e :> int
//│        <: 'f
//│     'f :> int
//│        <: 'c & 'g
//│     'g :> int
//│        <: 'e
//│     'c :> int
//│      = [Function: clone]

:ns
:unify
let rec l = fun a -> fun a -> l in let rec r = fun a -> r in if true then l else r
//│ res: 'a
//│   where
//│     'a :> 'b -> 'c -> 'l | 'd -> 'r
//│     'l :> 'b -> 'c -> 'l
//│        <: 'e
//│     'e :> 'd -> 'r | 'b -> 'c -> 'l
//│        <: 'a
//│     'r :> 'd -> 'r
//│        <: 'e
//│    = [Function: l]
