:unifyDbg
let temp = if true then 0 else "oops" in 0
//│ [ERROR 1] String != Int unifying because [[[String]]] | [[[Int]]] <: α22'
//│ allVarPols: 
//│ norm[+] [[[String]]]
//│ | DNF: DNF(string<>{})
//│ ~> string<>
//│ allVarPols: 
//│ norm[+] [[[Int]]]
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ ╔══[WARNING] [UNIFICATION ERROR 1] string and int cannot be unified but flows into the same location
//│ ╟── String is here
//│ ║  l.2: 	let temp = if true then 0 else "oops" in 0
//│ ║       	                               ^^^^^^
//│ ╟── Int is here
//│ ║  l.2: 	let temp = if true then 0 else "oops" in 0
//│ ║       	                        ^
//│ ╙── The following tvars cannot be resolved α22'
//│ unified α22'
//│  [Int] = α22' are arg type in ([Int] -> α24') = (α22' -> (α22' -> α22'))
//│  α22' :> [[[Int]]]
//│  α22' :> [[[String]]]
//│  α22' <: [[α25']]
//│ unified α23'
//│  α23' :> [[(α22' -> (α22' -> α22'))]]
//│  α23' <: [([Int] -> α24')]
//│ unified α24'
//│  α24' <: [([String] -> α25')]
//│  α24' = (α22' -> α22') are result type in ([Int] -> α24') = (α22' -> (α22' -> α22'))
//│ unified α25'
//│  [[α25']] = [[[Int]]] because α22' <: [[α25']] and α22' :> [[[Int]]]
//│  [[α25']] = [[[String]]] because α22' <: [[α25']] and α22' :> [[[String]]]
//│ res: int

:unifyDbg
def s x = if x then x else 3
//│ [ERROR 2] Bool != Int unifying because [[[[[Bool]]]]] = [[[Int]]] because [[[[α27']]]] & [[[[[Bool]]]]] :> α26' and α27' :> [[[Int]]]
//│ allVarPols: 
//│ norm[+] [[[[[Bool]]]]]
//│ | DNF: DNF(bool<>{})
//│ ~> bool<>
//│ allVarPols: 
//│ norm[+] [[[Int]]]
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ ╔══[WARNING] [UNIFICATION ERROR 2] bool and int cannot be unified but flows into the same location
//│ ╟── Bool is here
//│ ║  l.37: 	def s x = if x then x else 3
//│ ║        	             ^
//│ ╟── Int is here
//│ ║  l.37: 	def s x = if x then x else 3
//│ ║        	                           ^
//│ ╟── The following tvars cannot be resolved α26', [[[[α27']]]]
//│ ╟── α27' is here
//│ ║  l.37: 	def s x = if x then x else 3
//│ ╙──      	                    ^
//│ unified α26'
//│  α26' <: [[[[[Bool]]]]]
//│  α26' <: [[[[α27']]]]
//│ unified α27'
//│  α27' :> [[[Int]]]
//│  α27' <: [[α30']]
//│  [[[[α27']]]] & [[[[[Bool]]]]] :> α26'
//│ unified α28'
//│  α28' :> [[(α27' -> (α27' -> α27'))]]
//│  α28' <: [([[α26']] -> α29')]
//│ unified α29'
//│  α29' <: [([Int] -> α30')]
//│  α29' = (α27' -> α27') are result type in ([[α26']] -> α29') = (α27' -> (α27' -> α27'))
//│ unified α30'
//│  [[α30']] = [[[Int]]] because α27' <: [[α30']] and α27' :> [[[Int]]]
//│  [[[[[Bool]]]]] = [[α30']] because [[[[α27']]]] & [[[[[Bool]]]]] :> α26' and α27' <: [[α30']]
//│ s: (bool & 'a) -> (int | 'a)

:unifyDbg
rec def clone x n =
  let rec helper acc n' =
    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
  helper x (n - 1)
//│ [ERROR 0] (Int,) != Int unifying because [(Int,)] = Int are arg type in ([(Int,)] -> α44'') = (Int -> Bool)
//│ allVarPols: 
//│ norm[+] [(Int,)]
//│ | DNF: DNF((Int,){})
//│ | norm[+] Int
//│ | | DNF: DNF(int<>{})
//│ | ~> int<>
//│ ~> (int<>,)
//│ allVarPols: 
//│ norm[+] Int
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ ╔══[WARNING] [UNIFICATION ERROR 0] (int,) and int cannot be unified but flows into the same location
//│ ╟── (Int,) is here
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	              ^
//│ unified clone36'
//│  clone36' :> [((α37',) -> ((α38',) -> α67'))]
//│ unified α37'
//│  [α37'] = α61' are arg type in ([([α37'],)] -> α64') = ([(α61',)] -> α62')
//│  α37' <: [[[[[[α56']]]]]]
//│ unified α38'
//│ unified helper39''
//│  helper39'' :> [((α40'',) -> ((α41'',) -> α54''))]
//│  helper39'' <: [([(α49'',)] -> α50'')]
//│ unified α40''
//│  α40'' :> [[[[[[[[[[Int]]]]]]]]]]
//│  α40'' <: [[[[α42'']]]]
//│ unified α41''
//│  Int = [[[[α41'']]]] because α52'' = Int are result type in ([(Int,)] -> α52'') = (Int -> Int) and α52'' <: [[[[α41'']]]]
//│  α41'' = α52'' are arg type in ((α41'',) -> α54'') = ([(α52'',)] -> α53'')
//│  α41'' :> [[[[[[[[[[Int]]]]]]]]]]
//│ unified α42''
//│  α42'' = [α53''] are arg type in (α42'' -> α42'') = ([α53''] -> α54'')
//│  α42'' <: [[α54'']]
//│  [[[[α42'']]]] = [[[[[[[[[[Int]]]]]]]]]] because α40'' <: [[[[α42'']]]] and α40'' :> [[[[[[[[[[Int]]]]]]]]]]
//│ unified α43''
//│  α43'' :> [[(Int -> Bool)]]
//│  α43'' <: [([(Int,)] -> α44'')]
//│ unified α44''
//│  α44'' = Bool are result type in ([(Int,)] -> α44'') = (Int -> Bool)
//│ unified α45''
//│  α45'' :> [[(α42'' -> (α42'' -> α42''))]]
//│  α45'' <: [([[α40'']] -> α46'')]
//│ unified α46''
//│  α46'' <: [([α53''] -> α54'')]
//│  α46'' = (α42'' -> α42'') are result type in ([[α40'']] -> α46'') = (α42'' -> (α42'' -> α42''))
//│ unified α47''
//│  α47'' :> [[(Int -> Int)]]
//│  α47'' <: [([(Int,)] -> α49'')]
//│ unified α48''
//│  α48'' <: α42''
//│ unified α49''
//│  α49'' = Int are result type in ([(Int,)] -> α49'') = (Int -> Int)
//│  α49'' = α40'' are arg type in ([(α49'',)] -> α50'') = ((α40'',) -> ((α41'',) -> α54''))
//│ unified α50''
//│  α50'' <: [([(α52'',)] -> α53'')]
//│  α50'' = ((α41'',) -> α54'') are result type in ([(α49'',)] -> α50'') = ((α40'',) -> ((α41'',) -> α54''))
//│ unified α51''
//│  α51'' :> [[(Int -> Int)]]
//│  α51'' <: [([(Int,)] -> α52'')]
//│ unified α52''
//│  α52'' <: [[[[α41'']]]]
//│  α52'' = Int are result type in ([(Int,)] -> α52'') = (Int -> Int)
//│  [[[[[[[[[[Int]]]]]]]]]] = α52'' because α41'' :> [[[[[[[[[[Int]]]]]]]]]] and α41'' = α52'' are arg type in ((α41'',) -> α54'') = ([(α52'',)] -> α53'')
//│ unified α53''
//│  α53'' :> [[[[[[[[[[[[[[Int]]]]]]]]]]]]]]
//│  α53'' <: [[[α42'']]]
//│  [[[[[[[[[[Int]]]]]]]]]] = [α53''] because [[[[α42'']]]] = [[[[[[[[[[Int]]]]]]]]]] because α40'' <: [[[[α42'']]]] and α40'' :> [[[[[[[[[[Int]]]]]]]]]] and α42'' = [α53''] are arg type in (α42'' -> α42'') = ([α53''] -> α54'')
//│ unified α54''
//│  α54'' :> [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]]
//│  [[α54'']] = [α53''] because α42'' <: [[α54'']] and α42'' = [α53''] are arg type in (α42'' -> α42'') = ([α53''] -> α54'')
//│  [[[[[[[[[[Int]]]]]]]]]] = [[α54'']] because [[[[α42'']]]] = [[[[[[[[[[Int]]]]]]]]]] because α40'' <: [[[[α42'']]]] and α40'' :> [[[[[[[[[[Int]]]]]]]]]] and α42'' <: [[α54'']]
//│ unified helper55'
//│  helper55' :> [((α56',) -> ((α60',) -> α58'))]
//│  helper55' <: [([(α61',)] -> α62')]
//│  helper55' <: [([([α37'],)] -> α64')]
//│ unified α56'
//│  α56' :> [[[[[[[[[[Int]]]]]]]]]]
//│  α56' <: [[[[α57']]]]
//│  [[[[[[α56']]]]]] = α61' because α37' <: [[[[[[α56']]]]]] and [α37'] = α61' are arg type in ([([α37'],)] -> α64') = ([(α61',)] -> α62')
//│ unified α57'
//│  [[[α57']]] = α67' because α59' <: [[[α57']]] and α59' = α67' are result type in ([(α63',)] -> α59') = ([(α66',)] -> α67')
//│  [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]] = [[[α57']]] because [[[α59']]] = [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]] because α58' <: [[[α59']]] and α58' :> [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]] and α59' <: [[[α57']]]
//│  α57' <: [[α58']]
//│  [[[[α57']]]] = [[[[[[[[[[Int]]]]]]]]]] because α56' <: [[[[α57']]]] and α56' :> [[[[[[[[[[Int]]]]]]]]]]
//│ unified α58'
//│  α58' :> [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]]
//│  α58' <: [[[α59']]]
//│  α58' <: [[[α67']]]
//│  [[[[[[[[[[Int]]]]]]]]]] = [[α58']] because [[[[α57']]]] = [[[[[[[[[[Int]]]]]]]]]] because α56' <: [[[[α57']]]] and α56' :> [[[[[[[[[[Int]]]]]]]]]] and α57' <: [[α58']]
//│ unified α59'
//│  α59' = α67' are result type in ([(α63',)] -> α59') = ([(α66',)] -> α67')
//│  α59' <: [[[α57']]]
//│  [[[α59']]] = [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]] because α58' <: [[[α59']]] and α58' :> [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]]
//│ unified α60'
//│  Int = [[[[α60']]]] because α66' = Int are result type in ([(Int,)] -> α66') = (Int -> Int) and α66' <: [[[[α60']]]]
//│  α60' = α66' are arg type in ((α60',) -> α58') = ([(α66',)] -> α67')
//│  α60' = α63' are Tup(0) field type
//│  α60' :> [[[[[[[[[[Int]]]]]]]]]]
//│ unified α61'
//│  α61' = [[[[[[[[[[Int]]]]]]]]]] because [[[[[[α56']]]]]] = α61' because α37' <: [[[[[[α56']]]]]] and [α37'] = α61' are arg type in ([([α37'],)] -> α64') = ([(α61',)] -> α62') and α56' :> [[[[[[[[[[Int]]]]]]]]]]
//│  α61' = [[[[α57']]]] because [[[[[[α56']]]]]] = α61' because α37' <: [[[[[[α56']]]]]] and [α37'] = α61' are arg type in ([([α37'],)] -> α64') = ([(α61',)] -> α62') and α56' <: [[[[α57']]]]
//│  α61' = α56' are Tup(0) field type
//│ unified α62'
//│  α62' = [([(α66',)] -> α67')] because α64' = α62' are result type in ([([α37'],)] -> α64') = ([(α61',)] -> α62') and α64' <: [([(α66',)] -> α67')]
//│  α62' <: [([(α63',)] -> α59')]
//│  α62' = ((α60',) -> α58') are result type in ([(α61',)] -> α62') = ((α56',) -> ((α60',) -> α58'))
//│ unified α63'
//│  α63' = α66' because α60' = α63' are Tup(0) field type and α60' = α66' are arg type in ((α60',) -> α58') = ([(α66',)] -> α67')
//│  α63' :> [[[Int]]]
//│  α63' <: [[[[α60']]]]
//│  [[[[[[[[[[Int]]]]]]]]]] = α63' because α60' :> [[[[[[[[[[Int]]]]]]]]]] and α60' = α63' are Tup(0) field type
//│ unified α64'
//│  α64' <: [([(α66',)] -> α67')]
//│  α64' = ((α60',) -> α58') are result type in ([([α37'],)] -> α64') = ((α56',) -> ((α60',) -> α58'))
//│  α64' = α62' are result type in ([([α37'],)] -> α64') = ([(α61',)] -> α62')
//│ unified α65'
//│  α65' :> [[(Int -> Int)]]
//│  α65' <: [([(Int,)] -> α66')]
//│ unified α66'
//│  α66' <: [[[[α60']]]]
//│  α66' = Int are result type in ([(Int,)] -> α66') = (Int -> Int)
//│  [[[Int]]] = α66' because α63' :> [[[Int]]] and α63' = α66' because α60' = α63' are Tup(0) field type and α60' = α66' are arg type in ((α60',) -> α58') = ([(α66',)] -> α67')
//│ unified α67'
//│  [[[[[[[[[[Int]]]]]]]]]] = α67' because [[[[α57']]]] = [[[[[[[[[[Int]]]]]]]]]] because α56' <: [[[[α57']]]] and α56' :> [[[[[[[[[[Int]]]]]]]]]] and [[[α57']]] = α67' because α59' <: [[[α57']]] and α59' = α67' are result type in ([(α63',)] -> α59') = ([(α66',)] -> α67')
//│  [[[α67']]] = [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]] because α58' <: [[[α67']]] and α58' :> [[[[[[[[[[[[[[[[[Int]]]]]]]]]]]]]]]]]
//│  [[[α67']]] & [[[α59']]] :> α58'
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ║        	       ^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	       ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ║        	       ^^^^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ║        	                                      ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	                                      ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ║        	                                      ^^^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	                                            ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ║        	                                                ^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	                                                ^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ║        	                                                ^^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.79: 	    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
//│ ╙──      	                                                     ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.80: 	  helper x (n - 1)
//│ ║        	            ^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.80: 	  helper x (n - 1)
//│ ╙──      	            ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.80: 	  helper x (n - 1)
//│ ║        	            ^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.80: 	  helper x (n - 1)
//│ ╙──      	                ^
//│ clone: 'a -> anything -> (int | 'a)

:unifyDbg
let rec l = fun a -> fun a -> l in let rec r = fun a -> r in if true then l else r
//│ unified l79'
//│  l79' :> [((α80',) -> ((α81',) -> [l79']))]
//│ unified α80'
//│ unified α81'
//│ unified r82'
//│  r82' :> [((α83',) -> [r82'])]
//│ unified α83'
//│ unified α84
//│  ((α88,) -> [l86]) = [[[α84]]] because [r90] = ((α88,) -> [l86]) are result type in ((α91,) -> [r90]) = ((α87,) -> ((α88,) -> [l86])) and r90 <: [[[α84]]]
//│  [[[[((α91,) -> [r90])]]]] = [[[α84]]] because [[r90]] = [[[[((α91,) -> [r90])]]]] because [[[[((α87,) -> ((α88,) -> [l86]))]]]] = [[r90]] because α84 :> [[[[((α87,) -> ((α88,) -> [l86]))]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92) and [[[[((α91,) -> [r90])]]]] = [[r90]] because α84 :> [[[[((α91,) -> [r90])]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92) and r90 <: [[[α84]]]
//│  α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92)
//│  α84 = ((α88,) -> [l86]) because [[l86]] = α84 are arg type in ([[l86]] -> α89) = (α84 -> (α84 -> α84)) and ((α88,) -> [l86]) = [l86] are result type in ((α87,) -> ((α88,) -> [l86])) = ((α88,) -> [l86])
//│  α84 :> [[[[((α87,) -> ((α88,) -> [l86]))]]]]
//│  α84 :> [[[[((α91,) -> [r90])]]]]
//│  α84 <: [[α92]]
//│ unified α85
//│  α85 :> [[(α84 -> (α84 -> α84))]]
//│  α85 <: [([[l86]] -> α89)]
//│ unified l86
//│  [l86] = [[[[((α91,) -> [r90])]]]] because [r90] = [l86] are result type in ((α91,) -> [r90]) = ((α88,) -> [l86]) and [[r90]] = [[[[((α91,) -> [r90])]]]] because [[[[((α87,) -> ((α88,) -> [l86]))]]]] = [[r90]] because α84 :> [[[[((α87,) -> ((α88,) -> [l86]))]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92) and [[[[((α91,) -> [r90])]]]] = [[r90]] because α84 :> [[[[((α91,) -> [r90])]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92)
//│  [l86] = [r90] are result type in ((α88,) -> [l86]) = ((α91,) -> [r90])
//│  [l86] = ((α88,) -> [l86]) are result type in ((α88,) -> [l86]) = ((α87,) -> ((α88,) -> [l86]))
//│  ((α88,) -> [l86]) = [l86] are result type in ((α87,) -> ((α88,) -> [l86])) = ((α88,) -> [l86])
//│  l86 :> [((α87,) -> ((α88,) -> [l86]))]
//│  [[l86]] = α84 are arg type in ([[l86]] -> α89) = (α84 -> (α84 -> α84))
//│ unified α87
//│  α87 = α91 because α88 = α87 are Tup(0) field type and α88 = α91 are Tup(0) field type
//│  α87 = α88 are Tup(0) field type
//│ unified α88
//│  α88 = α91 are Tup(0) field type
//│  α88 = α87 are Tup(0) field type
//│ unified α89
//│  α89 <: [([[r90]] -> α92)]
//│  α89 = (α84 -> α84) are result type in ([[l86]] -> α89) = (α84 -> (α84 -> α84))
//│ unified r90
//│  r90 <: [[[α84]]]
//│  [[[[((α91,) -> [r90])]]]] = [[r90]] because α84 :> [[[[((α91,) -> [r90])]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92)
//│  [[r90]] = [[[[((α91,) -> [r90])]]]] because [[[[((α87,) -> ((α88,) -> [l86]))]]]] = [[r90]] because α84 :> [[[[((α87,) -> ((α88,) -> [l86]))]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92) and [[[[((α91,) -> [r90])]]]] = [[r90]] because α84 :> [[[[((α91,) -> [r90])]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92)
//│  ((α88,) -> [l86]) = [r90] because [l86] = ((α88,) -> [l86]) are result type in ((α88,) -> [l86]) = ((α87,) -> ((α88,) -> [l86])) and [l86] = [r90] are result type in ((α88,) -> [l86]) = ((α91,) -> [r90])
//│  [[[[((α87,) -> ((α88,) -> [l86]))]]]] = [[r90]] because α84 :> [[[[((α87,) -> ((α88,) -> [l86]))]]]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92)
//│  [r90] = [l86] are result type in ((α91,) -> [r90]) = ((α88,) -> [l86])
//│  [r90] = ((α88,) -> [l86]) are result type in ((α91,) -> [r90]) = ((α87,) -> ((α88,) -> [l86]))
//│ unified α91
//│  α91 = α88 are Tup(0) field type
//│  α91 = α87 are Tup(0) field type
//│ unified α92
//│  [[α92]] = [[r90]] because α84 <: [[α92]] and α84 = [[r90]] are arg type in (α84 -> α84) = ([[r90]] -> α92)
//│  [[α92]] = ((α88,) -> [l86]) because α84 <: [[α92]] and α84 = ((α88,) -> [l86]) because [[l86]] = α84 are arg type in ([[l86]] -> α89) = (α84 -> (α84 -> α84)) and ((α88,) -> [l86]) = [l86] are result type in ((α87,) -> ((α88,) -> [l86])) = ((α88,) -> [l86])
//│  [[α92]] = [[[[((α87,) -> ((α88,) -> [l86]))]]]] because α84 <: [[α92]] and α84 :> [[[[((α87,) -> ((α88,) -> [l86]))]]]]
//│  [[α92]] = [[[[((α91,) -> [r90])]]]] because α84 <: [[α92]] and α84 :> [[[[((α91,) -> [r90])]]]]
//│ res: 'l | 'r
//│   where
//│     'r :> anything -> 'r
//│     'l :> anything -> anything -> 'l
