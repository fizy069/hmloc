:AllowTypeErrors



// TODO nested prov not shown in collision error
let a = 1
let b = a
let f x = if x then true else false
let g = f
g b
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.6: 	let a = 1
//│ ║       	        ^
//│ ╟── this reference has type `int`
//│ ║  l.7: 	let b = a
//│ ║       	        ^
//│ ╟── this reference has type `int`
//│ ║  l.10: 	g b
//│ ║        	  ^
//│ ╟── this variable has type `int`
//│ ║  l.8: 	let f x = if x then true else false
//│ ║       	      ^
//│ ╟── this variable has type `bool`
//│ ║  l.8: 	let f x = if x then true else false
//│ ║       	      ^
//│ ╟── this if-then-else condition has type `bool`
//│ ║  l.8: 	let f x = if x then true else false
//│ ╙──     	             ^
//│ a: int
//│ b: int
//│ f: bool -> bool
//│ g: bool -> bool
//│ res: bool


// TODO nested prov not shown in collision error
let a = 1
let b = a
let f x y = if y then x else "x"
let g = f
g b true
//│ ╔══[ERROR] Type `string` does not match `int`
//│ ║  
//│ ╟── this `else` branch has type `string`
//│ ║  l.41: 	let f x y = if y then x else "x"
//│ ║        	                             ^^^
//│ ╟── this if-then-else expression has type `string`
//│ ║  l.41: 	let f x y = if y then x else "x"
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `int`
//│ ║  l.41: 	let f x y = if y then x else "x"
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `int`
//│ ║  l.41: 	let f x y = if y then x else "x"
//│ ║        	                      ^
//│ ╟── this variable has type `int`
//│ ║  l.41: 	let f x y = if y then x else "x"
//│ ║        	      ^
//│ ╟── this reference has type `int`
//│ ║  l.43: 	g b true
//│ ║        	  ^
//│ ╟── this reference has type `int`
//│ ║  l.40: 	let b = a
//│ ║        	        ^
//│ ╟── this integer literal has type `int`
//│ ║  l.39: 	let a = 1
//│ ╙──      	        ^
//│ a: int
//│ b: int
//│ f: 'a -> bool -> (string | 'a)
//│ g: 'a -> bool -> (string | 'a)
//│ res: int | string
