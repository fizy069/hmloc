////////// file 1935

////////// ocamlc error
//
// File "1935.ml", line 22, characters 18-44:
// 22 |     let (_,res) = List.fold_left f base args in res in
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type int but an expression was expected of type
//          'a * 'b

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ addTuple: (nothing, nothing,) -> int
//│ padZero: (list['a] & list[?]) -> (list[?] & list['b]) -> (? | list['a], ? | list['b],)
//│ removeZero: list['a] -> (list[nothing] | list['a])


let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?a) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.3      let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.3      let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?a -> _ -> int) is here
//│   │  - l.3      let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.6      let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.6      let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~~ (?a) ---> (_ * _)
//│ 
//│     ◉ (_ -> _ -> int) is here
//│     │  - l.3      let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.6      let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.6      let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ │  - l.4      let base = 0 in
//│ │                        ^
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.6      let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> list[nothing]
//│ U max: 32, total: 137
//│ UERR 3 errors
//│ L: 0 [int ~ ([α237'], [α238'],), int <: α231', α231' <: ([α237'], [α238'],)]
//│ L: 1 [int ~ ([α237'], [α238'],), int :> α215', [α215' - (α215' -> (α216' -> [int])) ~ (α231' -> (α232' -> α231')) - α231', L: 0 [(α215' -> (α216' -> [int])) ~ (α231' -> (α232' -> α231')), (α215' -> (α216' -> [int])) <: (α231' -> (α232' -> α231'))]], α231' <: ([α237'], [α238'],)]
//│ L: 2 [int ~ ([α237'], [α238'],), [int - (α216' -> [int]) ~ (α232' -> α231') - α231', L: 1 [(α216' -> [int]) ~ (α232' -> α231'), [(α216' -> [int]) - (α215' -> (α216' -> [int])) ~ (α231' -> (α232' -> α231')) - (α232' -> α231'), L: 0 [(α215' -> (α216' -> [int])) ~ (α231' -> (α232' -> α231')), (α215' -> (α216' -> [int])) <: (α231' -> (α232' -> α231'))]]]], α231' <: ([α237'], [α238'],)]

////////// file 0003

////////// ocamlc error
//
// File "0003.ml", line 23, characters 31-32:
// 23 |         (let (toSum1,toSum2) = x in
//                                     ^
// Error: This expression has type 'a list
//        but an expression was expected of type 'b * 'c

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ padZero: (list['a] & list[?]) -> (list['b] & list[?]) -> (list['a] | ?, ? | list['b],)
//│ removeZero: ('b & 'c & list[int & 'a]) -> 'b
//│   where
//│     'b :> list[nothing] | list['a] | 'c
//│        <: 'c
//│     'c :> 'b | list[nothing] | list['a]
//│        <: 'b

:unify
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5        if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5        if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed here
//│    - l.3      let f a x =
//│                       ^
//│     ◉ (_ -> ?b -> _) is here
//│     │  - l.3      let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.15     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?c -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.15     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) is here
//│        - l.3      let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.3      let f a x =
//│ │                     ^
//│ │  - l.8          (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8          (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ~~~~ (?c) ~~~~ (?d) ~~~~ (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5        if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5        if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed here
//│    - l.3      let f a x =
//│                       ^
//│     ◉ (_ -> ?b -> _) is here
//│     │  - l.3      let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.15     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?c list) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                                                        ^^^^^^^
//│   │  - l.15     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   │  - l.14     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d list) is here
//│      - lib. let List.rev: 'a list -> 'a list
//│                                      ^^^^^^^
//│   ◉ (?d list) is here
//│   ▲  - lib. let List.rev: 'a list -> 'a list
//│   │                       ^^^^^^^
//│   │  - l.14     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ ((_ * _) list) is here
//│      - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                                                      ^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5        if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5        if x = []
//│ │                  ^
//│ │  - l.3      let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed here
//│ │  - l.3      let f a x =
//│ │                     ^
//│ │  - l.8          (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8          (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> (list[int] | list[nothing])
//│ U max: 34, total: 181
//│ UERR 3 errors
//│ L: 2 [list['a425'] ~ ([α445'], [α446'],), list['a425'] <: α423', α423' :> α419', [α419' - (α419' -> α420') ~ (α451' -> α450') - α451', L: 1 [(α419' -> α420') ~ (α451' -> α450'), [(α419' -> α420') - (α418' -> (α419' -> α420')) ~ (α450' -> (α451' -> α450')) - (α451' -> α450'), L: 0 [(α418' -> (α419' -> α420')) ~ (α450' -> (α451' -> α450')), (α418' -> (α419' -> α420')) <: (α450' -> (α451' -> α450'))]]]], [α451' - list[α451'] ~ list[α444'] - α444', L: 0 [list[α451'] ~ list[α444'], list[α451'] :> list[α444']]], [α444' - list[α444'] ~ list[([α445'], [α446'],)] - ([α445'], [α446'],), L: 0 [list[α444'] ~ list[([α445'], [α446'],)], list[α444'] :> list[([α445'], [α446'],)]]]]
//│ L: 2 [list['a425'] ~ ([α431'], [α432'],), list['a425'] <: α423', α423' :> α419', [α419' - (α419' -> α420') ~ (α451' -> α450') - α451', L: 1 [(α419' -> α420') ~ (α451' -> α450'), [(α419' -> α420') - (α418' -> (α419' -> α420')) ~ (α450' -> (α451' -> α450')) - (α451' -> α450'), L: 0 [(α418' -> (α419' -> α420')) ~ (α450' -> (α451' -> α450')), (α418' -> (α419' -> α420')) <: (α450' -> (α451' -> α450'))]]]], [α451' - (α451' -> α450') ~ (α419' -> α420') - α419', L: 1 [(α451' -> α450') ~ (α419' -> α420'), [(α451' -> α450') - (α450' -> (α451' -> α450')) ~ (α418' -> (α419' -> α420')) - (α419' -> α420'), L: 0 [(α450' -> (α451' -> α450')) ~ (α418' -> (α419' -> α420')), (α450' -> (α451' -> α450')) :> (α418' -> (α419' -> α420'))]]]], α419' <: ([α431'], [α432'],)]
//│ L: 0 [list['a425'] ~ ([α431'], [α432'],), list['a425'] <: α423', α423' :> α419', α419' <: ([α431'], [α432'],)]

////////// file 1948

////////// ocamlc error
//
// File "1948.ml", line 43, characters 46-70:
// 43 |     match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type 'a * 'b
//        but an expression was expected of type int list

let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      ((((x1 + x2) + carry) / 10), ((mod ((x1 + x2) + carry) 10) :: res)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (carry,res) = List.fold_left f base args in [carry] @ res in
  removeZero (add (padZero l1 l2));;
let rec mulByDigit i l =
  let f a x =
    let carry = i * x in
    match a with
    | h::t -> ((h + carry) / 10) :: (mod (h + carry) 10) :: t
    | _ -> [carry / 10; mod carry 10] in
  let base = [] in removeZero (List.fold_left f base (List.rev l));;
//│ helper: int -> int
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ padZero: (list['a] & list[?]) -> (list[?] & list['b]) -> (? | list['a], ? | list['b],)
//│ removeZero: list['a] -> (list[nothing] | list['a])
//│ tenEx: int -> list[int] -> (list[int] | list[nothing])
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> (list[nothing] | list[int])
//│ mulByDigit: int -> list[int] -> (list[nothing] | list[int])

// FIXME: no common provs
:unify
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ list` does not match `int * _ list`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) <--- (int * _ list)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ ▲  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                                              ^^^^
//│ │ 
//│ ◉ (int * _ list) is here
//│    - l.6    let base = (0, []) in
//│                        ^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-37let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-31    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-25  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-25  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-31    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-33    if (List.length l1) < (List.length l2)
//│ │                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-37let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-31    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-25  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-25  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-31    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-32    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ │                                                              ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-37let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-31    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-25  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-25  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-31    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-35  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ │                                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-37let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-31    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-25  let add (l1,l2) =
//│                       ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-25  let add (l1,l2) =
//│ │                    ^^
//│ │  - l.-19    let args = List.rev (List.combine l1 l2) in
//│ │                                               ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-37let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-31    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-25  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-25  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-17  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-36  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-31    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-36  if (List.length l1) > (List.length l2)
//│ │                           ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `int * _ list`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) <--- (int * _ list)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ ▲  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                                              ^^^^
//│ │ 
//│ ◉ (int * _ list) is here
//│    - l.6    let base = (0, []) in
//│                        ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-36  if (List.length l1) > (List.length l2)
//│ │                           ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-32    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ │                                                              ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.2    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.2    let f a x =
//│ │                 ^
//│ │  - l.4      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.4      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-37let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-31    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-33    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-32    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-32    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ │                                                                      ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-33    if (List.length l1) < (List.length l2)
//│ │                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.2    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.2    let f a x =
//│ │                 ^
//│ │  - l.4      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.4      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?c) <--- (?b) <--- (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?d) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) is here
//│        - l.2    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.3      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-26let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-17  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-37let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-35  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ │                                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ bigMul: ((list[int] | list[nothing]) -> list[(nothing, nothing,)] & list[int]) -> list[int] -> list[int]
//│ U max: 21, total: 91
//│ UERR 19 errors
//│ L: 1 [([α1023'], [[[α919']]],) ~ list[α958'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', [α957' - ([[α957']], [[α953']],) ~ ([α956'], [α952'],) - α956', L: 0 [([[α957']], [[α953']],) ~ ([α956'], [α952'],), ([[α957']], [[α953']],) <: α959', α959' <: α960', α960' <: ([α956'], [α952'],)]], [α956' - ([α956'], [α952'],) ~ ([[α957']], [[α953']],) - α957', L: 0 [([α956'], [α952'],) ~ ([[α957']], [[α953']],), ([α956'], [α952'],) :> α960', α960' :> α959', α959' :> ([[α957']], [[α953']],)]], α957' <: list[α958']]
//│ L: 2 [(α954' -> α987') ~ ([int], [[list['a1025']]],), (α954' -> α987') <: α920', α920' <: α917', α917' <: α914', [α914' - (α913' -> α914') ~ (α1050' -> α1049') - α1049', L: 1 [(α913' -> α914') ~ (α1050' -> α1049'), [(α913' -> α914') - (α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')) - (α1050' -> α1049'), L: 0 [(α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')), (α912' -> (α913' -> α914')) <: (α1049' -> (α1050' -> α1049'))]]]], α1049' :> ([int], [[list['a1025']]],)]
//│ L: 1 [([α1023'], [[[α919']]],) ~ list[α962'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', [α957' - ([[α957']], [[α953']],) ~ ([α956'], [α952'],) - α956', L: 0 [([[α957']], [[α953']],) ~ ([α956'], [α952'],), ([[α957']], [[α953']],) <: α959', α959' <: α960', α960' <: ([α956'], [α952'],)]], [α956' - ([α956'], [α952'],) ~ ([[α957']], [[α953']],) - α957', L: 0 [([α956'], [α952'],) ~ ([[α957']], [[α953']],), ([α956'], [α952'],) :> α960', α960' :> α959', α959' :> ([[α957']], [[α953']],)]], α957' <: list[α962']]
//│ L: 2 [list['a922'] ~ ([α918'], [α919'],), list['a922'] <: α920', α920' <: α917', α917' <: α914', [α914' - (α913' -> α914') ~ (α1050' -> α1049') - α1049', L: 1 [(α913' -> α914') ~ (α1050' -> α1049'), [(α913' -> α914') - (α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')) - (α1050' -> α1049'), L: 0 [(α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')), (α912' -> (α913' -> α914')) <: (α1049' -> (α1050' -> α1049'))]]]], [α1049' - (α1049' -> (α1050' -> α1049')) ~ (α912' -> (α913' -> α914')) - α912', L: 0 [(α1049' -> (α1050' -> α1049')) ~ (α912' -> (α913' -> α914')), (α1049' -> (α1050' -> α1049')) :> (α912' -> (α913' -> α914'))]], α912' <: ([α918'], [α919'],)]
//│ L: 2 [list['a922'] ~ ([α1055'], [α1056'],), list['a922'] <: α920', α920' <: α917', α917' <: α914', [α914' - (α913' -> α914') ~ (α1050' -> α1049') - α1049', L: 1 [(α913' -> α914') ~ (α1050' -> α1049'), [(α913' -> α914') - (α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')) - (α1050' -> α1049'), L: 0 [(α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')), (α912' -> (α913' -> α914')) <: (α1049' -> (α1050' -> α1049'))]]]], α1049' <: ([α1055'], [α1056'],)]
//│ L: 1 [([α1023'], [[[α919']]],) ~ list[α963'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', [α957' - ([[α957']], [[α953']],) ~ ([α956'], [α952'],) - α956', L: 0 [([[α957']], [[α953']],) ~ ([α956'], [α952'],), ([[α957']], [[α953']],) <: α959', α959' <: α960', α960' <: ([α956'], [α952'],)]], [α956' - ([α956'], [α952'],) ~ ([[α957']], [[α953']],) - α957', L: 0 [([α956'], [α952'],) ~ ([[α957']], [[α953']],), ([α956'], [α952'],) :> α960', α960' :> α959', α959' :> ([[α957']], [[α953']],)]], α957' <: list[α963']]
//│ L: 0 [([α1023'], [[[α919']]],) ~ list[α958'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', α957' <: list[α958']]
//│ L: 2 [list['a922'] ~ ([int], [[list['a1025']]],), list['a922'] <: α920', α920' <: α917', α917' <: α914', [α914' - (α913' -> α914') ~ (α1050' -> α1049') - α1049', L: 1 [(α913' -> α914') ~ (α1050' -> α1049'), [(α913' -> α914') - (α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')) - (α1050' -> α1049'), L: 0 [(α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')), (α912' -> (α913' -> α914')) <: (α1049' -> (α1050' -> α1049'))]]]], α1049' :> ([int], [[list['a1025']]],)]
//│ L: 0 [([α1023'], [[[α919']]],) ~ list[α961'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', α957' <: list[α961']]
//│ L: 1 [([α1023'], [[[α919']]],) ~ list[α924'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', [α957' - ([[α957']], [[α953']],) ~ ([α956'], [α952'],) - α956', L: 0 [([[α957']], [[α953']],) ~ ([α956'], [α952'],), ([[α957']], [[α953']],) <: α959', α959' <: α960', α960' <: ([α956'], [α952'],)]], α956' <: list[α924']]
//│ L: 2 [(α954' -> α987') ~ ([α1055'], [α1056'],), (α954' -> α987') <: α920', α920' <: α917', α917' <: α914', [α914' - (α913' -> α914') ~ (α1050' -> α1049') - α1049', L: 1 [(α913' -> α914') ~ (α1050' -> α1049'), [(α913' -> α914') - (α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')) - (α1050' -> α1049'), L: 0 [(α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')), (α912' -> (α913' -> α914')) <: (α1049' -> (α1050' -> α1049'))]]]], α1049' <: ([α1055'], [α1056'],)]
//│ L: 0 [([α1023'], [[[α919']]],) ~ list[α925'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', α957' <: list[α925']]
//│ L: 0 [([α1023'], [[[α919']]],) ~ list[α963'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', α957' <: list[α963']]
//│ L: 0 [(α954' -> α987') ~ list['a922'], (α954' -> α987') <: α920', α920' :> list['a922']]
//│ L: 2 [(α954' -> α987') ~ list['a922'], (α954' -> α987') <: α920', α920' <: α917', α917' <: α914', [α914' - (α913' -> α914') ~ (α1050' -> α1049') - α1049', L: 1 [(α913' -> α914') ~ (α1050' -> α1049'), [(α913' -> α914') - (α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')) - (α1050' -> α1049'), L: 0 [(α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')), (α912' -> (α913' -> α914')) <: (α1049' -> (α1050' -> α1049'))]]]], [α1049' - (α1050' -> α1049') ~ (α913' -> α914') - α914', L: 1 [(α1050' -> α1049') ~ (α913' -> α914'), [(α1050' -> α1049') - (α1049' -> (α1050' -> α1049')) ~ (α912' -> (α913' -> α914')) - (α913' -> α914'), L: 0 [(α1049' -> (α1050' -> α1049')) ~ (α912' -> (α913' -> α914')), (α1049' -> (α1050' -> α1049')) :> (α912' -> (α913' -> α914'))]]]], α914' :> α917', α917' :> α920', α920' :> list['a922']]
//│ L: 2 [(α954' -> α987') ~ ([α918'], [α919'],), (α954' -> α987') <: α920', α920' <: α917', α917' <: α914', [α914' - (α913' -> α914') ~ (α1050' -> α1049') - α1049', L: 1 [(α913' -> α914') ~ (α1050' -> α1049'), [(α913' -> α914') - (α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')) - (α1050' -> α1049'), L: 0 [(α912' -> (α913' -> α914')) ~ (α1049' -> (α1050' -> α1049')), (α912' -> (α913' -> α914')) <: (α1049' -> (α1050' -> α1049'))]]]], [α1049' - (α1049' -> (α1050' -> α1049')) ~ (α912' -> (α913' -> α914')) - α912', L: 0 [(α1049' -> (α1050' -> α1049')) ~ (α912' -> (α913' -> α914')), (α1049' -> (α1050' -> α1049')) :> (α912' -> (α913' -> α914'))]], α912' <: ([α918'], [α919'],)]
//│ L: 1 [([α1023'], [[[α919']]],) ~ list[α961'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', [α957' - ([[α957']], [[α953']],) ~ ([α956'], [α952'],) - α956', L: 0 [([[α957']], [[α953']],) ~ ([α956'], [α952'],), ([[α957']], [[α953']],) <: α959', α959' <: α960', α960' <: ([α956'], [α952'],)]], [α956' - ([α956'], [α952'],) ~ ([[α957']], [[α953']],) - α957', L: 0 [([α956'], [α952'],) ~ ([[α957']], [[α953']],), ([α956'], [α952'],) :> α960', α960' :> α959', α959' :> ([[α957']], [[α953']],)]], α957' <: list[α961']]
//│ L: 1 [([α1023'], [[[α919']]],) ~ list[α925'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', [α957' - ([[α957']], [[α953']],) ~ ([[list[α925']]], [[α953']],) - list[α925'], L: 0 [([[α957']], [[α953']],) ~ ([[list[α925']]], [[α953']],), ([[α957']], [[α953']],) <: α959', α959' :> ([[list[α925']]], [[α953']],)]]]
//│ L: 0 [([α1023'], [[[α919']]],) ~ list[α962'], ([α1023'], [[[α919']]],) <: α923', α923' <: α957', α957' <: list[α962']]

////////// file 2361

////////// ocamlc error
// 
// File "2361.ml", line 12, characters 46-51:
// 12 |   | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//                                                    ^^^^^
// Error: This expression has type bool but an expression was expected of type
//          int

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ addNumbs: list[int] -> int
//│ digits: int -> (list[int] | list[nothing])

:unify
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3    | [] -> 0
//│                     ^
//│ additivePersistence: int -> (bool | int)
//│ U max: 10, total: 28
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α1177', α1177' <: α1163', α1163' :> int]
