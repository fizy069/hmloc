////////// file 1935

////////// ocamlc error
//
// File "1935.ml", line 22, characters 18-44:
// 22 |     let (_,res) = List.fold_left f base args in res in
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type int but an expression was expected of type
//          'a * 'b

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ clone: 'a -> int -> list['a]
//│ addTuple: (nothing, nothing,) -> int
//│ addTuple: (int, int,) -> int
//│ padZero: (list['a] & list[?]) -> (list[?] & list['b]) -> (? | list['a], ? | list['b],)
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list['a] -> (list[nothing] | list['a])
//│ removeZero: list[int] -> list[int]


let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ │  - l.4      let base = 0 in
//│ │                        ^
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.6      let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?a) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.3      let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.3      let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?a -> _ -> int) is here
//│   │  - l.3      let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.6      let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.6      let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~~ (?a) ---> (_ * _)
//│ 
//│     ◉ (_ -> _ -> int) is here
//│     │  - l.3      let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.6      let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.6      let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.6      let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> list[nothing]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 64, total: 250
//│ UERR 3 errors
//│ L: 1 [int ~ ([α249''], [α250''],), int :> α241'', [α241'' - (α241'' -> (α242'' -> [int])) ~ (α239'' -> (α240'' -> α239'')) - α239'', L: 0 [(α241'' -> (α242'' -> [int])) ~ (α239'' -> (α240'' -> α239'')), (α241'' -> (α242'' -> [int])) <: (α239'' -> (α240'' -> α239''))]], α239'' <: ([α249''], [α250''],)]
//│ L: 0 [int ~ ([α249''], [α250''],), int <: α239'', α239'' <: ([α249''], [α250''],)]
//│ L: 2 [int ~ ([α249''], [α250''],), [int - (α242'' -> [int]) ~ (α240'' -> α239'') - α239'', L: 1 [(α242'' -> [int]) ~ (α240'' -> α239''), [(α242'' -> [int]) - (α241'' -> (α242'' -> [int])) ~ (α239'' -> (α240'' -> α239'')) - (α240'' -> α239''), L: 0 [(α241'' -> (α242'' -> [int])) ~ (α239'' -> (α240'' -> α239'')), (α241'' -> (α242'' -> [int])) <: (α239'' -> (α240'' -> α239''))]]]], α239'' <: ([α249''], [α250''],)]

////////// file 0003

////////// ocamlc error
//
// File "0003.ml", line 23, characters 31-32:
// 23 |         (let (toSum1,toSum2) = x in
//                                     ^
// Error: This expression has type 'a list
//        but an expression was expected of type 'b * 'c

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ clone: 'a -> int -> list['a]
//│ padZero: (list['a] & list[?]) -> (list['b] & list[?]) -> (list['a] | ?, ? | list['b],)
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: ('b & 'c & list[int & 'a]) -> 'b
//│   where
//│     'b :> list[nothing] | list['a] | 'c
//│        <: 'c
//│     'c :> 'b | list[nothing] | list['a]
//│        <: 'b
//│ removeZero: list[int] -> list[int]

:unify
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5        if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5        if x = []
//│ │                  ^
//│ │  - l.3      let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed here
//│ │  - l.3      let f a x =
//│ │                     ^
//│ │  - l.8          (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8          (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (?d) <--- (_ list)
//│ 
//│   ◉ ((_ * _) list) is here
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.14     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a list) is here
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.14     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.15     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?b list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (_ -> ?b -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.15     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?c -> _) is here
//│        - l.3      let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.3      let f a x =
//│ │                     ^
//│ │  - l.5        if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.5        if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.5        if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5        if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5        if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed here
//│    - l.3      let f a x =
//│                       ^
//│     ◉ (_ -> ?b -> _) is here
//│     │  - l.3      let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.15     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?c -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.15     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) is here
//│        - l.3      let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.3      let f a x =
//│ │                     ^
//│ │  - l.8          (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8          (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> (list[int] | list[nothing])
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 22, total: 336
//│ UERR 3 errors
//│ L: 0 [list['a486'''] ~ ([α492'''], [α493'''],), list['a486'''] <: α484''', α484''' :> α480''', α480''' <: ([α492'''], [α493'''],)]
//│ L: 2 [list['a524''] ~ ([α521''], [α522''],), list['a524''] <: α523'', α523'' :> α520'', [α520'' - (α520'' -> α525'') ~ (α514'' -> α513'') - α514'', L: 1 [(α520'' -> α525'') ~ (α514'' -> α513''), [(α520'' -> α525'') - (α515'' -> (α520'' -> α525'')) ~ (α513'' -> (α514'' -> α513'')) - (α514'' -> α513''), L: 0 [(α515'' -> (α520'' -> α525'')) ~ (α513'' -> (α514'' -> α513'')), (α515'' -> (α520'' -> α525'')) <: (α513'' -> (α514'' -> α513''))]]]], [α514'' - (α514'' -> α513'') ~ (α520'' -> α525'') - α520'', L: 1 [(α514'' -> α513'') ~ (α520'' -> α525''), [(α514'' -> α513'') - (α513'' -> (α514'' -> α513'')) ~ (α515'' -> (α520'' -> α525'')) - (α520'' -> α525''), L: 0 [(α513'' -> (α514'' -> α513'')) ~ (α515'' -> (α520'' -> α525'')), (α513'' -> (α514'' -> α513'')) :> (α515'' -> (α520'' -> α525''))]]]], α520'' <: ([α521''], [α522''],)]
//│ L: 2 [([α506''], [α507''],) ~ list['a524''], [([α506''], [α507''],) - list[([α506''], [α507''],)] ~ list[α531''] - α531'', L: 0 [list[([α506''], [α507''],)] ~ list[α531''], list[([α506''], [α507''],)] <: list[α531'']]], [α531'' - list[α531''] ~ list[α514''] - α514'', L: 0 [list[α531''] ~ list[α514''], list[α531''] <: list[α514'']]], [α514'' - (α514'' -> α513'') ~ (α520'' -> α525'') - α520'', L: 1 [(α514'' -> α513'') ~ (α520'' -> α525''), [(α514'' -> α513'') - (α513'' -> (α514'' -> α513'')) ~ (α515'' -> (α520'' -> α525'')) - (α520'' -> α525''), L: 0 [(α513'' -> (α514'' -> α513'')) ~ (α515'' -> (α520'' -> α525'')), (α513'' -> (α514'' -> α513'')) :> (α515'' -> (α520'' -> α525''))]]]], α520'' <: α523'', α523'' :> list['a524'']]

////////// file 1948

////////// ocamlc error
//
// File "1948.ml", line 43, characters 46-70:
// 43 |     match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type 'a * 'b
//        but an expression was expected of type int list

let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      ((((x1 + x2) + carry) / 10), ((mod ((x1 + x2) + carry) 10) :: res)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (carry,res) = List.fold_left f base args in [carry] @ res in
  removeZero (add (padZero l1 l2));;
let rec mulByDigit i l =
  let f a x =
    let carry = i * x in
    match a with
    | h::t -> ((h + carry) / 10) :: (mod (h + carry) 10) :: t
    | _ -> [carry / 10; mod carry 10] in
  let base = [] in removeZero (List.fold_left f base (List.rev l));;
//│ helper: int -> int
//│ helper: int -> int
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ clone: 'a -> int -> list['a]
//│ padZero: (list['a] & list[?]) -> (list[?] & list['b]) -> (? | list['a], ? | list['b],)
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list['a] -> (list[nothing] | list['a])
//│ removeZero: list[int] -> list[int]
//│ tenEx: int -> list[int] -> (list[int] | list[nothing])
//│ tenEx: int -> list[int] -> list[int]
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> (list[nothing] | list[int])
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ mulByDigit: int -> list[int] -> (list[nothing] | list[int])
//│ mulByDigit: 'mulByDigit

// FIXME: no common provs
:unify
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-39    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ │                                                                      ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-39    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ │                                                              ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-43  if (List.length l1) > (List.length l2)
//│ │                           ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-40    if (List.length l1) < (List.length l2)
//│ │                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-42  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ │                                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-44let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-38    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-32  let add (l1,l2) =
//│                       ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-32  let add (l1,l2) =
//│ │                    ^^
//│ │  - l.-26    let args = List.rev (List.combine l1 l2) in
//│ │                                               ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-44let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-38    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-32  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-32  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-39    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-44let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-38    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-32  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-32  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-38    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-39    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ │                                                              ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-44let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-38    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-32  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-32  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-38    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-43  if (List.length l1) > (List.length l2)
//│ │                           ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-44let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-38    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-32  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-32  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-38    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-40    if (List.length l1) < (List.length l2)
//│ │                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                    ^^
//│ │  - l.-24  removeZero (add (padZero l1 l2));;
//│ │                                    ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-44let padZero l1 l2 =
//│                       ^^
//│   ◉ (?b * _) is here
//│   │  - l.-38    else (l1, l2);;
//│   │                  ^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-32  let add (l1,l2) =
//│                       ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-32  let add (l1,l2) =
//│   │                   ^^^^^^^
//│   │  - l.-24  removeZero (add (padZero l1 l2));;
//│   │                           ^^^^^^^^^^^^^^^
//│   │  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-43  if (List.length l1) > (List.length l2)
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │           then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2)) ...
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-40    if (List.length l1) < (List.length l2)
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │             then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _) is here
//│      - l.-38    else (l1, l2);;
//│                      ^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-44let padZero l1 l2 =
//│ │                     ^^
//│ │  - l.-42  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ │                                             ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ -> _`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ -> _)
//│ 
//│ ◉ (int * _ list) is here
//│ │  - l.6    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.2    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.3      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) is here
//│    - l.-33let bigAdd l1 l2 =
//│                         ^^^^
//│             let add (l1,l2) = ...
//│             ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ list`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ list)
//│ 
//│ ◉ (int * _ list) is here
//│ │  - l.6    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.2    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.3      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-33let bigAdd l1 l2 =
//│ │                       ^^^^
//│ │           let add (l1,l2) = ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.2    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.2    let f a x =
//│ │                 ^
//│ │  - l.4      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.4      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.2    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.2    let f a x =
//│ │                 ^
//│ │  - l.4      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.4      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?c) <--- (?b) <--- (?a) <--- (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.3      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.2    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?d) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.8    let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) is here
//│        - l.2    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.3      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.4      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) is here
//│    - l.-33let bigAdd l1 l2 =
//│                         ^^^^
//│             let add (l1,l2) = ...
//│             ^^^^^^^^^^^^^^^^^^^^^
//│ bigMul: ((list[int] | list[nothing]) -> list[(nothing, nothing,)] & list[int]) -> list[int] -> list[int]
//│ bigMul: (list[int] -> list[('b, list['a],)]) -> list[int] -> list[int]
//│ U max: 13, total: 192
//│ UERR 19 errors
//│ L: 1 [([α1209''], [[[α1103'']]],) ~ list[α1126''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', [α1124'' - ([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],) - α1125'', L: 0 [([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],), ([[α1124'']], [[α1127'']],) <: α1146'', α1146'' <: α1147'', α1147'' <: ([α1125''], [α1145''],)]], [α1125'' - ([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],) - α1124'', L: 0 [([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],), ([α1125''], [α1145''],) :> α1147'', α1147'' :> α1146'', α1146'' :> ([[α1124'']], [[α1127'']],)]], α1124'' <: list[α1126'']]
//│ L: 0 [([α1209''], [[[α1103'']]],) ~ list[α1179''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', α1124'' <: list[α1179'']]
//│ L: 1 [([α1209''], [[[α1103'']]],) ~ list[α1179''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', [α1124'' - ([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],) - α1125'', L: 0 [([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],), ([[α1124'']], [[α1127'']],) <: α1146'', α1146'' <: α1147'', α1147'' <: ([α1125''], [α1145''],)]], [α1125'' - ([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],) - α1124'', L: 0 [([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],), ([α1125''], [α1145''],) :> α1147'', α1147'' :> α1146'', α1146'' :> ([[α1124'']], [[α1127'']],)]], α1124'' <: list[α1179'']]
//│ L: 0 [([α1209''], [[[α1103'']]],) ~ list[α1123''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', α1124'' <: list[α1123'']]
//│ L: 0 [(α1128'' -> α1169'') ~ list['a1106''], (α1128'' -> α1169'') <: α1104'', α1104'' :> list['a1106'']]
//│ L: 0 [([α1209''], [[[α1103'']]],) ~ list[α1178''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', α1124'' <: list[α1178'']]
//│ L: 2 [list['a1356'] ~ (α1259' -> α1347'), list['a1356'] <: α1258', α1258' <: α1257', α1257' <: α1256', [α1256' - (α1251' -> α1256') ~ (α1247' -> α1246') - α1246', L: 1 [(α1251' -> α1256') ~ (α1247' -> α1246'), [(α1251' -> α1256') - (α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')) - (α1247' -> α1246'), L: 0 [(α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')), (α1248' -> (α1251' -> α1256')) <: (α1246' -> (α1247' -> α1246'))]]]], [α1246' - (α1247' -> α1246') ~ (α1251' -> α1256') - α1256', L: 1 [(α1247' -> α1246') ~ (α1251' -> α1256'), [(α1247' -> α1246') - (α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')) - (α1251' -> α1256'), L: 0 [(α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')), (α1246' -> (α1247' -> α1246')) :> (α1248' -> (α1251' -> α1256'))]]]], α1256' :> α1257', α1257' :> α1258', α1258' :> (α1259' -> α1347')]
//│ L: 2 [([int], [[list['a1358']]],) ~ (α1259' -> α1347'), ([int], [[list['a1358']]],) <: α1246', [α1246' - (α1247' -> α1246') ~ (α1251' -> α1256') - α1256', L: 1 [(α1247' -> α1246') ~ (α1251' -> α1256'), [(α1247' -> α1246') - (α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')) - (α1251' -> α1256'), L: 0 [(α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')), (α1246' -> (α1247' -> α1246')) :> (α1248' -> (α1251' -> α1256'))]]]], α1256' :> α1257', α1257' :> α1258', α1258' :> (α1259' -> α1347')]
//│ L: 1 [([α1209''], [[[α1103'']]],) ~ list[α1178''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', [α1124'' - ([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],) - α1125'', L: 0 [([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],), ([[α1124'']], [[α1127'']],) <: α1146'', α1146'' <: α1147'', α1147'' <: ([α1125''], [α1145''],)]], [α1125'' - ([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],) - α1124'', L: 0 [([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],), ([α1125''], [α1145''],) :> α1147'', α1147'' :> α1146'', α1146'' :> ([[α1124'']], [[α1127'']],)]], α1124'' <: list[α1178'']]
//│ L: 1 [([α1209''], [[[α1103'']]],) ~ list[α1122''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', [α1124'' - ([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],) - α1125'', L: 0 [([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],), ([[α1124'']], [[α1127'']],) <: α1146'', α1146'' <: α1147'', α1147'' <: ([α1125''], [α1145''],)]], α1125'' <: list[α1122'']]
//│ L: 2 [([int], [[list['a1358']]],) ~ list['a1356'], ([int], [[list['a1358']]],) <: α1246', [α1246' - (α1247' -> α1246') ~ (α1251' -> α1256') - α1256', L: 1 [(α1247' -> α1246') ~ (α1251' -> α1256'), [(α1247' -> α1246') - (α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')) - (α1251' -> α1256'), L: 0 [(α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')), (α1246' -> (α1247' -> α1246')) :> (α1248' -> (α1251' -> α1256'))]]]], α1256' :> α1257', α1257' :> α1258', α1258' :> list['a1356']]
//│ L: 1 [([α1209''], [[[α1103'']]],) ~ list[α1109''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', [α1124'' - ([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],) - α1125'', L: 0 [([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],), ([[α1124'']], [[α1127'']],) <: α1146'', α1146'' <: α1147'', α1147'' <: ([α1125''], [α1145''],)]], [α1125'' - ([α1125''], [α1145''],) ~ ([[list[α1109'']]], [[α1127'']],) - list[α1109''], L: 0 [([α1125''], [α1145''],) ~ ([[list[α1109'']]], [[α1127'']],), ([α1125''], [α1145''],) :> α1147'', α1147'' :> α1146'', α1146'' :> ([[list[α1109'']]], [[α1127'']],)]]]
//│ L: 2 [list['a1356'] ~ ([α1249'], [α1250'],), list['a1356'] <: α1258', α1258' <: α1257', α1257' <: α1256', [α1256' - (α1251' -> α1256') ~ (α1247' -> α1246') - α1246', L: 1 [(α1251' -> α1256') ~ (α1247' -> α1246'), [(α1251' -> α1256') - (α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')) - (α1247' -> α1246'), L: 0 [(α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')), (α1248' -> (α1251' -> α1256')) <: (α1246' -> (α1247' -> α1246'))]]]], [α1246' - (α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')) - α1248', L: 0 [(α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')), (α1246' -> (α1247' -> α1246')) :> (α1248' -> (α1251' -> α1256'))]], α1248' <: ([α1249'], [α1250'],)]
//│ L: 1 [([α1209''], [[[α1103'']]],) ~ list[α1123''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', [α1124'' - ([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],) - α1125'', L: 0 [([[α1124'']], [[α1127'']],) ~ ([α1125''], [α1145''],), ([[α1124'']], [[α1127'']],) <: α1146'', α1146'' <: α1147'', α1147'' <: ([α1125''], [α1145''],)]], [α1125'' - ([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],) - α1124'', L: 0 [([α1125''], [α1145''],) ~ ([[α1124'']], [[α1127'']],), ([α1125''], [α1145''],) :> α1147'', α1147'' :> α1146'', α1146'' :> ([[α1124'']], [[α1127'']],)]], α1124'' <: list[α1123'']]
//│ L: 0 [([α1209''], [[[α1103'']]],) ~ list[α1109''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', α1124'' <: list[α1109'']]
//│ L: 2 [(α1259' -> α1347') ~ ([α1362'], [α1363'],), (α1259' -> α1347') <: α1258', α1258' <: α1257', α1257' <: α1256', [α1256' - (α1251' -> α1256') ~ (α1247' -> α1246') - α1246', L: 1 [(α1251' -> α1256') ~ (α1247' -> α1246'), [(α1251' -> α1256') - (α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')) - (α1247' -> α1246'), L: 0 [(α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')), (α1248' -> (α1251' -> α1256')) <: (α1246' -> (α1247' -> α1246'))]]]], α1246' <: ([α1362'], [α1363'],)]
//│ L: 2 [list['a1356'] ~ ([α1362'], [α1363'],), list['a1356'] <: α1258', α1258' <: α1257', α1257' <: α1256', [α1256' - (α1251' -> α1256') ~ (α1247' -> α1246') - α1246', L: 1 [(α1251' -> α1256') ~ (α1247' -> α1246'), [(α1251' -> α1256') - (α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')) - (α1247' -> α1246'), L: 0 [(α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')), (α1248' -> (α1251' -> α1256')) <: (α1246' -> (α1247' -> α1246'))]]]], α1246' <: ([α1362'], [α1363'],)]
//│ L: 0 [([α1209''], [[[α1103'']]],) ~ list[α1126''], ([α1209''], [[[α1103'']]],) <: α1107'', α1107'' <: α1124'', α1124'' <: list[α1126'']]
//│ L: 2 [(α1259' -> α1347') ~ ([α1249'], [α1250'],), (α1259' -> α1347') <: α1258', α1258' <: α1257', α1257' <: α1256', [α1256' - (α1251' -> α1256') ~ (α1247' -> α1246') - α1246', L: 1 [(α1251' -> α1256') ~ (α1247' -> α1246'), [(α1251' -> α1256') - (α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')) - (α1247' -> α1246'), L: 0 [(α1248' -> (α1251' -> α1256')) ~ (α1246' -> (α1247' -> α1246')), (α1248' -> (α1251' -> α1256')) <: (α1246' -> (α1247' -> α1246'))]]]], [α1246' - (α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')) - α1248', L: 0 [(α1246' -> (α1247' -> α1246')) ~ (α1248' -> (α1251' -> α1256')), (α1246' -> (α1247' -> α1246')) :> (α1248' -> (α1251' -> α1256'))]], α1248' <: ([α1249'], [α1250'],)]

////////// file 2361

////////// ocamlc error
// 
// File "2361.ml", line 12, characters 46-51:
// 12 |   | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//                                                    ^^^^^
// Error: This expression has type bool but an expression was expected of type
//          int

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ addNumbs: list[int] -> int
//│ digits: int -> (list[int] | list[nothing])
//│ digits: int -> list[int]

:unify
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3    | [] -> 0
//│                     ^
//│ additivePersistence: int -> (bool | int)
//│ additivePersistence: 'additivePersistence
//│ U max: 6, total: 48
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α1489', α1489' <: α1475', α1475' :> int]
