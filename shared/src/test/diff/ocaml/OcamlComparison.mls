////////// file 1935

////////// ocamlc error
//
// File "1935.ml", line 22, characters 18-44:
// 22 |     let (_,res) = List.fold_left f base args in res in
//                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type int but an expression was expected of type
//          'a * 'b

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list['a] -> list['b] -> (list[int | 'a], list[int | 'b],)
//│ removeZero: list['a] -> list['a]

:unify
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ bigAdd: list[int] -> list[int] -> list[nothing]

////////// file 0003

////////// ocamlc error
//
// File "0003.ml", line 23, characters 31-32:
// 23 |         (let (toSum1,toSum2) = x in
//                                     ^
// Error: This expression has type 'a list
//        but an expression was expected of type 'b * 'c

let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
//│ clone: 'a -> int -> list['a]
//│ padZero: list['a] -> list['b] -> (list[int | 'a], list[int | 'b],)
//│ removeZero: (list[int & 'a] & 'b) -> (list['a] | 'b)

:unify
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.67: 	      if x = []
//│ ║        	             ^^
//│ ╟── this <nested> has type `?a list`
//│ ╟── this <nested> has type `?b * ?c`
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.65: 	    let f a x =
//│ ║        	            ^
//│ ╟── this reference has type `?b * ?c`
//│ ║  l.67: 	      if x = []
//│ ║        	         ^
//│ ╟── this <nested> has type `?b * ?c`
//│ ╟── `?b * ?c` comes from this type expression
//│ ║  builtin:42: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──            	                                         ^^^^^^^
//│ bigAdd: list[int] -> list[int] -> list[int]

////////// file 1948

////////// ocamlc error
//
// File "1948.ml", line 43, characters 46-70:
// 43 |     match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
// Error: This expression has type 'a * 'b
//        but an expression was expected of type int list

let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (x1,x2) = x in
      let (carry,res) = a in
      ((((x1 + x2) + carry) / 10), ((mod ((x1 + x2) + carry) 10) :: res)) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (carry,res) = List.fold_left f base args in [carry] @ res in
  removeZero (add (padZero l1 l2));;
let rec mulByDigit i l =
  let f a x =
    let carry = i * x in
    match a with
    | h::t -> ((h + carry) / 10) :: (mod (h + carry) 10) :: t
    | _ -> [carry / 10; mod carry 10] in
  let base = [] in removeZero (List.fold_left f base (List.rev l));;
//│ helper: int -> int
//│ clone: 'a -> int -> list['a]
//│ padZero: list['a] -> list['b] -> (list[int | 'a], list[int | 'b],)
//│ removeZero: list['a] -> list['a]
//│ tenEx: int -> list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ mulByDigit: int -> list[int] -> list[int]

:unify
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list`
//│ ║  l.153: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list`
//│ ║  l.152: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.153: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?a list`
//│ ╟── this application has type `?a list`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?b -> ?c`
//│ ╟── this let expression has type `?b -> ?c`
//│ ║  l.152: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.153: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b -> ?c`
//│ ║  l.153: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?b -> ?c`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?b -> ?c`
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.124: 	let bigAdd l1 l2 =
//│ ║         	              ^^^^
//│ ║  l.125: 	  let add (l1,l2) = ...
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟── this tuple literal has type `int * ?a list`
//│ ║  l.155: 	  let base = (0, []) in
//│ ║         	             ^^^^^^^
//│ ╟── this reference has type `int * ?a list`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                                     ^^^^
//│ ╟── this <nested> has type `int * ?a list`
//│ ╟── this application has type `int * ?a list`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?b -> ?c`
//│ ╟── this let expression has type `?b -> ?c`
//│ ║  l.152: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.153: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b -> ?c`
//│ ║  l.153: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?b -> ?c`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?b -> ?c`
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.124: 	let bigAdd l1 l2 =
//│ ║         	              ^^^^
//│ ║  l.125: 	  let add (l1,l2) = ...
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int * ?a list` does not match `?b list`
//│ ║  
//│ ╟── this tuple literal has type `int * ?a list`
//│ ║  l.155: 	  let base = (0, []) in
//│ ║         	             ^^^^^^^
//│ ╟── this reference has type `int * ?a list`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                                     ^^^^
//│ ╟── this <nested> has type `int * ?a list`
//│ ╟── this application has type `int * ?a list`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b list`
//│ ║  l.157: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?b list`
//│ ╟── this let expression has type `?b list`
//│ ║  l.152: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.153: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?b list`
//│ ║  l.153: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?b list`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?b list`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── `?b list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──           	     ^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:37: 	let (@): 'a list -> 'a list -> 'a list
//│ ║              	                               ^^^^^^^
//│ ╟── this <nested> has type `?a list`
//│ ╟── this operator application has type `?a list`
//│ ║  l.118: 	    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?a list`
//│ ╟── this variable has type `?a list`
//│ ║  l.125: 	  let add (l1,l2) =
//│ ║         	           ^^
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.124: 	let bigAdd l1 l2 =
//│ ║         	           ^^
//│ ╟── this reference has type `?b * ?c`
//│ ║  l.133: 	  removeZero (add (padZero l1 l2));;
//│ ║         	                           ^^
//│ ╟── this <nested> has type `?b * ?c`
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.113: 	let padZero l1 l2 =
//│ ║         	            ^^
//│ ╟── this reference has type `?b * ?c`
//│ ║  l.115: 	  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
//│ ║         	        ^^
//│ ╟── this <nested> has type `?b * ?c`
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.125: 	  let add (l1,l2) =
//│ ║         	           ^^
//│ ╟── this <nested> has type `?b * ?c`
//│ ╟── this tuple literal has type `?b * ?c`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ╙──       	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?b -> ?c`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.154: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this <nested> has type `?b -> ?c`
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.124: 	let bigAdd l1 l2 =
//│ ║         	              ^^^^
//│ ║  l.125: 	  let add (l1,l2) = ...
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ bigMul: nothing -> list[int] -> list[int]

////////// file 2361

////////// ocamlc error
// 
// File "2361.ml", line 12, characters 46-51:
// 12 |   | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//                                                    ^^^^^
// Error: This expression has type bool but an expression was expected of type
//          int

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]

:unify
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.362: 	  | [] -> 0
//│ ║         	          ^
//│ ╟── this match expression has type `int`
//│ ║  l.361: 	  match digits n with
//│ ║         	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.362: 	  | [] -> 0 ...
//│ ║         	^^^^^^^^^^^
//│ ╟── this match expression has type `bool`
//│ ║  l.361: 	  match digits n with
//│ ║         	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.362: 	  | [] -> 0 ...
//│ ║         	^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `bool`
//│ ║  l.363: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `bool`
//│ ║  l.363: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║         	                                                         ^^^^
//│ ╙── `bool` comes from this type expression
//│ additivePersistence: int -> (bool | int)
