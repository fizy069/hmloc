
0, fun x -> x
//│ res: (int, 'a -> 'a,)

let g x = x, if true then x else x
//│ g: 'a -> ('a, 'a,)

[0, 1]
//│ res: list[(int, int,)]

[0; 1]
//│ res: list[int]

[0, 1; 2, 3]
//│ res: list[(int, int,)]


:e
[0, 1; 2, 3, 4]
//│ ╔══[ERROR] Type `int * int * int` does not match `int * int`
//│ ║  
//│ ╟── this tuple literal has type `int * int * int`
//│ ║  l.1: 	[0, 1; 2, 3, 4]
//│ ║       	       ^^^^^^^
//│ ╟── this tuple literal has type `int * int`
//│ ║  l.1: 	[0, 1; 2, 3, 4]
//│ ╙──     	 ^^^^
//│ res: list[Array[int] & {_1: int, _2: int}]

