:AllowTypeErrors



let test =
  let f x = x in
  (f 1 + f true)
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.3    (f 1 + f true)
//│ │                    ^^^^
//│ │  - l.2    let f x = x in
//│ │                 ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.2    let f x = x in
//│ │                 ^
//│ │  - l.2    let f x = x in
//│ │                     ^
//│ │  - l.3    (f 1 + f true)
//│ │                  ^^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                           ^^^
//│ test: int
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α68', α68' <: int]



let test2 = let (a, b) = test in [[b]] + 1
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ │  - lib. let (+): int -> int -> int
//│ │                                ^^^
//│ │  - l.-28  (f 1 + f true)
//│ │           ^^^^^^^^^^^^^^^
//│ │  - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│ │                                  ^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│                           ^^^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│ │                                          ^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│ test2: int
//│ U max: 2, total: 12
//│ UERR 2 errors
//│ L: 0 [list['a74'] ~ int, list['a74'] <: int]
//│ L: 0 [int ~ ([α72'], [α73'],), int <: ([α72'], [α73'],)]


let f x = x + 1
not (f 1)
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - lib. let (+): int -> int -> int
//│ │                                ^^^
//│ │  - l.1  let f x = x + 1
//│ │                   ^^^^^
//│ │  - l.2  not (f 1)
//│ │             ^^^^^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ f: int -> int
//│ res: bool
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: bool]


:d
let a = 1
not a
//│ 1. Typing term 1 IntLit
//│ 1. : int
//│ ⬤ U Typed as: int
//│  where: 
//│ 0. Typing term not a App
//│ | 0. Typing term not Var
//│ | 0. : [(bool -> bool)]
//│ | 0. Typing term a Var
//│ | 0. : [int]
//│ | U Q [int] ~ bool
//│ | U L: 0 [int ~ bool, int <: bool]
//│ | UERR L: 0 [int ~ bool, int <: bool]
//│ 0. : [bool]
//│ ⬤ U Typed as: [bool]
//│  where: 
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  let a = 1
//│ │                 ^
//│ │  - l.2  not a
//│ │             ^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ a: int
//│ res: bool
//│ U max: 1, total: 1
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: bool]


let confluence z = if true then z else 5
confluence true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.2  confluence true
//│ │                    ^^^^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: int -> int
//│ res: 'a
//│   where
//│     'a = bool, int
//│ U max: 2, total: 7
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α92, α92 <: α93, α93 :> int]


let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit


f x
//│ [ERROR] Type `int` does not match `string`
//│ 
//│         (int) ~~~~ (string)
//│ 
//│ ◉ (int) comes from
//│    - l.-7 let x: int list
//│                  ^^^
//│   ◉ (int list) comes from
//│   │  - l.-7 let x: int list
//│   │                ^^^^^^^^
//│   │  - l.1  f x
//│   │           ^
//│   ▼ 
//│   ◉ (string list) comes from
//│      - l.-5 let f: string list -> unit
//│                    ^^^^^^^^^^^
//│ ◉ (string) comes from
//│    - l.-5 let f: string list -> unit
//│                  ^^^^^^
//│ U max: 1, total: 2
//│ UERR 1 errors
//│ L: 1 [int ~ string, [int - list[int] ~ list[string] - string, L: 0 [list[int] ~ list[string], list[int] <: list[string]]]]

// Should show
// ╔══[ERROR] Type `string list` does not match `int list`
// ║  
// ╟──        string list ---> ?a <--- int list 
// ║  
// ╟── `string list` comes from this type expression
// ║  l.-10: 	let y: string list
// ║         	       ^^^^^^^^^^^
// ╟── this `else` branch has type `string list` and it flows into `?a`
// ║  l.1: 	if true then x else y
// ║       	                    ^
// ╟── this if-then-else expression has type `?a`
// ║  l.1: 	if true then x else y
// ║       	^^^^^^^^^^^^^^^^^^^^^
// ╟── this `then` branch has type `?a` and it flows from `int list`
// ║  l.1: 	if true then x else y
// ║       	             ^
// ╟── this applied type reference has type `int list`
// ║  l.-11: 	let x: int list
// ╙──       	       ^^^^^^^^
// res: list[int | string]
if true then x else y
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ~~~~ (int)
//│ 
//│ ◉ (string) comes from
//│    - l.-51let y: string list
//│                  ^^^^^^
//│   ◉ (string list) comes from
//│   │  - l.-51let y: string list
//│   │                ^^^^^^^^^^^
//│   │  - l.1  if true then x else y
//│   │                             ^
//│   │  - l.1  if true then x else y
//│   │         ^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed for
//│   ▲  - l.1  if true then x else y
//│   │         ^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  if true then x else y
//│   │                      ^
//│   │ 
//│   ◉ (int list) comes from
//│      - l.-52let x: int list
//│                    ^^^^^^^^
//│ ◉ (int) comes from
//│    - l.-52let x: int list
//│                  ^^^
//│ res: 'a
//│   where
//│     'a = list[string], list[int]
//│ U max: 1, total: 5
//│ UERR 1 errors
//│ L: 1 [string ~ int, [string - list[string] ~ list[int] - int, L: 0 [list[string] ~ list[int], list[string] <: α97, α97 :> list[int]]]]


Left 1 : int
//│ [ERROR] Type `(_, _) either` does not match `int`
//│ 
//│         ((_, _) either) ---> (int)
//│ 
//│ ◉ ((_, _) either) comes from
//│ │  - lib. type ('a, 'b) either = Left of 'a | Right of 'b
//│ │                                ^^^^^^^^^^
//│ │  - l.1  Left 1 : int
//│ │         ^^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - l.1  Left 1 : int
//│                    ^^^
//│ res: int
//│ U max: 1, total: 2
//│ UERR 1 errors
//│ L: 0 [either[α98,α99] ~ int, either[α98,α99] <: int]


let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
mkpair 1 "2"
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ---> (?a) ---> (?b) ---> (?c) <--- (int)
//│ 
//│ ◉ (string) comes from
//│ │  - l.3  mkpair 1 "2"
//│ │                  ^^^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: int -> int
//│ mkpair: 'a -> 'b -> ('a, int,)
//│ res: (int, 'a,)
//│   where
//│     'a = string, int
//│ U max: 2, total: 10
//│ UERR 1 errors
//│ L: 0 [string ~ int, string <: α112, α112 <: α113, α113 <: α114, α114 :> int]


let a = 1
let b = a
let f x = if x then true else false
let g = f
g b
//│ [ERROR] Type `int` does not match `string list`
//│ 
//│         (int) ---> (string list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  let a = 1
//│ │                 ^
//│ │  - l.2  let b = a
//│ │                 ^
//│ │  - l.5  g b
//│ │           ^
//│ ▼ 
//│ ◉ (string list) comes from
//│    - l.-152let f: string list -> unit
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `bool` does not match `unit`
//│ 
//│         (bool) ---> (?a) ~~~~ (unit)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.3  let f x = if x then true else false
//│ │                             ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.3  let f x = if x then true else false
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.3  let f x = if x then true else false
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (string list -> unit) comes from
//│      - l.-152let f: string list -> unit
//│                     ^^^^^^^^^^^^^^^^^^^
//│ ◉ (unit) comes from
//│    - l.-152let f: string list -> unit
//│                                  ^^^^
//│ [ERROR] Type `bool` does not match `string list`
//│ 
//│         (bool) <--- (?a) ~~~~ (string list)
//│ 
//│ ◉ (bool) comes from
//│ ▲  - l.3  let f x = if x then true else false
//│ │                      ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.3  let f x = if x then true else false
//│                 ^
//│   ◉ (?a -> _) comes from
//│   │  - l.3  let f x = if x then true else false
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (string list -> unit) comes from
//│      - l.-152let f: string list -> unit
//│                     ^^^^^^^^^^^^^^^^^^^
//│ ◉ (string list) comes from
//│    - l.-152let f: string list -> unit
//│                   ^^^^^^^^^^^
//│ a: int
//│ b: int
//│ bool -> bool
//│   <:  f:
//│ list[string] -> unit
//│ g: list[string] -> unit
//│ U max: 3, total: 8
//│ UERR 3 errors
//│ L: 0 [int ~ list[string], int <: list[string]]
//│ L: 1 [bool ~ unit, bool <: α121, [α121 - (α120 -> α121) ~ (list[string] -> unit) - unit, L: 0 [(α120 -> α121) ~ (list[string] -> unit), (α120 -> α121) <: (list[string] -> unit)]]]
//│ L: 1 [bool ~ list[string], bool :> α120, [α120 - (α120 -> α121) ~ (list[string] -> unit) - list[string], L: 0 [(α120 -> α121) ~ (list[string] -> unit), (α120 -> α121) <: (list[string] -> unit)]]]

let wrap x = x :: []
//│ wrap: 'a -> list['a]


if true then wrap 1 else wrap true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?c) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  if true then wrap 1 else wrap true
//│ │                                       ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-3 let wrap x = x :: []
//│                    ^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-3 let wrap x = x :: []
//│   │                      ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-3 let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-3 let wrap x = x :: []
//│   │                      ^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │                                  ^^^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.1  if true then wrap 1 else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │                      ^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-3 let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-3 let wrap x = x :: []
//│   │                      ^^^^^^^
//│   │ 
//│   ◉ (?d * _ list) comes from
//│      - l.-3 let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?d) is assumed for
//│ ▲  - l.-3 let wrap x = x :: []
//│ │                  ^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  if true then wrap 1 else wrap true
//│                             ^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a2) ~~~~ (?a1) ~~~~ (?c) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  if true then wrap 1 else wrap true
//│ │                                       ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-3 let wrap x = x :: []
//│                    ^
//│   ◉ (?b * ?a list) comes from
//│   │  - l.-3 let wrap x = x :: []
//│   │                      ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-3 let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-3 let wrap x = x :: []
//│     │                      ^^^^^^^
//│     │ 
//│     ◉ (?b * ?a list) comes from
//│        - l.-3 let wrap x = x :: []
//│                            ^^^^^^^
//│   ◉ (?a list) comes from
//│      - l.-3 let wrap x = x :: []
//│                               ^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│      - l.-3 let wrap x = x :: []
//│                               ^^
//│     ◉ (?b * ?a list) comes from
//│     │  - l.-3 let wrap x = x :: []
//│     │                      ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-3 let wrap x = x :: []
//│                            ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-3 let wrap x = x :: []
//│   │                      ^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │                                  ^^^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.1  if true then wrap 1 else wrap true
//│   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  if true then wrap 1 else wrap true
//│   │                      ^^^^^^
//│   │ 
//│   ◉ (?a1 list) comes from
//│      - l.-3 let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│     ◉ (?a1 * ?a1 list) comes from
//│     ▲  - l.-3 let wrap x = x :: []
//│     │                      ^^^^^^^
//│     │ 
//│     ◉ (?d * ?a2 list) comes from
//│        - l.-3 let wrap x = x :: []
//│                            ^^^^^^^
//│   ◉ (?a2 list) comes from
//│      - l.-3 let wrap x = x :: []
//│                               ^^
//│ ◉ (?a2) is assumed for
//│   ◉ (?a2 list) comes from
//│      - l.-3 let wrap x = x :: []
//│                               ^^
//│     ◉ (?d * ?a2 list) comes from
//│     │  - l.-3 let wrap x = x :: []
//│     │                      ^^^^^^^
//│     ▼ 
//│     ◉ (?a1 * ?a1 list) comes from
//│        - l.-3 let wrap x = x :: []
//│                            ^^^^^^^
//│   ◉ (?a1 list) comes from
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 * ?a1 list) comes from
//│   ▲  - l.-3 let wrap x = x :: []
//│   │                      ^^^^^^^
//│   │ 
//│   ◉ (?d * ?a2 list) comes from
//│      - l.-3 let wrap x = x :: []
//│                          ^^^^^^^
//│ ◉ (?d) is assumed for
//│ ▲  - l.-3 let wrap x = x :: []
//│ │                  ^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  if true then wrap 1 else wrap true
//│                             ^
//│ res: list[bool]
//│ U max: 7, total: 33
//│ UERR 2 errors
//│ L: 1 [bool ~ int, bool <: α133, [α133 - ([[α133]], [[list['a135]]],) ~ ('a134, list['a134],) - 'a134, L: 0 [([[α133]], [[list['a135]]],) ~ ('a134, list['a134],), ([[α133]], [[list['a135]]],) <: ('a134, list['a134],)]], ['a134 - list['a134] ~ list['a130] - 'a130, L: 0 [list['a134] ~ list['a130], list['a134] <: α128, α128 :> list['a130]]], ['a130 - ('a130, list['a130],) ~ ([[α129]], [[list['a131]]],) - α129, L: 0 [('a130, list['a130],) ~ ([[α129]], [[list['a131]]],), ('a130, list['a130],) :> ([[α129]], [[list['a131]]],)]], α129 :> int]
//│ L: 2 [bool ~ int, bool <: α133, [α133 - ([[α133]], [[list['a135]]],) ~ ('a134, list['a134],) - 'a134, L: 0 [([[α133]], [[list['a135]]],) ~ ('a134, list['a134],), ([[α133]], [[list['a135]]],) <: ('a134, list['a134],)]], ['a134 - list['a134] ~ list['a135] - 'a135, L: 1 [list['a134] ~ list['a135], [list['a134] - ('a134, list['a134],) ~ ([[α133]], [[list['a135]]],) - list['a135], L: 0 [('a134, list['a134],) ~ ([[α133]], [[list['a135]]],), ('a134, list['a134],) :> ([[α133]], [[list['a135]]],)]]]], ['a135 - list['a135] ~ list['a134] - 'a134, L: 1 [list['a135] ~ list['a134], [list['a135] - ([[α133]], [[list['a135]]],) ~ ('a134, list['a134],) - list['a134], L: 0 [([[α133]], [[list['a135]]],) ~ ('a134, list['a134],), ([[α133]], [[list['a135]]],) <: ('a134, list['a134],)]]]], ['a134 - list['a134] ~ list['a130] - 'a130, L: 0 [list['a134] ~ list['a130], list['a134] <: α128, α128 :> list['a130]]], ['a130 - list['a130] ~ list['a131] - 'a131, L: 1 [list['a130] ~ list['a131], [list['a130] - ('a130, list['a130],) ~ ([[α129]], [[list['a131]]],) - list['a131], L: 0 [('a130, list['a130],) ~ ([[α129]], [[list['a131]]],), ('a130, list['a130],) :> ([[α129]], [[list['a131]]],)]]]], ['a131 - list['a131] ~ list['a130] - 'a130, L: 1 [list['a131] ~ list['a130], [list['a131] - ([[α129]], [[list['a131]]],) ~ ('a130, list['a130],) - list['a130], L: 0 [([[α129]], [[list['a131]]],) ~ ('a130, list['a130],), ([[α129]], [[list['a131]]],) <: ('a130, list['a130],)]]]], ['a130 - ('a130, list['a130],) ~ ([[α129]], [[list['a131]]],) - α129, L: 0 [('a130, list['a130],) ~ ([[α129]], [[list['a131]]],), ('a130, list['a130],) :> ([[α129]], [[list['a131]]],)]], α129 :> int]


if true then wrap (if true then 1 else false) else wrap true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                                ^^^^^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                           ^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                         ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-161let wrap x = x :: []
//│                     ^
//│   ◉ (?c * _ list) comes from
//│   │  - l.-161let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-161let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-161let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?c * _ list) comes from
//│      - l.-161let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-161let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                                  ^^^^^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                         ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-161let wrap x = x :: []
//│                     ^
//│   ◉ (?c * ?a list) comes from
//│   │  - l.-161let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-161let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-161let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?c * ?a list) comes from
//│        - l.-161let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│      - l.-161let wrap x = x :: []
//│                                ^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│      - l.-161let wrap x = x :: []
//│                                ^^
//│     ◉ (?c * ?a list) comes from
//│     │  - l.-161let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-161let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-161let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?c * ?a list) comes from
//│      - l.-161let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-161let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                                  ^^^^^
//│ res: list[bool]
//│ U max: 8, total: 42
//│ UERR 3 errors
//│ L: 0 [bool ~ int, bool <: α142, α142 :> int]
//│ L: 1 [int ~ bool, int <: α142, α142 <: α139, [α139 - ([[α139]], [[list['a141]]],) ~ ('a140, list['a140],) - 'a140, L: 0 [([[α139]], [[list['a141]]],) ~ ('a140, list['a140],), ([[α139]], [[list['a141]]],) <: ('a140, list['a140],)]], ['a140 - ('a140, list['a140],) ~ ([[α139]], [[list['a141]]],) - α139, L: 0 [('a140, list['a140],) ~ ([[α139]], [[list['a141]]],), ('a140, list['a140],) :> ([[α139]], [[list['a141]]],)]], α139 :> α142, α142 :> bool]
//│ L: 2 [int ~ bool, int <: α142, α142 <: α139, [α139 - ([[α139]], [[list['a141]]],) ~ ('a140, list['a140],) - 'a140, L: 0 [([[α139]], [[list['a141]]],) ~ ('a140, list['a140],), ([[α139]], [[list['a141]]],) <: ('a140, list['a140],)]], ['a140 - list['a140] ~ list['a141] - 'a141, L: 1 [list['a140] ~ list['a141], [list['a140] - ('a140, list['a140],) ~ ([[α139]], [[list['a141]]],) - list['a141], L: 0 [('a140, list['a140],) ~ ([[α139]], [[list['a141]]],), ('a140, list['a140],) :> ([[α139]], [[list['a141]]],)]]]], ['a141 - list['a141] ~ list['a140] - 'a140, L: 1 [list['a141] ~ list['a140], [list['a141] - ([[α139]], [[list['a141]]],) ~ ('a140, list['a140],) - list['a140], L: 0 [([[α139]], [[list['a141]]],) ~ ('a140, list['a140],), ([[α139]], [[list['a141]]],) <: ('a140, list['a140],)]]]], ['a140 - ('a140, list['a140],) ~ ([[α139]], [[list['a141]]],) - α139, L: 0 [('a140, list['a140],) ~ ([[α139]], [[list['a141]]],), ('a140, list['a140],) :> ([[α139]], [[list['a141]]],)]], α139 :> α142, α142 :> bool]


let rec t = wrap (if true then 1 else t)
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?t) ---> (?a) ---> (?b) <--- (?a) <--- (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.-301let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ ▼ 
//│ ◉ (?t) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                                               ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-301let wrap x = x :: []
//│ │                   ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.-301let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let rec t = wrap (if true then 1 else t)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?t) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-301let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ ▼ 
//│ ◉ (?t) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                                               ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-301let wrap x = x :: []
//│                     ^
//│   ◉ (?c * _ list) comes from
//│   │  - l.-301let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-301let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-301let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?c * _ list) comes from
//│      - l.-301let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-301let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let rec t = wrap (if true then 1 else t)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?t) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-301let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ ▼ 
//│ ◉ (?t) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                                               ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-301let wrap x = x :: []
//│                     ^
//│   ◉ (?c * ?a0 list) comes from
//│   │  - l.-301let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-301let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-301let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?c * ?a0 list) comes from
//│        - l.-301let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│      - l.-301let wrap x = x :: []
//│                                ^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│      - l.-301let wrap x = x :: []
//│                                ^^
//│     ◉ (?c * ?a0 list) comes from
//│     │  - l.-301let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-301let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-301let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?c * ?a0 list) comes from
//│      - l.-301let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.-301let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let rec t = wrap (if true then 1 else t)
//│                                          ^
//│ t: 't
//│   where
//│     't = list['a], int
//│     'a = list['a], int
//│ U max: 5, total: 37
//│ UERR 3 errors
//│ L: 1 [list['a151'] ~ int, list['a151'] <: t149', t149' <: α153', α153' <: α150', [α150' - ([[α150']], [[list['a152']]],) ~ ('a151', list['a151'],) - 'a151', L: 0 [([[α150']], [[list['a152']]],) ~ ('a151', list['a151'],), ([[α150']], [[list['a152']]],) <: ('a151', list['a151'],)]], ['a151' - ('a151', list['a151'],) ~ ([[α150']], [[list['a152']]],) - α150', L: 0 [('a151', list['a151'],) ~ ([[α150']], [[list['a152']]],), ('a151', list['a151'],) :> ([[α150']], [[list['a152']]],)]], α150' :> α153', α153' :> int]
//│ L: 0 [list['a151'] ~ int, list['a151'] <: t149', t149' <: α153', α153' <: α150', α150' :> α153', α153' :> int]
//│ L: 2 [list['a151'] ~ int, list['a151'] <: t149', t149' <: α153', α153' <: α150', [α150' - ([[α150']], [[list['a152']]],) ~ ('a151', list['a151'],) - 'a151', L: 0 [([[α150']], [[list['a152']]],) ~ ('a151', list['a151'],), ([[α150']], [[list['a152']]],) <: ('a151', list['a151'],)]], ['a151' - list['a151'] ~ list['a152'] - 'a152', L: 1 [list['a151'] ~ list['a152'], [list['a151'] - ('a151', list['a151'],) ~ ([[α150']], [[list['a152']]],) - list['a152'], L: 0 [('a151', list['a151'],) ~ ([[α150']], [[list['a152']]],), ('a151', list['a151'],) :> ([[α150']], [[list['a152']]],)]]]], ['a152' - list['a152'] ~ list['a151'] - 'a151', L: 1 [list['a152'] ~ list['a151'], [list['a152'] - ([[α150']], [[list['a152']]],) ~ ('a151', list['a151'],) - list['a151'], L: 0 [([[α150']], [[list['a152']]],) ~ ('a151', list['a151'],), ([[α150']], [[list['a152']]],) <: ('a151', list['a151'],)]]]], ['a151' - ('a151', list['a151'],) ~ ([[α150']], [[list['a152']]],) - α150', L: 0 [('a151', list['a151'],) ~ ([[α150']], [[list['a152']]],), ('a151', list['a151'],) :> ([[α150']], [[list['a152']]],)]], α150' :> α153', α153' :> int]


let test z = if true then wrap z else wrap true
 
let rec m = test (if true then 1 else m)
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (?m) ---> (?b) ---> (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (?m) ---> (?b) ---> (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?e * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?e * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ---> (?d) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?e) <--- (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?d * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ---> (?d) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?e) <--- (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?d * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?f) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-486let wrap x = x :: []
//│                         ^
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?f * ?a1 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?e * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-486let wrap x = x :: []
//│                         ^
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?f * ?a1 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?e * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (_ * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (_ * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│      - l.-486let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a) is assumed for
//│     ◉ (?a list) comes from
//│       ◉ (?a * ?a list) comes from
//│       ▲  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │ 
//│       ◉ (_ * ?a1 list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│   ◉ (?a1) is assumed for
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│       ◉ (_ * ?a1 list) comes from
//│       │  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       ▼ 
//│       ◉ (?a * ?a list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a list) comes from
//│   ◉ (?a) is assumed for
//│     ◉ (?a list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?e * _ list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│   ▲  - l.-486let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?e * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?c) <--- (?d) <--- (?e) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                                    ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?b * ?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?b * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?b * ?a list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│      - l.-486let wrap x = x :: []
//│                       ^
//│     ◉ (?f * _ list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a1 * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1) is assumed for
//│     ◉ (?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?c) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?c) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│       ◉ (?a0 * ?a0 list) comes from
//│       ▲  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │ 
//│       ◉ (?b * ?a list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│   ◉ (?a) is assumed for
//│     ◉ (?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│       ◉ (?b * ?a list) comes from
//│       │  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       ▼ 
//│       ◉ (?a0 * ?a0 list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a0 list) comes from
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?c) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1) is assumed for
//│     ◉ (?a1 * ?a1 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * _ list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?f) is assumed for
//│   ▲  - l.-486let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?e) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 * ?a1 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?e) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│      - l.-486let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a) is assumed for
//│     ◉ (?a list) comes from
//│       ◉ (?a * ?a list) comes from
//│       ▲  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │ 
//│       ◉ (?f * ?a1 list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│   ◉ (?a1) is assumed for
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│       ◉ (?f * ?a1 list) comes from
//│       │  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       ▼ 
//│       ◉ (?a * ?a list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a list) comes from
//│   ◉ (?a) is assumed for
//│     ◉ (?a list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?e * _ list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│   ▲  - l.-486let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-486let wrap x = x :: []
//│                         ^
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?f * ?a1 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│      - l.-486let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a) is assumed for
//│     ◉ (?a list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│       ◉ (?a0 * ?a0 list) comes from
//│       ▲  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │ 
//│       ◉ (?f * ?a1 list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│   ◉ (?a1) is assumed for
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│       ◉ (?f * ?a1 list) comes from
//│       │  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       ▼ 
//│       ◉ (?a0 * ?a0 list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a0 list) comes from
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a) is assumed for
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?e * _ list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│   ▲  - l.-486let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a * ?a list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?e * _ list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) comes from
//│ │  - l.-486let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.-486let wrap x = x :: []
//│                         ^
//│    - l.-486let wrap x = x :: []
//│                     ^
//│   ◉ (?f * ?a1 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│      - l.-486let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a * ?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a) is assumed for
//│     ◉ (?a list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed for
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│       ◉ (?a0 * ?a0 list) comes from
//│       ▲  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       │ 
//│       ◉ (?f * ?a1 list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│   ◉ (?a1) is assumed for
//│     ◉ (?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                                  ^^
//│       ◉ (?f * ?a1 list) comes from
//│       │  - l.-486let wrap x = x :: []
//│       │                       ^^^^^^^
//│       ▼ 
//│       ◉ (?a0 * ?a0 list) comes from
//│          - l.-486let wrap x = x :: []
//│                               ^^^^^^^
//│     ◉ (?a0 list) comes from
//│   ◉ (?a0) is assumed for
//│     ◉ (?a0 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed for
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a) is assumed for
//│     ◉ (?a * ?a list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?e * _ list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?e) is assumed for
//│   ▲  - l.-486let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed for
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │ 
//│     ◉ (?f * ?a1 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                                ^^
//│     ◉ (?f * ?a1 list) comes from
//│     │  - l.-486let wrap x = x :: []
//│     │                       ^^^^^^^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.-486let wrap x = x :: []
//│                             ^^^^^^^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.-486let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │ 
//│   ◉ (?f * ?a1 list) comes from
//│      - l.-486let wrap x = x :: []
//│                           ^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-486let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) comes from
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ test: bool -> list[bool]
//│ m: 'm
//│   where
//│     'm = int, bool, list['m], list['a]
//│     'a = int, bool, list['a]
//│ U max: 56, total: 218
//│ UERR 17 errors
//│ L: 2 [int ~ bool, int <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]
//│ L: 3 [list['a174'] ~ int, list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], [α171' - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - 'a172', L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 2 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> int]
//│ L: 2 [list['a174'] ~ int, list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], [α171' - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - 'a172', L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> int]
//│ L: 3 [list['a174'] ~ bool, list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], [α171' - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - 'a172', L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 2 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]
//│ L: 3 [list['a172'] ~ bool, list['a172'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 2 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]
//│ L: 2 [list['a172'] ~ int, list['a172'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], [α171' - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - 'a172', L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> int]
//│ L: 1 [list['a172'] ~ int, list['a172'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> int]
//│ L: 3 [list['a172'] ~ int, list['a172'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 2 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> int]
//│ L: 3 [bool ~ int, bool <: α171', [α171' - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - 'a172', L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 2 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' <: m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> m169', m169' :> α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a174'] - 'a174', L: 0 [list['a172'] ~ list['a174'], list['a172'] <: α175', α175' :> list['a174']]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> int]
//│ L: 2 [list['a172'] ~ bool, list['a172'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]
//│ L: 1 [list['a174'] ~ bool, list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]
//│ L: 1 [int ~ bool, int <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]
//│ L: 0 [list['a172'] ~ int, list['a172'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' :> α178', α178' :> int]
//│ L: 0 [list['a174'] ~ int, list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' :> α178', α178' :> int]
//│ L: 1 [list['a174'] ~ int, list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - ('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],) - α177', L: 0 [('a174', list['a174'],) ~ ([[α177']], [[list['a176']]],), ('a174', list['a174'],) :> ([[α177']], [[list['a176']]],)]], α177' :> α170', α170' :> α178', α178' :> int]
//│ L: 2 [list['a174'] ~ bool, list['a174'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - list['a172'] ~ list['a173'] - 'a173', L: 1 [list['a172'] ~ list['a173'], [list['a172'] - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - list['a173'], L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]]]], ['a173' - list['a173'] ~ list['a172'] - 'a172', L: 1 [list['a173'] ~ list['a172'], [list['a173'] - ([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],) - list['a172'], L: 0 [([[α171']], [[list['a173']]],) ~ ('a172', list['a172'],), ([[α171']], [[list['a173']]],) <: ('a172', list['a172'],)]]]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]
//│ L: 1 [list['a172'] ~ bool, list['a172'] <: α175', α175' <: m169', m169' <: α178', α178' <: α170', α170' <: α177', [α177' - ([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],) - 'a174', L: 0 [([[α177']], [[list['a176']]],) ~ ('a174', list['a174'],), ([[α177']], [[list['a176']]],) <: ('a174', list['a174'],)]], ['a174' - list['a174'] ~ list['a172'] - 'a172', L: 0 [list['a174'] ~ list['a172'], list['a174'] <: α175', α175' :> list['a172']]], ['a172' - ('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],) - α171', L: 0 [('a172', list['a172'],) ~ ([[α171']], [[list['a173']]],), ('a172', list['a172'],) :> ([[α171']], [[list['a173']]],)]], α171' :> bool]


// FIXME implementation exception
let rec digitsOfInt n =
  ((digitsOfInt n) / 10) @ [remainder];;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (_ list)
//│ 
//│ ◉ (int) comes from
//│ │  - lib. let ( / ): int -> int -> int
//│ │                                  ^^^
//│ │  - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                    ^^^^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ~~~~ (?a) ---> (int)
//│ 
//│ ◉ (_ list) comes from
//│    - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│   ◉ (_ -> _ list) comes from
//│   │  - l.1  let rec digitsOfInt n =
//│   │                             ^^^
//│   │           ((digitsOfInt n) / 10) @ [remainder];;
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec digitsOfInt n =
//│   │                 ^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt) is assumed for
//│   │  - l.1  let rec digitsOfInt n =
//│   │                 ^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│                 ^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│ │            ^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( / ): int -> int -> int
//│                      ^^^
//│ ╔══[ERROR] identifier not found: remainder
//│ ║  
//│ ║  l.4048:	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                            ^^^^^^^^^
//│ digitsOfInt: 'digitsOfInt
//│   where
//│     'digitsOfInt = 'a -> list[error], 'a -> 'b
//│     'b = list[error], int
//│ U max: 3, total: 23
//│ UERR 2 errors
//│ L: 0 [int ~ list[α184'], int <: list[α184']]
//│ L: 1 [list[α184'] ~ int, [list[α184'] - (α183' -> [list[α184']]) ~ ([α183'] -> α186') - α186', L: 0 [(α183' -> [list[α184']]) ~ ([α183'] -> α186'), (α183' -> [list[α184']]) <: digitsOfInt182', digitsOfInt182' <: ([α183'] -> α186')]], α186' <: int]
