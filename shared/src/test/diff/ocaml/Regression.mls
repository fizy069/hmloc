:AllowTypeErrors



let test =
  let f x = x in
  (f 1 + f true)
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.3    (f 1 + f true)
//│ │                    ^^^^
//│ │  - l.2    let f x = x in
//│ │                 ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.2    let f x = x in
//│ │                 ^
//│ │  - l.2    let f x = x in
//│ │                     ^
//│ │  - l.3    (f 1 + f true)
//│ │                  ^^^^^^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                           ^^^
//│ test: int
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α71', α71' <: int]


// TODO: show error
let test2 = let (a, b) = test in [[b]] + 1
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ │  - lib. let (+): int -> int -> int
//│ │                                ^^^
//│ │  - l.-28  (f 1 + f true)
//│ │           ^^^^^^^^^^^^^^^
//│ │  - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│ │                                  ^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│                           ^^^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (int)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.1  let test2 = let (a, b) = test in [[b]] + 1
//│ │                                           ^^^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│ test2: int
//│ U max: 2, total: 12
//│ UERR 2 errors
//│ L: 0 [list['a77'] ~ int, list['a77'] <: int]
//│ L: 0 [int ~ ([α75'], [α76'],), int <: ([α75'], [α76'],)]

// TODO: show error
let f x = x + 1
not (f 1)
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (bool)
//│ 
//│ ◉ (int) is here
//│ │  - lib. let (+): int -> int -> int
//│ │                                ^^^
//│ │  - l.1  let f x = x + 1
//│ │                   ^^^^^
//│ │  - l.2  not (f 1)
//│ │             ^^^^^
//│ ▼ 
//│ ◉ (bool) is here
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ f: int -> int
//│ res: bool
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: bool]

// TODO: show error
:d
let a = 1
not a
//│ 1. Typing term 1 IntLit
//│ 1. : int
//│ ⬤ U Typed as: int
//│  where: 
//│ 0. Typing term not a App
//│ | 0. Typing term not Var
//│ | 0. : [(bool -> bool)]
//│ | 0. Typing term a Var
//│ | 0. : [int]
//│ | U Q [int] ~ bool
//│ | U L: 0 [int ~ bool, int <: bool]
//│ | UERR L: 0 [int ~ bool, int <: bool]
//│ 0. : [bool]
//│ ⬤ U Typed as: [bool]
//│  where: 
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (bool)
//│ 
//│ ◉ (int) is here
//│ │  - l.1  let a = 1
//│ │                 ^
//│ │  - l.2  not a
//│ │             ^
//│ ▼ 
//│ ◉ (bool) is here
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ a: int
//│ res: bool
//│ U max: 1, total: 1
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: bool]


let confluence z = if true then z else 5
confluence true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.2  confluence true
//│ │                    ^^^^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: int -> int
//│ res: 'a
//│   where
//│     'a = bool, int
//│ U max: 2, total: 7
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α95, α95 <: α96, α96 :> int]


let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit

// TODO: this won't show error because there are no type variables
f x
//│ [ERROR] Type `int` does not match `string`
//│ 
//│         (int) ~~~~ (string)
//│ 
//│   ◉ (int list) is here
//│   │  - l.-7 let x: int list
//│   │                ^^^^^^^^
//│   │  - l.1  f x
//│   │           ^
//│   ▼ 
//│   ◉ (string list) is here
//│      - l.-5 let f: string list -> unit
//│                    ^^^^^^^^^^^
//│ U max: 1, total: 2
//│ UERR 1 errors
//│ L: 1 [int ~ string, [int - list[int] ~ list[string] - string, L: 0 [list[int] ~ list[string], list[int] <: list[string]]]]

// Should show
// ╔══[ERROR] Type `string list` does not match `int list`
// ║  
// ╟──        string list ---> ?a <--- int list 
// ║  
// ╟── `string list` comes from this type expression
// ║  l.-10: 	let y: string list
// ║         	       ^^^^^^^^^^^
// ╟── this `else` branch has type `string list` and it flows into `?a`
// ║  l.1: 	if true then x else y
// ║       	                    ^
// ╟── this if-then-else expression has type `?a`
// ║  l.1: 	if true then x else y
// ║       	^^^^^^^^^^^^^^^^^^^^^
// ╟── this `then` branch has type `?a` and it flows from `int list`
// ║  l.1: 	if true then x else y
// ║       	             ^
// ╟── this applied type reference has type `int list`
// ║  l.-11: 	let x: int list
// ╙──       	       ^^^^^^^^
// res: list[int | string]
if true then x else y
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ~~~~ (int)
//│ 
//│   ◉ (string list) is here
//│   │  - l.-45let y: string list
//│   │                ^^^^^^^^^^^
//│   │  - l.1  if true then x else y
//│   │                             ^
//│   │  - l.1  if true then x else y
//│   │         ^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a) is assumed here
//│   ▲  - l.1  if true then x else y
//│   │         ^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  if true then x else y
//│   │                      ^
//│   │ 
//│   ◉ (int list) is here
//│      - l.-46let x: int list
//│                    ^^^^^^^^
//│ res: 'a
//│   where
//│     'a = list[string], list[int]
//│ U max: 1, total: 5
//│ UERR 1 errors
//│ L: 1 [string ~ int, [string - list[string] ~ list[int] - int, L: 0 [list[string] ~ list[int], list[string] <: α100, α100 :> list[int]]]]

// TODO: show error
Left 1 : int
//│ [ERROR] Type `(_, _) either` does not match `int`
//│ 
//│         ((_, _) either) ---> (int)
//│ 
//│ ◉ ((_, _) either) is here
//│ │  - lib. type ('a, 'b) either = Left of 'a | Right of 'b
//│ │                                ^^^^^^^^^^
//│ │  - l.1  Left 1 : int
//│ │         ^^^^^^
//│ ▼ 
//│ ◉ (int) is here
//│    - l.1  Left 1 : int
//│                    ^^^
//│ res: int
//│ U max: 1, total: 2
//│ UERR 1 errors
//│ L: 0 [either[α101,α102] ~ int, either[α101,α102] <: int]


let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
mkpair 1 "2"
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ---> (?a) ---> (?b) ---> (?c) <--- (int)
//│ 
//│ ◉ (string) is here
//│ │  - l.3  mkpair 1 "2"
//│ │                  ^^^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: int -> int
//│ mkpair: 'a -> 'b -> ('a, int,)
//│ res: (int, 'a,)
//│   where
//│     'a = string, int
//│ U max: 2, total: 10
//│ UERR 1 errors
//│ L: 0 [string ~ int, string <: α115, α115 <: α116, α116 <: α117, α117 :> int]

// TODO nested prov not shown in collision error
let a = 1
let b = a
let f x = if x then true else false
let g = f
g b
//│ [ERROR] Type `int` does not match `string list`
//│ 
//│         (int) ---> (string list)
//│ 
//│ ◉ (int) is here
//│ │  - l.1  let a = 1
//│ │                 ^
//│ │  - l.2  let b = a
//│ │                 ^
//│ │  - l.5  g b
//│ │           ^
//│ ▼ 
//│ ◉ (string list) is here
//│    - l.-140let f: string list -> unit
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `bool` does not match `unit`
//│ 
//│         (bool) ---> (?a) ~~~~ (unit)
//│ 
//│ ◉ (bool) is here
//│ │  - l.3  let f x = if x then true else false
//│ │                             ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.3  let f x = if x then true else false
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) is here
//│   │  - l.3  let f x = if x then true else false
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (string list -> unit) is here
//│      - l.-140let f: string list -> unit
//│                     ^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `bool` does not match `string list`
//│ 
//│         (bool) <--- (?a) ~~~~ (string list)
//│ 
//│ ◉ (bool) is here
//│ ▲  - l.3  let f x = if x then true else false
//│ │                      ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.3  let f x = if x then true else false
//│                 ^
//│   ◉ (?a -> _) is here
//│   │  - l.3  let f x = if x then true else false
//│   │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (string list -> unit) is here
//│      - l.-140let f: string list -> unit
//│                     ^^^^^^^^^^^^^^^^^^^
//│ a: int
//│ b: int
//│ bool -> bool
//│   <:  f:
//│ list[string] -> unit
//│ g: list[string] -> unit
//│ U max: 3, total: 8
//│ UERR 3 errors
//│ L: 1 [bool ~ list[string], bool :> α123, [α123 - (α123 -> α124) ~ (list[string] -> unit) - list[string], L: 0 [(α123 -> α124) ~ (list[string] -> unit), (α123 -> α124) <: (list[string] -> unit)]]]
//│ L: 1 [bool ~ unit, bool <: α124, [α124 - (α123 -> α124) ~ (list[string] -> unit) - unit, L: 0 [(α123 -> α124) ~ (list[string] -> unit), (α123 -> α124) <: (list[string] -> unit)]]]
//│ L: 0 [int ~ list[string], int <: list[string]]

let wrap x = x :: []
  
// TODO: show error
if true then wrap 1 else wrap true
//│ wrap: 'a -> list['a]


if true then wrap (if true then 1 else false) else wrap true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                                ^^^^^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                           ^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (bool)
//│ 
//│ ◉ (int) is here
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                         ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.-6 let wrap x = x :: []
//│                    ^
//│   ◉ (?c * _ list) is here
//│   │  - l.-6 let wrap x = x :: []
//│   │                      ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-6 let wrap x = x :: []
//│                          ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-6 let wrap x = x :: []
//│   │                      ^
//│   │ 
//│   ◉ (?c * _ list) is here
//│      - l.-6 let wrap x = x :: []
//│                          ^
//│ ◉ (?c) is assumed here
//│ ▲  - l.-6 let wrap x = x :: []
//│ │                  ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                                  ^^^^^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (bool)
//│ 
//│ ◉ (int) is here
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                                         ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.-6 let wrap x = x :: []
//│                    ^
//│   ◉ (?c * ?a list) is here
//│   │  - l.-6 let wrap x = x :: []
//│   │                      ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-6 let wrap x = x :: []
//│                          ^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-6 let wrap x = x :: []
//│     │                      ^
//│     │ 
//│     ◉ (?c * ?a list) is here
//│        - l.-6 let wrap x = x :: []
//│                            ^
//│     ◉ (?c * ?a list) is here
//│     │  - l.-6 let wrap x = x :: []
//│     │                      ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-6 let wrap x = x :: []
//│                            ^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-6 let wrap x = x :: []
//│   │                      ^
//│   │ 
//│   ◉ (?c * ?a list) is here
//│      - l.-6 let wrap x = x :: []
//│                          ^
//│ ◉ (?c) is assumed here
//│ ▲  - l.-6 let wrap x = x :: []
//│ │                  ^
//│ │  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  if true then wrap (if true then 1 else false) else wrap true
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  if true then wrap (if true then 1 else false) else wrap true
//│                                                  ^^^^^
//│ res: list[bool]
//│ U max: 8, total: 42
//│ UERR 3 errors
//│ L: 2 [int ~ bool, int <: α135, α135 <: α132, [α132 - ([[α132]], [[list['a134]]],) ~ ('a133, list['a133],) - 'a133, L: 0 [([[α132]], [[list['a134]]],) ~ ('a133, list['a133],), ([[α132]], [[list['a134]]],) <: ('a133, list['a133],)]], ['a133 - list['a133] ~ list['a134] - 'a134, L: 1 [list['a133] ~ list['a134], [list['a133] - ('a133, list['a133],) ~ ([[α132]], [[list['a134]]],) - list['a134], L: 0 [('a133, list['a133],) ~ ([[α132]], [[list['a134]]],), ('a133, list['a133],) :> ([[α132]], [[list['a134]]],)]]]], ['a134 - list['a134] ~ list['a133] - 'a133, L: 1 [list['a134] ~ list['a133], [list['a134] - ([[α132]], [[list['a134]]],) ~ ('a133, list['a133],) - list['a133], L: 0 [([[α132]], [[list['a134]]],) ~ ('a133, list['a133],), ([[α132]], [[list['a134]]],) <: ('a133, list['a133],)]]]], ['a133 - ('a133, list['a133],) ~ ([[α132]], [[list['a134]]],) - α132, L: 0 [('a133, list['a133],) ~ ([[α132]], [[list['a134]]],), ('a133, list['a133],) :> ([[α132]], [[list['a134]]],)]], α132 :> α135, α135 :> bool]
//│ L: 0 [bool ~ int, bool <: α135, α135 :> int]
//│ L: 1 [int ~ bool, int <: α135, α135 <: α132, [α132 - ([[α132]], [[list['a134]]],) ~ ('a133, list['a133],) - 'a133, L: 0 [([[α132]], [[list['a134]]],) ~ ('a133, list['a133],), ([[α132]], [[list['a134]]],) <: ('a133, list['a133],)]], ['a133 - ('a133, list['a133],) ~ ([[α132]], [[list['a134]]],) - α132, L: 0 [('a133, list['a133],) ~ ([[α132]], [[list['a134]]],), ('a133, list['a133],) :> ([[α132]], [[list['a134]]],)]], α132 :> α135, α135 :> bool]


let rec t = wrap (if true then 1 else t)
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?t) ---> (?a) ---> (?b) <--- (?a) <--- (int)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.-134let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ ▼ 
//│ ◉ (?t) is assumed here
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                                               ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-134let wrap x = x :: []
//│ │                   ^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.-134let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let rec t = wrap (if true then 1 else t)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?t) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-134let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ ▼ 
//│ ◉ (?t) is assumed here
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                                               ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.-134let wrap x = x :: []
//│                     ^
//│   ◉ (?c * _ list) is here
//│   │  - l.-134let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-134let wrap x = x :: []
//│                           ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-134let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?c * _ list) is here
//│      - l.-134let wrap x = x :: []
//│                           ^
//│ ◉ (?c) is assumed here
//│ ▲  - l.-134let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let rec t = wrap (if true then 1 else t)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?t) ---> (?b) ---> (?c) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-134let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ ▼ 
//│ ◉ (?t) is assumed here
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                 ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                                               ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.-134let wrap x = x :: []
//│                     ^
//│   ◉ (?c * ?a0 list) is here
//│   │  - l.-134let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-134let wrap x = x :: []
//│                           ^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-134let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?c * ?a0 list) is here
//│        - l.-134let wrap x = x :: []
//│                             ^
//│     ◉ (?c * ?a0 list) is here
//│     │  - l.-134let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-134let wrap x = x :: []
//│                             ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-134let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?c * ?a0 list) is here
//│      - l.-134let wrap x = x :: []
//│                           ^
//│ ◉ (?c) is assumed here
//│ ▲  - l.-134let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let rec t = wrap (if true then 1 else t)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let rec t = wrap (if true then 1 else t)
//│                                          ^
//│ t: 't
//│   where
//│     't = list['a], int
//│     'a = list['a], int
//│ U max: 5, total: 37
//│ UERR 3 errors
//│ L: 2 [list['a144'] ~ int, list['a144'] <: t142', t142' <: α146', α146' <: α143', [α143' - ([[α143']], [[list['a145']]],) ~ ('a144', list['a144'],) - 'a144', L: 0 [([[α143']], [[list['a145']]],) ~ ('a144', list['a144'],), ([[α143']], [[list['a145']]],) <: ('a144', list['a144'],)]], ['a144' - list['a144'] ~ list['a145'] - 'a145', L: 1 [list['a144'] ~ list['a145'], [list['a144'] - ('a144', list['a144'],) ~ ([[α143']], [[list['a145']]],) - list['a145'], L: 0 [('a144', list['a144'],) ~ ([[α143']], [[list['a145']]],), ('a144', list['a144'],) :> ([[α143']], [[list['a145']]],)]]]], ['a145' - list['a145'] ~ list['a144'] - 'a144', L: 1 [list['a145'] ~ list['a144'], [list['a145'] - ([[α143']], [[list['a145']]],) ~ ('a144', list['a144'],) - list['a144'], L: 0 [([[α143']], [[list['a145']]],) ~ ('a144', list['a144'],), ([[α143']], [[list['a145']]],) <: ('a144', list['a144'],)]]]], ['a144' - ('a144', list['a144'],) ~ ([[α143']], [[list['a145']]],) - α143', L: 0 [('a144', list['a144'],) ~ ([[α143']], [[list['a145']]],), ('a144', list['a144'],) :> ([[α143']], [[list['a145']]],)]], α143' :> α146', α146' :> int]
//│ L: 1 [list['a144'] ~ int, list['a144'] <: t142', t142' <: α146', α146' <: α143', [α143' - ([[α143']], [[list['a145']]],) ~ ('a144', list['a144'],) - 'a144', L: 0 [([[α143']], [[list['a145']]],) ~ ('a144', list['a144'],), ([[α143']], [[list['a145']]],) <: ('a144', list['a144'],)]], ['a144' - ('a144', list['a144'],) ~ ([[α143']], [[list['a145']]],) - α143', L: 0 [('a144', list['a144'],) ~ ([[α143']], [[list['a145']]],), ('a144', list['a144'],) :> ([[α143']], [[list['a145']]],)]], α143' :> α146', α146' :> int]
//│ L: 0 [list['a144'] ~ int, list['a144'] <: t142', t142' <: α146', α146' <: α143', α143' :> α146', α146' :> int]


let test z = if true then wrap z else wrap true
 
let rec m = test (if true then 1 else m)
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (?m) ---> (?b) ---> (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (?m) ---> (?b) ---> (?c) <--- (?b) <--- (int)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?e * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?e) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?e * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?e) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ---> (?d) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?e) <--- (bool)
//│ 
//│ ◉ (int) is here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?d * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?b) ---> (?c) ---> (?d) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?e) <--- (bool)
//│ 
//│ ◉ (int) is here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                        ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?d * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?f) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?f * ?a1 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?e * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?e) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?f * ?a1 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?e * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?e) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (_ * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (_ * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed here
//│      - l.-307let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?a0 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed here
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│       ◉ (?a * ?a list) is here
//│       ▲  - l.-307let wrap x = x :: []
//│       │                       ^
//│       │ 
//│       ◉ (_ * ?a1 list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│       ◉ (_ * ?a1 list) is here
//│       │  - l.-307let wrap x = x :: []
//│       │                       ^
//│       ▼ 
//│       ◉ (?a * ?a list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│     ◉ (?a list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?e * _ list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?e) is assumed here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?e * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?e) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?c) <--- (?d) <--- (?e) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                                    ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?b * ?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a1 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?b * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?b * ?a list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a1 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?e) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?f) is assumed here
//│      - l.-307let wrap x = x :: []
//│                       ^
//│     ◉ (?f * _ list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a1 * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?c) is assumed here
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed here
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?c) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│       ◉ (?a0 * ?a0 list) is here
//│       ▲  - l.-307let wrap x = x :: []
//│       │                       ^
//│       │ 
//│       ◉ (?b * ?a list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│       ◉ (?b * ?a list) is here
//│       │  - l.-307let wrap x = x :: []
//│       │                       ^
//│       ▼ 
//│       ◉ (?a0 * ?a0 list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│     ◉ (?a0 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?c) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│     ◉ (?a1 * ?a1 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * _ list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?f) is assumed here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?e) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a1 * ?a1 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?e) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (?a) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                               ^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed here
//│      - l.-307let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?a0 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed here
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│       ◉ (?a * ?a list) is here
//│       ▲  - l.-307let wrap x = x :: []
//│       │                       ^
//│       │ 
//│       ◉ (?f * ?a1 list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│       ◉ (?f * ?a1 list) is here
//│       │  - l.-307let wrap x = x :: []
//│       │                       ^
//│       ▼ 
//│       ◉ (?a * ?a list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│     ◉ (?a list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?e * _ list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?e) is assumed here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?e) <--- (?d) <--- (?c) <--- (int)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?f * ?a1 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed here
//│      - l.-307let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?a list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed here
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│       ◉ (?a0 * ?a0 list) is here
//│       ▲  - l.-307let wrap x = x :: []
//│       │                       ^
//│       │ 
//│       ◉ (?f * ?a1 list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│       ◉ (?f * ?a1 list) is here
//│       │  - l.-307let wrap x = x :: []
//│       │                       ^
//│       ▼ 
//│       ◉ (?a0 * ?a0 list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│     ◉ (?a0 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?e * _ list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?e) is assumed here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a * ?a list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?e * _ list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?e) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3  let rec m = test (if true then 1 else m)
//│                                          ^
//│ [ERROR] Type `_ list` does not match `bool`
//│ 
//│         (?a list) ---> (?b) ---> (?m) ---> (?c) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a1) ~~~~ (?a0) ~~~~ (?f) <--- (bool)
//│ 
//│ ◉ (?a list) is here
//│ │  - l.-307let wrap x = x :: []
//│ │                       ^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                   ^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ ▼ 
//│ ◉ (?m) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                 ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                                               ^
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.3  let rec m = test (if true then 1 else m)
//│ │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                  ^
//│ │  - l.1  let test z = if true then wrap z else wrap true
//│ │                                        ^
//│ ▼ 
//│ ◉ (?e) is assumed here
//│    - l.-307let wrap x = x :: []
//│                     ^
//│   ◉ (?e * _ list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│   ◉ (?f * ?a1 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   ▼ 
//│   ◉ (?e) is assumed here
//│      - l.-307let wrap x = x :: []
//│                       ^
//│     ◉ (?e * _ list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a * ?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?a list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     ▼ 
//│     ◉ (?m) is assumed here
//│     ▲  - l.3  let rec m = test (if true then 1 else m)
//│     │                 ^
//│     │  - l.3  let rec m = test (if true then 1 else m)
//│     │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │ 
//│     ◉ (?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│       ◉ (?a0 * ?a0 list) is here
//│       ▲  - l.-307let wrap x = x :: []
//│       │                       ^
//│       │ 
//│       ◉ (?f * ?a1 list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│       ◉ (?f * ?a1 list) is here
//│       │  - l.-307let wrap x = x :: []
//│       │                       ^
//│       ▼ 
//│       ◉ (?a0 * ?a0 list) is here
//│          - l.-307let wrap x = x :: []
//│                               ^
//│     ◉ (?a0 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                               ^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (?b) is assumed here
//│     ▲  - l.1  let test z = if true then wrap z else wrap true
//│     │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let test z = if true then wrap z else wrap true
//│     │                                   ^^^^^^
//│     │ 
//│     ◉ (?a list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^^^^^^^
//│     ◉ (?a * ?a list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?e * _ list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?e) is assumed here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                   ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                        ^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                  ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                          ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                                               ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a0 list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   ▼ 
//│   ◉ (?m) is assumed here
//│   ▲  - l.3  let rec m = test (if true then 1 else m)
//│   │                 ^
//│   │  - l.3  let rec m = test (if true then 1 else m)
//│   │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │ 
//│   ◉ (?a list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - l.-307let wrap x = x :: []
//│   │                       ^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                   ^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed here
//│   ▲  - l.1  let test z = if true then wrap z else wrap true
//│   │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let test z = if true then wrap z else wrap true
//│   │                                               ^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^^^^^^^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.-307let wrap x = x :: []
//│     │                       ^
//│     │ 
//│     ◉ (?f * ?a1 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│     ◉ (?f * ?a1 list) is here
//│     │  - l.-307let wrap x = x :: []
//│     │                       ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.-307let wrap x = x :: []
//│                             ^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.-307let wrap x = x :: []
//│   │                       ^
//│   │ 
//│   ◉ (?f * ?a1 list) is here
//│      - l.-307let wrap x = x :: []
//│                           ^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-307let wrap x = x :: []
//│ │                   ^
//│ │ 
//│ ◉ (bool) is here
//│    - l.1  let test z = if true then wrap z else wrap true
//│                                                      ^^^^
//│ test: bool -> list[bool]
//│ m: 'm
//│   where
//│     'm = int, bool, list['m], list['a]
//│     'a = int, bool, list['a]
//│ U max: 56, total: 218
//│ UERR 17 errors
//│ L: 1 [int ~ bool, int <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]
//│ L: 0 [list['a165'] ~ int, list['a165'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' :> α171', α171' :> int]
//│ L: 0 [list['a167'] ~ int, list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' :> α171', α171' :> int]
//│ L: 2 [list['a165'] ~ bool, list['a165'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]
//│ L: 3 [list['a167'] ~ int, list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], [α164' - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - 'a165', L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 2 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> int]
//│ L: 1 [list['a165'] ~ bool, list['a165'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]
//│ L: 3 [list['a165'] ~ int, list['a165'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 2 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> int]
//│ L: 1 [list['a167'] ~ int, list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> int]
//│ L: 2 [list['a165'] ~ int, list['a165'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], [α164' - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - 'a165', L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> int]
//│ L: 2 [int ~ bool, int <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]
//│ L: 3 [bool ~ int, bool <: α164', [α164' - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - 'a165', L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 2 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> int]
//│ L: 3 [list['a167'] ~ bool, list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], [α164' - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - 'a165', L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 2 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]
//│ L: 1 [list['a167'] ~ bool, list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]
//│ L: 3 [list['a165'] ~ bool, list['a165'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 2 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> m162', m162' :> α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' <: m162', m162' :> α168', α168' :> list['a167']]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]
//│ L: 1 [list['a165'] ~ int, list['a165'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> int]
//│ L: 2 [list['a167'] ~ int, list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], [α164' - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - 'a165', L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - list['a165'] ~ list['a167'] - 'a167', L: 0 [list['a165'] ~ list['a167'], list['a165'] <: α168', α168' :> list['a167']]], ['a167' - ('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],) - α170', L: 0 [('a167', list['a167'],) ~ ([[α170']], [[list['a169']]],), ('a167', list['a167'],) :> ([[α170']], [[list['a169']]],)]], α170' :> α163', α163' :> α171', α171' :> int]
//│ L: 2 [list['a167'] ~ bool, list['a167'] <: α168', α168' <: m162', m162' <: α171', α171' <: α163', α163' <: α170', [α170' - ([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],) - 'a167', L: 0 [([[α170']], [[list['a169']]],) ~ ('a167', list['a167'],), ([[α170']], [[list['a169']]],) <: ('a167', list['a167'],)]], ['a167' - list['a167'] ~ list['a165'] - 'a165', L: 0 [list['a167'] ~ list['a165'], list['a167'] <: α168', α168' :> list['a165']]], ['a165' - list['a165'] ~ list['a166'] - 'a166', L: 1 [list['a165'] ~ list['a166'], [list['a165'] - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - list['a166'], L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]]]], ['a166' - list['a166'] ~ list['a165'] - 'a165', L: 1 [list['a166'] ~ list['a165'], [list['a166'] - ([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],) - list['a165'], L: 0 [([[α164']], [[list['a166']]],) ~ ('a165', list['a165'],), ([[α164']], [[list['a166']]],) <: ('a165', list['a165'],)]]]], ['a165' - ('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],) - α164', L: 0 [('a165', list['a165'],) ~ ([[α164']], [[list['a166']]],), ('a165', list['a165'],) :> ([[α164']], [[list['a166']]],)]], α164' :> bool]


// FIXME implementation exception
let rec digitsOfInt n =
  ((digitsOfInt n) / 10) @ [remainder];;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (_ list)
//│ 
//│ ◉ (int) is here
//│ │  - lib. let ( / ): int -> int -> int
//│ │                                  ^^^
//│ │  - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                    ^^^^^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ~~~~ (?a) ---> (int)
//│ 
//│   ◉ (_ -> _ list) is here
//│   │  - l.1  let rec digitsOfInt n =
//│   │                             ^^^
//│   │           ((digitsOfInt n) / 10) @ [remainder];;
//│   │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec digitsOfInt n =
//│   │                 ^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt) is assumed here
//│   │  - l.1  let rec digitsOfInt n =
//│   │                 ^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) is here
//│      - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│                 ^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.2    ((digitsOfInt n) / 10) @ [remainder];;
//│ │            ^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let ( / ): int -> int -> int
//│                      ^^^
//│ ╔══[ERROR] identifier not found: remainder
//│ ║  
//│ ║  l.3550:	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                            ^^^^^^^^^
//│ digitsOfInt: 'digitsOfInt
//│   where
//│     'digitsOfInt = 'a -> list[error], 'a -> 'b
//│     'b = list[error], int
//│ U max: 3, total: 23
//│ UERR 2 errors
//│ L: 0 [int ~ list[α177'], int <: list[α177']]
//│ L: 1 [list[α177'] ~ int, [list[α177'] - (α176' -> [list[α177']]) ~ ([α176'] -> α179') - α179', L: 0 [(α176' -> [list[α177']]) ~ ([α176'] -> α179'), (α176' -> [list[α177']]) <: digitsOfInt175', digitsOfInt175' <: ([α176'] -> α179')]], α179' <: int]
