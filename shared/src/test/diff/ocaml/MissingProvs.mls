





let test =
  let f x = x in
  (f 1 + f true)
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── this reference has type `bool` and it flows into `?a`
//│ ║  l.3: 	  (f 1 + f true)
//│ ║       	           ^^^^
//│ ╟── this variable has type `?a`
//│ ║  l.2: 	  let f x = x in
//│ ║       	        ^
//│ ╟── this integer literal has type `int` and it flows into `?a`
//│ ║  l.3: 	  (f 1 + f true)
//│ ╙──     	     ^
//│ test: int



:e
let test2 = let (a, b) = test in [[b]] + 1
//│ test2: int

let test =
  let f x = x in
  (f 1, f true)
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── this reference has type `bool` and it flows into `?a`
//│ ║  l.3: 	  (f 1, f true)
//│ ║       	          ^^^^
//│ ╟── this variable has type `?a`
//│ ║  l.2: 	  let f x = x in
//│ ║       	        ^
//│ ╟── this integer literal has type `int` and it flows into `?a`
//│ ║  l.3: 	  (f 1, f true)
//│ ╙──     	     ^
//│ test: (bool | int, bool | int,)



let test2 = let (a, b) = test in b + 1
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── this reference has type `bool` and it flows into `?a`
//│ ║  l.-17: 	  (f 1, f true)
//│ ║         	          ^^^^
//│ ╟── this variable has type `?a`
//│ ║  l.-18: 	  let f x = x in
//│ ║         	        ^
//│ ╟── this integer literal has type `int` and it flows into `?a`
//│ ║  l.-17: 	  (f 1, f true)
//│ ╙──       	     ^
//│ test2: int





[["1"]] + 1
//│ res: int
