





let test =
  let f x = x in
  (f 1 + f true)
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.9: 	  (f 1 + f true)
//│ ║       	     ^
//│ ╟── this variable has type `int`
//│ ║  l.8: 	  let f x = x in
//│ ║       	        ^
//│ ╟── this variable has type `bool`
//│ ║  l.8: 	  let f x = x in
//│ ║       	        ^
//│ ╟── this reference has type `bool`
//│ ║  l.9: 	  (f 1 + f true)
//│ ╙──     	           ^^^^
//│ test: int


// FIXME: list[?a] <: int not being detected by unification
// :e
let test2 = let (a, b) = test in [[b]] + 1
//│ test2: int

let test =
  let f x = x in
  (f 1, f true)
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.34: 	  (f 1, f true)
//│ ║        	     ^
//│ ╟── this variable has type `int`
//│ ║  l.33: 	  let f x = x in
//│ ║        	        ^
//│ ╟── this variable has type `bool`
//│ ║  l.33: 	  let f x = x in
//│ ║        	        ^
//│ ╟── this reference has type `bool`
//│ ║  l.34: 	  (f 1, f true)
//│ ╙──      	          ^^^^
//│ test: (bool | int, bool | int,)



let test2 = let (a, b) = test in b + 1
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.34: 	  (f 1, f true)
//│ ║        	     ^
//│ ╟── this variable has type `int`
//│ ║  l.33: 	  let f x = x in
//│ ║        	        ^
//│ ╟── this variable has type `bool`
//│ ║  l.33: 	  let f x = x in
//│ ║        	        ^
//│ ╟── this reference has type `bool`
//│ ║  l.34: 	  (f 1, f true)
//│ ╙──      	          ^^^^
//│ test2: int





[["1"]] + 1
//│ res: int
