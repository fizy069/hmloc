:OcamlParser
:OcamlLoadLibrary

// 30 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α67' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── bool is used as type reference
//│ ║  l.25: 	let (<): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── true | ?a & ~true is used as operator application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	     ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[[list[α68']]]]]]] cannot be unified but flows into the same location
//│ ╟── int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[?a] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[?b] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	     ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[list[α66']]]]]] cannot be unified but flows into the same location
//│ ╟── int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[?a] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	     ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[[[list[α66']]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[?a] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α70'
//│ ╟── ?b is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	                           ^^^^^^^^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[[[[list[α68']]]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[?a] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[?b] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α70'
//│ ╟── ?c is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	                           ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.6: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Nil` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                                      ^^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.6: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.6: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ digitsOfInt: anything -> list[list[int]]

// 36 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else
      let remainder = n mod 10 in
      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α109' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── bool is used as type reference
//│ ║  l.25: 	let (<): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── true | ?a & ~true is used as operator application
//│ ║  l.131: 	  if n < 0 then [] else
//│ ╙──       	     ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[([([(Int -> (Int -> Int))],)] -> α111')]] and [[[Int]]] cannot be unified but flows into the same location
//│ ╟── (int -> int -> int) -> ?a is used as reference
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	                      ^
//│ ╟── int is used as argument
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	             ^
//│ ╟── The following tvars cannot be resolved [[[[α114']]]], α104'
//│ ╟── ?b is used as reference
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	         ^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] bool<> and [(true<bool> | (α121' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── true | ?a & ~true is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	         ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[list[α117']]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[?a] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[[[list[α122']]]]]]]] cannot be unified but flows into the same location
//│ ╟── int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[?a] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.36: 	let (@): 'a list -> 'a list -> 'a list
//│ ╙──      	                               ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[list[α108']]]]]] cannot be unified but flows into the same location
//│ ╟── int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[?a] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	     ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 3] [[[[[[[list[α122']]]]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[?a] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.36: 	let (@): 'a list -> 'a list -> 'a list
//│ ║        	                               ^^
//│ ╟── int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α132', α120', α123'
//│ ╟── ?b is used as `case` expression
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?c is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── ?d is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                                       ^^^^^^^^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 3] [[[[[Int]]]]] and [[[list[α117']]]] cannot be unified but flows into the same location
//│ ╟── int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[?a] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── The following tvars cannot be resolved α132', α120', α123'
//│ ╟── ?b is used as `case` expression
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?c is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── ?d is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                                       ^^^^^^^^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 4] [[[[[list[α108']]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[?a] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α131', α132', α120', α123'
//│ ╟── ?b is used as operator application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?c is used as `case` expression
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?d is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── ?e is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                                       ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Cons[?a] | Nil`
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `Cons[?a] | Nil`
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.36: 	let (@): 'a list -> 'a list -> 'a list
//│ ║        	         ^^
//│ ╟── from union type:
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	                       ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Nil` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                                      ^^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	     ^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	     ^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into operator application with expected type `int`
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ digitsOfInt: ((int -> int -> int) -> int -> 'a) -> list['a]

// 38 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[([([(Int -> (Int -> Int))],)] -> α198')]] and [[[[[[[Int]]]]]]] cannot be unified but flows into the same location
//│ ╟── (int -> int -> int) -> ?a is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                                      ^
//│ ╟── int is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╙── The following tvars cannot be resolved α180'
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[[[[[Int]]]]]]] and [[([([(Int -> (Int -> Int))],)] -> α191')]] cannot be unified but flows into the same location
//│ ╟── int is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── (int -> int -> int) -> ?a is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                             ^
//│ ╙── The following tvars cannot be resolved α180'
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[[[[[Int]]]]]]] and [[([([(Int -> (Int -> Int))],)] -> α198')]] cannot be unified but flows into the same location
//│ ╟── int is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^
//│ ╟── int is used as type reference
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── (int -> int -> int) -> ?a is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                                      ^
//│ ╟── The following tvars cannot be resolved α180', [[[[[α181']]]]]
//│ ╟── ?b is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	     ^
//│ ╟── ?c is used as tuple type
//│ ║  l.25: 	let (<): 'a -> 'a -> bool
//│ ╙──      	         ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α185' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── bool is used as type reference
//│ ║  l.25: 	let (<): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── true | ?a & ~true is used as operator application
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	     ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] bool<> and [(true<bool> | (α193' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── true | ?a & ~true is used as application
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                            ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.378: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                                                                                      ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.378: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.18: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                                             ^
//│ digitsOfInt: nothing -> 'a
//│   where
//│     'a :> list[nothing] | list['a]

// 309 mod
:unify
let pipe fs = let f a x = (fun n  -> a) x in let base n = n in List_fold_left f base fs;;
//│ pipe: list[?] -> 'a -> 'a

// 499
:unify
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let len1 = List_length l1 in
  let len2 = List_length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α268' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── bool is used as type reference
//│ ║  l.26: 	let (<=): 'a -> 'a -> bool
//│ ║        	                      ^^^^
//│ ╟── true | ?a & ~true is used as operator application
//│ ║  l.469: 	let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
//│ ╙──       	                       ^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α319' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── bool is used as type reference
//│ ║  l.27: 	let (>): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── true | ?a & ~true is used as operator application
//│ ║  l.473: 	  if len1 > len2
//│ ╙──       	     ^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)

// 499 record types
:unify
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[{_1: α362'}]]] and [[[{_0: α360'}]]] cannot be unified but flows into the same location
//│ ╟── {_1: ?a} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_0: ?b} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved α358'
//│ ╟── ?c is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α369' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── bool is used as type reference
//│ ║  l.30: 	let (==): 'a -> 'a -> bool
//│ ║        	                      ^^^^
//│ ╟── true | ?a & ~true is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	                            ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_0: α360'}]]] and [[[[[list[α357']]]]]] cannot be unified but flows into the same location
//│ ╟── {_0: ?a} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── list[?b] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[?b] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── The following tvars cannot be resolved [[[[[[α368']]]]]], α358'
//│ ╟── ?c is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── ?d is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── ?e is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_1: α362'}]]] and [[[[[list[α357']]]]]] cannot be unified but flows into the same location
//│ ╟── {_1: ?a} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── list[?b] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[?b] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── The following tvars cannot be resolved [[[[[[α368']]]]]], α358'
//│ ╟── ?c is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── ?d is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── ?e is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_0: α360'}]]] and [[[{_0: α360'}]]] cannot be unified but flows into the same location
//│ ╟── {_0: ?a} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_0: ?b} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved [[[[[[α368']]]]]], α358'
//│ ╟── ?c is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── ?d is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── ?e is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_0: α360'}]]] and [[[{_1: α362'}]]] cannot be unified but flows into the same location
//│ ╟── {_0: ?a} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_1: ?b} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved [[[[[[α368']]]]]], α358'
//│ ╟── ?c is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── ?d is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── ?e is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_1: α362'}]]] and [[[{_1: α362'}]]] cannot be unified but flows into the same location
//│ ╟── {_1: ?a} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_1: ?b} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved [[[[[[α368']]]]]], α358'
//│ ╟── ?c is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── ?d is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── ?e is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[[[list[α357']]]]]] and [[[{_0: α360'}]]] cannot be unified but flows into the same location
//│ ╟── list[?a] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── {_0: ?b} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved α368', α358'
//│ ╟── ?c is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── ?d is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[[[list[α357']]]]]] and [[[{_1: α362'}]]] cannot be unified but flows into the same location
//│ ╟── list[?a] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[?a] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── {_1: ?b} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved α368', α358'
//│ ╟── ?c is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── ?d is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ removeZero: 'a -> (list[nothing] | 'b)
//│   where
//│     'a <: Cons[?] & {_0: anything, _1: 'a} & 'b | Nil | 'b & ~#Cons & ~#Nil

// infix mod
:unifyDbg
let rec digitsOfInt n =
  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ [ERROR 0] Bool != (true<bool> | (α526' & ~(true<bool>))) unifying because Bool = [(true<bool> | (α526' & ~(true<bool>)))] because α518' = Bool are result type in ([(Int,)] -> α518') = (α516' -> Bool) and α518' <: [(true<bool> | (α526' & ~(true<bool>)))]
//│ allVarPols: 
//│ norm[+] Bool
//│ | DNF: DNF(bool<>{})
//│ ~> bool<>
//│ allVarPols: +α540'
//│ norm[+] (true<bool> | (α540' & ~(true<bool>)))
//│ | DNF: DNF(true<bool>{} | α540'∧~(true<bool>))
//│ | norm[+] [[[[(bool<> & ~(true<bool>))]]]]
//│ | | DNF: DNF(bool<>{}∧~(true<bool>))
//│ | ~> (bool<> & ~(true<bool>))
//│ | factorize? true<bool> | α540' & ~(true<bool>)
//│ | | Factors α540' -> 1
//│ | yes: (true<bool> | (α540' & ~(true<bool>)))
//│ ~> (true<bool> | (α540' & ~(true<bool>)))
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α526' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── bool is used as type reference
//│ ║  l.27: 	let (>): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── true | ?a & ~true is used as operator application
//│ ║  l.647: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ╙──       	                      ^^^^^
//│ unified digitsOfInt513'
//│  digitsOfInt513' :> [(α514' -> α528')]
//│ unified α514'
//│  α514' <: [[[[[α516']]]]]
//│  α514' <: [[([([(Int -> (Int -> Int))],)] -> α520')]]
//│ unified α515''
//│ unified α516'
//│  Int = α516' are arg type in ([(Int,)] -> α518') = (α516' -> Bool)
//│  α516' :> [[[[Int]]]]
//│  [[([([(Int -> (Int -> Int))],)] -> α520')]] & [[[[[α516']]]]] :> α514'
//│ unified α517'
//│  α517' :> [[[(α516' -> Bool)]]]
//│  α517' <: [([(Int,)] -> α518')]
//│ unified α518'
//│  α518' <: [(true<bool> | (α526' & ~(true<bool>)))]
//│  α518' = Bool are result type in ([(Int,)] -> α518') = (α516' -> Bool)
//│ unified α519'
//│  α519' = α527' are TypeName(list)(0) arg type
//│ unified α520'
//│  α520' <: [([(Int,)] -> α521')]
//│ unified α521'
//│  α521' <: [[α519']]
//│ unified α522'
//│ unified α523'
//│  α523' <: [([([α514'],)] -> α524')]
//│ unified α524'
//│  α524' <: [[[list[α519']]]]
//│ unified α525'
//│  α525' | [[list[α527']]] <: α528'
//│  α525' :> [[[list[α519']]]]
//│ unified α526'
//│  α526' :> [[[[(bool<> & ~(true<bool>))]]]]
//│ unified α527'
//│ unified α528'
//│  α528' :> [[list[α527']]]
//│  α528' :> α525'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.647: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ║         	                                                ^^^^^^^^^^^^^^^^
//│ ╟── type `Nil` is not a function
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                                      ^^^
//│ ╟── but it flows into reference with expected type `?digitsOfInt -> ?a`
//│ ║  l.647: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ╙──       	                                                ^^^^
//│ digitsOfInt: ((int -> int -> int) -> int -> 'a) -> list['a]


// 2879
:unifyDbg
let sqsum xs =
  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ [ERROR 0] Int != Float unifying because Int = Float are arg type in ([(Int,)] -> α545'') = (Float -> Float)
//│ allVarPols: 
//│ norm[+] Int
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ allVarPols: 
//│ norm[+] Float
//│ | DNF: DNF(float<>{})
//│ ~> float<>
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Int and Float cannot be unified but flows into the same location
//│ ╟── int is used as integer literal
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                    ^
//│ ╟── float is used as type reference
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ╙──      	                     ^^^^^
//│ [ERROR 0] Float != Int unifying because Float = [[[[[Int]]]]] because α545'' = Float are result type in ([(Int,)] -> α545'') = (Float -> Float) and α545'' <: [[[[[Int]]]]]
//│ allVarPols: 
//│ norm[+] Float
//│ | DNF: DNF(float<>{})
//│ ~> float<>
//│ allVarPols: 
//│ norm[+] Int
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ allVarPols: 
//│ norm[+] Int
//│ | DNF: DNF(int<>{})
//│ ~> int<>
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Float and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── float is used as type reference
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ║        	                              ^^^^^
//│ ╟── int is used as operator application
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^
//│ ╟── int is used as type reference
//│ ║  l.15: 	let (+): int -> int -> int
//│ ╙──      	         ^^^
//│ unified α541'
//│  list[α551'] = [α541'] are arg type in (list[α551'] -> α550') = ([([α541'],)] -> α557')
//│  α541' <: [[[[[[[list[α551']]]]]]]]
//│ unified α542''
//│  α542'' <: [[[[[[[Float]]]]]]]
//│ unified α543''
//│  α543'' <: [[[[[[[Float]]]]]]]
//│ unified α544''
//│  α544'' :> [[[(Float -> Float)]]]
//│  α544'' <: [([(Int,)] -> α545'')]
//│ unified α545''
//│  α545'' <: [[[[[Int]]]]]
//│  α545'' = Float are result type in ([(Int,)] -> α545'') = (Float -> Float)
//│ unified α546''
//│  α546'' :> [[[(Int -> Int)]]]
//│  α546'' <: [([(α548'',)] -> α549'')]
//│ unified α547''
//│  α547'' :> [[[(Float -> Float)]]]
//│  α547'' <: [([(Int,)] -> α548'')]
//│ unified α548''
//│  α548'' = Float are result type in ([(Int,)] -> α548'') = (Float -> Float)
//│  α548'' = Int are arg type in ([(α548'',)] -> α549'') = (Int -> Int)
//│ unified α549''
//│  α549'' = Int are result type in ([(α548'',)] -> α549'') = (Int -> Int)
//│ unified α550'
//│  [Int] = α550' are arg type in ([([Int],)] -> α556') = (α550' -> (list[α551'] -> α550'))
//│  α550' :> [[[[[Int]]]]]
//│  α550' <: [[α552']]
//│  α550' <: [[α557']]
//│ unified α551'
//│  α551' <: [[α553']]
//│ unified α552'
//│  α552' <: [[[[[[[Float]]]]]]]
//│  [[α552']] = [[[[[Int]]]]] because α550' <: [[α552']] and α550' :> [[[[[Int]]]]]
//│ unified α553'
//│  α553' <: [[[[[[[Float]]]]]]]
//│ unified α554'
//│  α554' :> [[[Int]]]
//│  α554' <: [[α550']]
//│ unified α555'
//│  α555' :> [[[(α550' -> (list[α551'] -> α550'))]]]
//│  α555' <: [([([Int],)] -> α556')]
//│ unified α556'
//│  α556' <: [([([α541'],)] -> α557')]
//│  α556' = (list[α551'] -> α550') are result type in ([([Int],)] -> α556') = (α550' -> (list[α551'] -> α550'))
//│ unified α557'
//│  [[α557']] = [[[[[Int]]]]] because α550' <: [[α557']] and α550' :> [[[[[Int]]]]]
//│  [[α557']] & [[α552']] :> α550'
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `float`
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                    ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ╙──      	                     ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^^^^
//│ ╟── type `float` is not an instance of `int`
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ║        	                              ^^^^^
//│ ╟── but it flows into operator application with expected type `int`
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.15: 	let (+): int -> int -> int
//│ ╙──      	         ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                          ^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `float`
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                               ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ╙──      	                     ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^^^^^^^^^^^^
//│ ╟── type `float` is not an instance of `int`
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ║        	                              ^^^^^
//│ ╟── but it flows into operator application with expected type `int`
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                          ^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.15: 	let (+): int -> int -> int
//│ ╙──      	                ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                     ^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `float`
//│ ║  l.15: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^
//│ ╟── from type reference:
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ╙──      	            ^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                     ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `float`
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                ^
//│ ╟── but it flows into reference with expected type `float`
//│ ║  l.721: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                                      ^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.38: 	let List_fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│ ║        	                                         ^^
//│ ╟── from type reference:
//│ ║  l.46: 	let ( ** ): float -> float -> float
//│ ╙──      	            ^^^^^
//│ sqsum: list[float] -> int

