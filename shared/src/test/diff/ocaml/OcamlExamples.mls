:OcamlParser
:OcamlLoadLibrary

// 30 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α67' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── Bool is used as type reference
//│ ║  l.24: 	let (<): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── (true<bool> | (α67' & ~(true<bool>))) is used as operator application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	     ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[[list[α68']]]]]]] cannot be unified but flows into the same location
//│ ╟── Int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[α68'] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[α68'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	     ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[list[α66']]]]]] cannot be unified but flows into the same location
//│ ╟── Int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[α66'] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[α66'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	     ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[[[list[α66']]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[α66'] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[α66'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── Int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α70'
//│ ╟── α70' is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	                           ^^^^^^^^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[[[[list[α68']]]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[α68'] is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── list[α68'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── Int is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α70'
//│ ╟── α70' is used as application
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	                           ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.6: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Nil` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                                      ^^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.6: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.6: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.7: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                           ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ digitsOfInt: anything -> list[list[int]]

// 36 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else
      let remainder = n mod 10 in
      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α94' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── Bool is used as type reference
//│ ║  l.24: 	let (<): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── (true<bool> | (α94' & ~(true<bool>))) is used as operator application
//│ ║  l.131: 	  if n < 0 then [] else
//│ ╙──       	     ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[([([(Int -> (Int -> Int))],)] -> α96')]] and [[[Int]]] cannot be unified but flows into the same location
//│ ╟── ([([(Int -> (Int -> Int))],)] -> α96') is used as reference
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	                      ^
//│ ╟── Int is used as argument
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	             ^
//│ ╟── The following tvars cannot be resolved [[[[α99']]]], α89'
//│ ╟── α99' is used as reference
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	         ^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] bool<> and [(true<bool> | (α106' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── (true<bool> | (α106' & ~(true<bool>))) is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	         ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[list[α102']]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[α102'] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── list[α102'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── Int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[[[list[α107']]]]]]]] cannot be unified but flows into the same location
//│ ╟── Int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[α107'] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[α107'] is used as applied type reference
//│ ║  l.35: 	let (@): 'a list -> 'a list -> 'a list
//│ ╙──      	                               ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] [[[[[Int]]]]] and [[[[[list[α93']]]]]] cannot be unified but flows into the same location
//│ ╟── Int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[α93'] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[α93'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	     ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 3] [[[[[[[list[α107']]]]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[α107'] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[α107'] is used as applied type reference
//│ ║  l.35: 	let (@): 'a list -> 'a list -> 'a list
//│ ║        	                               ^^
//│ ╟── Int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α117', α105', α108'
//│ ╟── α117' is used as `case` expression
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── α105' is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── α108' is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                                       ^^^^^^^^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 3] [[[[[Int]]]]] and [[[list[α102']]]] cannot be unified but flows into the same location
//│ ╟── Int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── list[α102'] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── list[α102'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── The following tvars cannot be resolved α117', α105', α108'
//│ ╟── α117' is used as `case` expression
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── α105' is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── α108' is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                                       ^^^^^^^^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 4] [[[[[list[α93']]]]]] and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── list[α93'] is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── list[α93'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── Int is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── The following tvars cannot be resolved α116', α117', α105', α108'
//│ ╟── α116' is used as operator application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── α117' is used as `case` expression
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── α105' is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── α108' is used as application
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                                       ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` does not match type `Cons[?a] | Nil`
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `Cons[?a] | Nil`
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.35: 	let (@): 'a list -> 'a list -> 'a list
//│ ║        	         ^^
//│ ╟── from union type:
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	                       ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Nil` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                                      ^^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	     ^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into `case` expression with expected type `int`
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	     ^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into application with expected type `int`
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                     ^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.130: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.131: 	  if n < 0 then [] else
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.132: 	      let remainder = n mod 10 in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Cons[?a]` is not an instance of type `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                       ^^
//│ ╟── but it flows into operator application with expected type `int`
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.133: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                                       ^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ digitsOfInt: ((int -> int -> int) -> int -> 'a) -> list['a]

// 38 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[([([(Int -> (Int -> Int))],)] -> α154')]] and [[[[[[[Int]]]]]]] cannot be unified but flows into the same location
//│ ╟── ([([(Int -> (Int -> Int))],)] -> α154') is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                                      ^
//│ ╟── Int is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╙── The following tvars cannot be resolved α136'
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[[[[[Int]]]]]]] and [[([([(Int -> (Int -> Int))],)] -> α147')]] cannot be unified but flows into the same location
//│ ╟── Int is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── ([([(Int -> (Int -> Int))],)] -> α147') is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                             ^
//│ ╙── The following tvars cannot be resolved α136'
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[[[[[Int]]]]]]] and [[([([(Int -> (Int -> Int))],)] -> α154')]] cannot be unified but flows into the same location
//│ ╟── Int is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^
//│ ╟── Int is used as type reference
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	           ^^^
//│ ╟── ([([(Int -> (Int -> Int))],)] -> α154') is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                                      ^
//│ ╟── The following tvars cannot be resolved α136', [[[[[α137']]]]]
//│ ╟── α137' is used as reference
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	     ^
//│ ╟── α137' is used as tuple type
//│ ║  l.24: 	let (<): 'a -> 'a -> bool
//│ ╙──      	         ^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α141' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── Bool is used as type reference
//│ ║  l.24: 	let (<): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── (true<bool> | (α141' & ~(true<bool>))) is used as operator application
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	     ^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] bool<> and [(true<bool> | (α149' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── (true<bool> | (α149' & ~(true<bool>))) is used as application
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                            ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.378: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                                                                                      ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.378: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.17: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                         ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.379: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                                             ^
//│ digitsOfInt: nothing -> 'a
//│   where
//│     'a :> list[nothing] | list['a]

// 309 mod
:unify
let pipe fs = let f a x = (fun n  -> a) x in let base n = n in List_fold_left f base fs;;
//│ pipe: list[?] -> 'a -> 'a

// 499
:unify
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let len1 = List_length l1 in
  let len2 = List_length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α210' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── Bool is used as type reference
//│ ║  l.25: 	let (<=): 'a -> 'a -> bool
//│ ║        	                      ^^^^
//│ ╟── (true<bool> | (α210' & ~(true<bool>))) is used as operator application
//│ ║  l.469: 	let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
//│ ╙──       	                       ^^^^^^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α261' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── Bool is used as type reference
//│ ║  l.26: 	let (>): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── (true<bool> | (α261' & ~(true<bool>))) is used as operator application
//│ ║  l.473: 	  if len1 > len2
//│ ╙──       	     ^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)

// 499 record types
:unify
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╔══[WARNING] [UNIFICATION ERROR 1] [[[{_1: α302'}]]] and [[[{_0: α300'}]]] cannot be unified but flows into the same location
//│ ╟── {_1: α302'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_0: α300'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved α298'
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α309' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── Bool is used as type reference
//│ ║  l.29: 	let (==): 'a -> 'a -> bool
//│ ║        	                      ^^^^
//│ ╟── (true<bool> | (α309' & ~(true<bool>))) is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	                            ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_0: α300'}]]] and [[[[[list[α297']]]]]] cannot be unified but flows into the same location
//│ ╟── {_0: α300'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── list[α297'] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[α297'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── The following tvars cannot be resolved [[[[[[α308']]]]]], α298'
//│ ╟── α308' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── α308' is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_1: α302'}]]] and [[[[[list[α297']]]]]] cannot be unified but flows into the same location
//│ ╟── {_1: α302'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── list[α297'] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[α297'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── The following tvars cannot be resolved [[[[[[α308']]]]]], α298'
//│ ╟── α308' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── α308' is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_0: α300'}]]] and [[[{_0: α300'}]]] cannot be unified but flows into the same location
//│ ╟── {_0: α300'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_0: α300'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved [[[[[[α308']]]]]], α298'
//│ ╟── α308' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── α308' is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_0: α300'}]]] and [[[{_1: α302'}]]] cannot be unified but flows into the same location
//│ ╟── {_0: α300'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_1: α302'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved [[[[[[α308']]]]]], α298'
//│ ╟── α308' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── α308' is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[{_1: α302'}]]] and [[[{_1: α302'}]]] cannot be unified but flows into the same location
//│ ╟── {_1: α302'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── {_1: α302'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved [[[[[[α308']]]]]], α298'
//│ ╟── α308' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── α308' is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[[[list[α297']]]]]] and [[[{_0: α300'}]]] cannot be unified but flows into the same location
//│ ╟── list[α297'] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[α297'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── {_0: α300'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved α308', α298'
//│ ╟── α308' is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ ╔══[WARNING] [UNIFICATION ERROR 2] [[[[[list[α297']]]]]] and [[[{_1: α302'}]]] cannot be unified but flows into the same location
//│ ╟── list[α297'] is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── list[α297'] is used as applied type reference
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── {_1: α302'} is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	        ^
//│ ╟── The following tvars cannot be resolved α308', α298'
//│ ╟── α308' is used as application
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ║         	                                    ^^^^^^^^^^^^
//│ ╟── α298' is used as refined scrutinee
//│ ║  l.496: 	  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ ╙──       	        ^
//│ removeZero: 'a -> (list[nothing] | 'b)
//│   where
//│     'a <: Cons[?] & {_0: anything, _1: 'a} & 'b | Nil | 'b & ~#Cons & ~#Nil

// infix mod
:unifyDbg
let rec digitsOfInt n =
  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ [ERROR 0] Bool != (true<bool> | (α343' & ~(true<bool>))) unifying because Bool = [(true<bool> | (α343' & ~(true<bool>)))] because α335' = Bool are result type in ([(Int,)] -> α335') = (α333' -> Bool) and α335' <: [(true<bool> | (α343' & ~(true<bool>)))]
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Bool and [(true<bool> | (α343' & ~(true<bool>)))] cannot be unified but flows into the same location
//│ ╟── Bool is used as type reference
//│ ║  l.26: 	let (>): 'a -> 'a -> bool
//│ ║        	                     ^^^^
//│ ╟── (true<bool> | (α343' & ~(true<bool>))) is used as operator application
//│ ║  l.647: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ╙──       	                      ^^^^^
//│ unified digitsOfInt330'
//│  digitsOfInt330' :> [(α331' -> α345')]
//│ unified α331'
//│  α331' <: [[[[[α333']]]]]
//│  α331' <: [[([([(Int -> (Int -> Int))],)] -> α337')]]
//│ unified α332''
//│ unified α333'
//│  Int = α333' are arg type in ([(Int,)] -> α335') = (α333' -> Bool)
//│  α333' :> [[[[Int]]]]
//│  [[([([(Int -> (Int -> Int))],)] -> α337')]] & [[[[[α333']]]]] :> α331'
//│ unified α334'
//│  α334' :> [[[(α333' -> Bool)]]]
//│  α334' <: [([(Int,)] -> α335')]
//│ unified α335'
//│  α335' <: [(true<bool> | (α343' & ~(true<bool>)))]
//│  α335' = Bool are result type in ([(Int,)] -> α335') = (α333' -> Bool)
//│ unified α336'
//│  α336' = α344' are TypeName(list)(0) arg type
//│ unified α337'
//│  α337' <: [([(Int,)] -> α338')]
//│ unified α338'
//│  α338' <: [[α336']]
//│ unified α339'
//│ unified α340'
//│  α340' <: [([([α331'],)] -> α341')]
//│ unified α341'
//│  α341' <: [[[list[α336']]]]
//│ unified α342'
//│  α342' | [[list[α344']]] <: α345'
//│  α342' :> [[[list[α336']]]]
//│ unified α343'
//│  α343' :> [[[[(bool<> & ~(true<bool>))]]]]
//│ unified α344'
//│ unified α345'
//│  α345' :> [[list[α344']]]
//│  α345' :> α342'
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.647: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ║         	                                                ^^^^^^^^^^^^^^^^
//│ ╟── type `Nil` is not a function
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                                      ^^^
//│ ╟── but it flows into reference with expected type `?digitsOfInt -> ?a`
//│ ║  l.647: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ╙──       	                                                ^^^^
//│ digitsOfInt: ((int -> int -> int) -> int -> 'a) -> list['a]


// 2879
:unifyDbg
let sqsum xs =
  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ [ERROR 0] Int != Float unifying because Int = Float are arg type in ([(Int,)] -> α361'') = (Float -> Float)
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Int and Float cannot be unified but flows into the same location
//│ ╟── Int is used as integer literal
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                    ^
//│ ╟── Float is used as type reference
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ╙──      	                     ^^^^^
//│ [ERROR 0] Float != Int unifying because Float = [[[[[Int]]]]] because α361'' = Float are result type in ([(Int,)] -> α361'') = (Float -> Float) and α361'' <: [[[[[Int]]]]]
//│ ╔══[WARNING] [UNIFICATION ERROR 0] Float and [[[[[Int]]]]] cannot be unified but flows into the same location
//│ ╟── Float is used as type reference
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ║        	                              ^^^^^
//│ ╟── Int is used as operator application
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^
//│ ╟── Int is used as type reference
//│ ║  l.14: 	let (+): int -> int -> int
//│ ╙──      	         ^^^
//│ unified α357'
//│  list[α367'] = [α357'] are arg type in (list[α367'] -> α366') = ([([α357'],)] -> α373')
//│  α357' <: [[[[[[[list[α367']]]]]]]]
//│ unified α358''
//│  α358'' <: [[[[[[[Float]]]]]]]
//│ unified α359''
//│  α359'' <: [[[[[[[Float]]]]]]]
//│ unified α360''
//│  α360'' :> [[[(Float -> Float)]]]
//│  α360'' <: [([(Int,)] -> α361'')]
//│ unified α361''
//│  α361'' <: [[[[[Int]]]]]
//│  α361'' = Float are result type in ([(Int,)] -> α361'') = (Float -> Float)
//│ unified α362''
//│  α362'' :> [[[(Int -> Int)]]]
//│  α362'' <: [([(α364'',)] -> α365'')]
//│ unified α363''
//│  α363'' :> [[[(Float -> Float)]]]
//│  α363'' <: [([(Int,)] -> α364'')]
//│ unified α364''
//│  α364'' = Float are result type in ([(Int,)] -> α364'') = (Float -> Float)
//│  α364'' = Int are arg type in ([(α364'',)] -> α365'') = (Int -> Int)
//│ unified α365''
//│  α365'' = Int are result type in ([(α364'',)] -> α365'') = (Int -> Int)
//│ unified α366'
//│  [Int] = α366' are arg type in ([([Int],)] -> α372') = (α366' -> (list[α367'] -> α366'))
//│  α366' :> [[[[[Int]]]]]
//│  α366' <: [[α368']]
//│  α366' <: [[α373']]
//│ unified α367'
//│  α367' <: [[α369']]
//│ unified α368'
//│  α368' <: [[[[[[[Float]]]]]]]
//│  [[α368']] = [[[[[Int]]]]] because α366' <: [[α368']] and α366' :> [[[[[Int]]]]]
//│ unified α369'
//│  α369' <: [[[[[[[Float]]]]]]]
//│ unified α370'
//│  α370' :> [[[Int]]]
//│  α370' <: [[α366']]
//│ unified α371'
//│  α371' :> [[[(α366' -> (list[α367'] -> α366'))]]]
//│  α371' <: [([([Int],)] -> α372')]
//│ unified α372'
//│  α372' <: [([([α357'],)] -> α373')]
//│  α372' = (list[α367'] -> α366') are result type in ([([Int],)] -> α372') = (α366' -> (list[α367'] -> α366'))
//│ unified α373'
//│  [[α373']] = [[[[[Int]]]]] because α366' <: [[α373']] and α366' :> [[[[[Int]]]]]
//│  [[α373']] & [[α368']] :> α366'
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `float`
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                    ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ╙──      	                     ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^^^^
//│ ╟── type `float` is not an instance of `int`
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ║        	                              ^^^^^
//│ ╟── but it flows into operator application with expected type `int`
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.14: 	let (+): int -> int -> int
//│ ╙──      	         ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                          ^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `float`
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                               ^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ╙──      	                     ^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^^^^^^^^^^^^^^^^^
//│ ╟── type `float` is not an instance of `int`
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ║        	                              ^^^^^
//│ ╟── but it flows into operator application with expected type `int`
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                          ^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.14: 	let (+): int -> int -> int
//│ ╙──      	                ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                     ^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `float`
//│ ║  l.14: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	               ^
//│ ╟── from type reference:
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ╙──      	            ^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                     ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `float`
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                ^
//│ ╟── but it flows into reference with expected type `float`
//│ ║  l.707: 	  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ ║         	                                                                      ^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.37: 	let List_fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│ ║        	                                         ^^
//│ ╟── from type reference:
//│ ║  l.45: 	let ( ** ): float -> float -> float
//│ ╙──      	            ^^^^^
//│ sqsum: list[float] -> int

