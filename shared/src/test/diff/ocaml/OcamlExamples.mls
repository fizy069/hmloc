:OcamlParser
:OcamlLoadLibrary

// 30 mod
// TODO: repeated provs and application should point to whole expression
:unify
let rec digitsOfInt n =
  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟──          ?a list ---> int
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── `?a list` is the type of this `then` branch and it flows into `?b`
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	                ^^
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟──          ?a list ---> int
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── `?a list` is the type of this `else` branch and it flows into `?b`
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ╙──     	                        ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.7: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into `else` branch with expected type `int`
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                        ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                          ^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.7: 	let rec digitsOfInt n =
//│ ║       	                    ^^^
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into `then` branch with expected type `int`
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.8: 	  if n < 0 then [] else [[(digitsOfInt n) / 10]];;
//│ ║       	                          ^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ digitsOfInt: anything -> list[list[int]]

// TODO: handle infix operation
// TODO: show that if-then-else return type is return type of function
// Simpler error message for this one
// 36 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else
      let remainder = n mod 10 in
      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╔══[ERROR] Type `(int -> int -> int) -> ?a` does not match `int`
//│ ╙──          ?b <--- ?c ---> int
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟──          ?a list ---> int
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── `?a list` is the type of this `then` branch and it flows into `?b`
//│ ║  l.67: 	  if n < 0 then [] else
//│ ╙──      	                ^^
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟──          ?a list ---> int
//│ ╟── `?a list` is found here
//│ ║  l.37: 	let (@): 'a list -> 'a list -> 'a list
//│ ║        	                               ^^
//│ ╟── ?a list` is the type of this `else` branch
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `?a list` is the type of this if-then-else `expression` and it flows into `?b`
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟──          ?a list ---> int
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── ?a list` is the type of this `then` branch
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                    ^^^^^^^^^^^
//│ ╟── `?a list` is the type of this if-then-else `expression` and it flows into `?b`
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                                     ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `?a list`
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `?a list`
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                                     ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.37: 	let (@): 'a list -> 'a list -> 'a list
//│ ╙──      	         ^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.66: 	let rec digitsOfInt n =
//│ ║        	                    ^^^
//│ ║  l.67: 	  if n < 0 then [] else
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.68: 	      let remainder = n mod 10 in
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into `then` branch with expected type `int`
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                    ^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                                      ^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.66: 	let rec digitsOfInt n =
//│ ║        	                    ^^^
//│ ║  l.67: 	  if n < 0 then [] else
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.68: 	      let remainder = n mod 10 in
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `int`
//│ ║  l.37: 	let (@): 'a list -> 'a list -> 'a list
//│ ║        	                               ^^
//│ ╟── but it flows into `else` branch with expected type `int`
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                                      ^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.66: 	let rec digitsOfInt n =
//│ ║        	                    ^^^
//│ ║  l.67: 	  if n < 0 then [] else
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.68: 	      let remainder = n mod 10 in
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into `then` branch with expected type `int`
//│ ║  l.67: 	  if n < 0 then [] else
//│ ║        	                ^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.69: 	      if n = 0 then [remainder] else ((digitsOfInt n) / 10) @ [remainder];;
//│ ║        	                                      ^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ digitsOfInt: ((int -> int -> int) -> int -> 'a) -> list['a]

// 38 mod
:unify
let rec digitsOfInt n =
  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╔══[ERROR] Type `(int -> int -> int) -> ?a` does not match `int`
//│ ╙──          (int -> int -> int) -> ?a <--- ?b ---> int
//│ ╔══[ERROR] Type `int` does not match `(int -> int -> int) -> ?a`
//│ ╙──          int <--- ?b ---> (int -> int -> int) -> ?a
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.181: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.182: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.182: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                        ^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.182: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                                                                                      ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.181: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.182: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.182: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ║         	                                                                        ^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.182: 	  if n < 0 then [] else if (n / 10) = 0 then n mod 10 else (digitsOfInt (n / 10)) :: (n mod 10);;
//│ ╙──       	                                             ^
//│ digitsOfInt: nothing -> 'a
//│   where
//│     'a :> list['a]

// 309 mod
:unify
let pipe fs = let f a x = (fun n  -> a) x in let base n = n in List_fold_left f base fs;;
//│ pipe: list[?] -> 'a -> 'a

// 499
:unify
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let len1 = List_length l1 in
  let len2 = List_length l2 in
  if len1 > len2
  then (l1, ((clone 0 (len1 - len2)) @ l2))
  else (((clone 0 (len2 - len1)) @ l1), l2);;
//│ clone: 'a -> int -> list['a]
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)

// 499 record types
:unify
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | _ -> l;;
//│ removeZero: (list[int & 'a] & 'b) -> (list['a] | 'b)

// infix mod
:unify
let rec digitsOfInt n =
  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ╔══[ERROR] Type `(int -> int -> int) -> ?a` does not match `int`
//│ ╙──          ?b <--- ?c ---> int
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.245: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ║         	                                                ^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not a function
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into reference with expected type `?digitsOfInt -> ?b`
//│ ║  l.245: 	  let numL = [] in if n > 0 then (n mod 10) :: (numL digitsOfInt n) else numL;;
//│ ╙──       	                                                ^^^^
//│ digitsOfInt: ((int -> int -> int) -> int -> 'a) -> list['a]


// 2879
:unify
let sqsum xs =
  let f a x = (a ** 2) + (x ** 2) in let base = 0 in List_fold_left f base xs;;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Cannot create unification error message for Int = Float because function argument type
//│ 	at: mlscript.utils.package$.lastWords(package.scala:185)
//│ 	at: mlscript.Typer.createUnificationErrorMessage(Typer.scala:784)
//│ 	at: mlscript.Typer.$anonfun$createUnificationErrorMessage$9(Typer.scala:846)
//│ 	at: scala.Option.map(Option.scala:242)
//│ 	at: mlscript.Typer.createUnificationErrorMessage(Typer.scala:846)
//│ 	at: mlscript.Typer.unifyTypes(Typer.scala:880)
//│ 	at: mlscript.Typer.unifyTypes(Typer.scala:891)
//│ 	at: mlscript.Typer.$anonfun$unifyTypes$5(Typer.scala:909)
//│ 	at: mlscript.Typer.$anonfun$unifyTypes$5$adapted(Typer.scala:907)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)

