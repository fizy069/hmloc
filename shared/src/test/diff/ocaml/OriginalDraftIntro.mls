




val parse_version: string -> string
val show_major: string -> string
//│ parse_version: string -> string
//│ show_major: string -> string

let appInfo = ("My Application", 1.5)
//│ appInfo: (string, float,)


let process (name, vers) =
  name ^ show_major (parse_version vers)
//│ process: (string, string,) -> string


:tex
let test = process appInfo
//│ test: string
//│ U max: 4, total: 6
//│ UERR 1 errors
//│ L: 0 [float ~ [[[string]]], [[[float]]] <: α76', α76' <: [[[string]]]]

// * GOAL for concise error:

// ╔══[ERROR] Type `float` does not match `string`
// ╟── this float literal has type `float` but it flows into `string`
// ║  l.20: 	let appInfo = ("My Application", 1.5)
// ║        	                                 ^^^
// ╟── this variable has type `string`
// ║  l.48: 	let process (name, vers) =
// ║        	                   ^^^^
// ╟── this reference has type `string`
// ║  l.49: 	  name ^ show_major (parse_version vers)
// ║        	                                   ^^^^
// ╟── `string` comes from this type expression
// ║  l.15: 	val parse_version: string -> string
// ╙──      	                   ^^^^^^
// test: string



// * Note: another error:

// * FIXME the flow through the function type is confusing; where do ?a ?b ?c come from?


let process name vers =
  name ^ show_major (parse_version vers)
//│ process: string -> string -> string


let test = process appInfo
//│ test: string -> string
//│ U max: 4, total: 8
//│ UERR 1 errors
//│ L: 0 [(string, float,) ~ [[[string]]], [[[(string, float,)]]] <: α86', α86' <: [[[string]]]]


