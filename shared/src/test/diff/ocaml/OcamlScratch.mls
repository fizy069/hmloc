:OcamlParser
:OcamlLoadLibrary

type a = int
//│ Defined type alias a

1 : a
//│ res: a

true : bool
//│ res: bool

match true with true -> 1 | false -> 2
//│ res: int

// :d
:dp
type ('a, 'b) either = Left of ('a * 'a) | Right of 'b
//│ Parsed: TypeDef(Als, TypeName(either), List(TypeName('a), TypeName('b)), Union(AppliedType(TypeName(Right),List(TypeName('b))),Union(AppliedType(TypeName(Left),List(TypeName('a))),AppliedType(TypeName(Left),List(TypeName('a))))), List())
//│ TypeDef(Cls, TypeName(Left), List(TypeName('a)), Record(List((_0,Tuple(List(TypeName('a), TypeName('a)))))), List(_0)) of adt: Some((TypeName(either),List(0)))
//│ TypeDef(Cls, TypeName(Right), List(TypeName('b)), Record(List((_0,TypeName('b)))), List(_0)) of adt: Some((TypeName(either),List(1)))
//│ Def(false, Left, PolyType(List(TypeName('a), TypeName('b)),Function(Tuple(List(TypeName('a), TypeName('a))),AppliedType(TypeName(either),List(TypeName('a), TypeName('b))))), true)
//│ Def(false, Right, PolyType(List(TypeName('a), TypeName('b)),Function(TypeName('b),AppliedType(TypeName(either),List(TypeName('a), TypeName('b))))), true)
//│ Defined type alias either[+'a, +'b]
//│ Defined class Left[+'a]
//│ Defined class Right[+'b]
//│ Left: ('a, 'a,) -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

Right(1)
//│ res: either[nothing, int]

Left
//│ res: ('a, 'a,) -> either['a, nothing]

:d
Left(1,2)
//│ 0. Typing term Left (1, 2,)
//│ | 0. Typing term Left
//│ | 0. : ((α92, α92,) -> either[α92,α93])
//│ | 0. Typing term 1, 2,
//│ | | 0. Typing term 1
//│ | | 0. : Int
//│ | | 0. Typing term 2
//│ | | 0. : Int
//│ | 0. : (Int, Int,)
//│ | CONSTRAIN ((α92, α92,) -> either[α92,α93]) <! ((Int, Int,) -> α94)
//│ |   where 
//│ | C ((α92, α92,) -> either[α92,α93]) <! ((Int, Int,) -> α94)    (0) where FunctionType <: FunctionType}
//│ | | C (Int, Int,) <! (α92, α92,)    (1) where TupleType <: TupleType}
//│ | | | C Int <! α92    (2) where TypeRef <: TypeVariable}
//│ | | | C Int <! α92    (3) where TypeRef <: TypeVariable}
//│ | | | | Cached!
//│ | | C either[α92,α93] <! α94    (3) where TypeRef <: TypeVariable}
//│ 0. : α94
//│ ⬤ Typed as: α94
//│  where: 
//│ 		α92 :> Int
//│ 		α94 :> either[α92,α93]
//│ res: either[int, nothing]

Left(((1,2)))
//│ res: either[int, nothing]

// :d
// :dp
// :unifyDbg
// let test x =
//  match x with True -> 0 | False -> 1

// TODO should be an error
:unify
:dp
let text x =
  match x with Left l -> l | Right r -> r
//│ Parsed: Def(false, text, Lam(Var(x), If(Var(x), List(IfThen(App(Var(Left), Var(l)), Var(l), IfThen(App(Var(Right), Var(r)), Var(r)))), true)
//│ text: either['a, 'a] -> 'a

:unify
let text x =
  match x with Left (l1, l2) -> l1 | Right r -> r
//│ text: either['a, 'a] -> 'a


:d
let f x = let (a, b) = x in a + b
//│ 1. Typing term x => if x(a, b,) then + a b
//│ | 1. Typing pattern x
//│ | 1. : α124'
//│ | 1. Typing term if x(a, b,) then + a b
//│ | | If(Var(x), List(IfThen(Tup(Var(a), Var(b)), App(App(Var(+), Var(a)), Var(b))))
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: match case without any arms
//│ 	at: mlscript.utils.package$.lastWords(package.scala:185)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:604)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:700)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:515)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:700)
//│ 	at: mlscript.Typer.typeLetRhs(Typer.scala:319)
//│ 	at: mlscript.DiffTests.$anonfun$new$44(DiffTests.scala:583)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)

:e
:unify
if 1 == 2 then Left true else Right false
//│ ╔══[ERROR] Type mismatch in then branch has type:
//│ ║  l.106: 	if 1 == 2 then Left true else Right false
//│ ║         	               ^^^^^^^^^
//│ ╟── reference of type `bool` is not a 2-element tuple
//│ ║  l.106: 	if 1 == 2 then Left true else Right false
//│ ║         	                    ^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.18: 	type ('a, 'b) either = Left of ('a * 'a) | Right of 'b
//│ ╙──      	                                ^^^^^^^
//│ res: either[nothing, bool]

// :d
// succ

let f x = x
//│ f: 'a -> 'a

:d
f(true, false)
//│ 0. Typing term f (true, false,)
//│ | 0. Typing term f
//│ | 0. : (α144 -> [α144])
//│ | 0. Typing term true, false,
//│ | | 0. Typing term true
//│ | | 0. : Bool
//│ | | 0. Typing term false
//│ | | 0. : Bool
//│ | 0. : (Bool, Bool,)
//│ | CONSTRAIN (α144 -> [α144]) <! ((Bool, Bool,) -> α145)
//│ |   where 
//│ | C (α144 -> [α144]) <! ((Bool, Bool,) -> α145)    (0) where FunctionType <: FunctionType}
//│ | | C (Bool, Bool,) <! α144    (1) where TupleType <: TypeVariable}
//│ | | C [α144] <! α145    (2) where ProvType <: TypeVariable}
//│ | | | C α144 <! α145    (2) where TypeVariable <: TypeVariable}
//│ | | | | C (Bool, Bool,) <! α145    (3) where TupleType <: TypeVariable}
//│ 0. : α145
//│ ⬤ Typed as: α145
//│  where: 
//│ 		α145 :> (Bool, Bool,)
//│ res: (bool, bool,)

:d
f((true, false))
//│ 0. Typing term f (true, false,)
//│ | 0. Typing term f
//│ | 0. : (α147 -> [α147])
//│ | 0. Typing term true, false,
//│ | | 0. Typing term true
//│ | | 0. : Bool
//│ | | 0. Typing term false
//│ | | 0. : Bool
//│ | 0. : (Bool, Bool,)
//│ | CONSTRAIN (α147 -> [α147]) <! ((Bool, Bool,) -> α148)
//│ |   where 
//│ | C (α147 -> [α147]) <! ((Bool, Bool,) -> α148)    (0) where FunctionType <: FunctionType}
//│ | | C (Bool, Bool,) <! α147    (1) where TupleType <: TypeVariable}
//│ | | C [α147] <! α148    (2) where ProvType <: TypeVariable}
//│ | | | C α147 <! α148    (2) where TypeVariable <: TypeVariable}
//│ | | | | C (Bool, Bool,) <! α148    (3) where TupleType <: TypeVariable}
//│ 0. : α148
//│ ⬤ Typed as: α148
//│  where: 
//│ 		α148 :> (Bool, Bool,)
//│ res: (bool, bool,)

:dp
Left
//│ Parsed: Var(Left)
//│ res: ('a, 'a,) -> either['a, nothing]

Left((true, false))
//│ res: either[bool, nothing]

:unify
if 1 == 2 then Left((true, false)) else Right false
//│ res: either[bool, bool]

:unify
let test x =
 match x with true -> 0 | false -> "oops"
//│ ╔══[WARNING] Type `string` does not match `int`
//│ ╟── int ---> ?a <--- string
//│ ╟── then branch has type `int`
//│ ║  l.186: 	 match x with true -> 0 | false -> "oops"
//│ ║         	                      ^
//│ ╟── then branch has type `int`
//│ ║  l.186: 	 match x with true -> 0 | false -> "oops"
//│ ║         	                      ^
//│ ╟── this if-then-else expression has type `int`
//│ ║  l.186: 	 match x with true -> 0 | false -> "oops"
//│ ║         	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?b`
//│ ║  l.186: 	 match x with true -> 0 | false -> "oops"
//│ ║         	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `string`
//│ ║  l.186: 	 match x with true -> 0 | false -> "oops"
//│ ║         	 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── else branch has type `string`
//│ ║  l.186: 	 match x with true -> 0 | false -> "oops"
//│ ║         	                                   ^^^^^^^
//│ ╟── else branch has type `string`
//│ ║  l.186: 	 match x with true -> 0 | false -> "oops"
//│ ╙──       	                                   ^^^^^^^
//│ test: bool -> (int | string)



:unifyDbg
//let temp x = if x then 0 else "oops"


//let temp x y z = if x then y else z

//temp true 1 2

:unifyDbg
//temp true 1 "oops"


//let temp x y = if x then x else y

:unifyDbg
//temp true 1



//let addF x f arg = x + f arg

:unify
//let rec findOddAndAddThem xs = match xs with
//  | x :: xs -> if (mod xs 2 == 0) then addF x findOddAndAddThem xs else findOddAndAddThem xs
//  | [] -> 0


:unify
let clone x n =
  let rec helper acc n' =
    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
  helper x (n - 1)
//│ clone: int -> int -> int

