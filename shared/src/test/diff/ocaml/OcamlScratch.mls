let wrap x = Cons(x, Nil)
//│ wrap: anything -> anything


// *** GOAL ***
// ╔══[WARNING] Type `int` does not match `bool`
// ╟── int ---> int list ---> ?a <--- bool list <--- bool
// ╟── integer literal `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── integer literal `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── argument `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── reference `int`
// ║  l.97: 	let wrap x = Cons(x, Nil)
// ║        	                  ^
// ╟── argument `bool`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                              ^^^^
// ╟── reference `bool`
// ║  l.101: 	if true then wrap 1 else wrap true
// ╙──       	                              ^^^^

// * We don't care about in-and-outs
// ╟── int ---> int list ---> int --> int list ---> ...

:unify
if true then wrap 1 else wrap true
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟── `bool` comes from this type expression
//│ ╟── this reference has type `bool`
//│ ║  l.31: 	if true then wrap 1 else wrap true
//│ ║        	                              ^^^^
//│ ╟── this <nested> has type `bool`
//│ ╟── this reference has type `bool`
//│ ║  l.1: 	let wrap x = Cons(x, Nil)
//│ ║       	                  ^
//│ ╟── this variable has type `bool`
//│ ║  l.1: 	let wrap x = Cons(x, Nil)
//│ ║       	         ^
//│ ╟── this variable has type `int`
//│ ║  l.1: 	let wrap x = Cons(x, Nil)
//│ ║       	         ^
//│ ╟── this reference has type `int`
//│ ║  l.1: 	let wrap x = Cons(x, Nil)
//│ ║       	                  ^
//│ ╟── this <nested> has type `int`
//│ ╟── this integer literal has type `int`
//│ ║  l.31: 	if true then wrap 1 else wrap true
//│ ╙──      	                  ^
//│ res: anything


:unify
if true then wrap (if true then 1 else false) else wrap true
//│ res: anything


:unify
let test z = if true then wrap z else wrap true
//│ test: anything -> anything


:unify
let rec t = test (if true then 1 else t)
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Cannot create showOcaml for ?
//│ 	at: mlscript.utils.package$.lastWords(package.scala:185)
//│ 	at: mlscript.TypeImpl.showOcaml(helpers.scala:61)
//│ 	at: mlscript.TypeImpl.$anonfun$showOcaml$5(helpers.scala:58)
//│ 	at: scala.collection.immutable.List.map(List.scala:246)
//│ 	at: mlscript.TypeImpl.showOcaml(helpers.scala:58)
//│ 	at: mlscript.Message.$anonfun$showIn$1(Message.scala:14)
//│ 	at: scala.collection.immutable.List.map(List.scala:250)
//│ 	at: mlscript.Message.showIn(Message.scala:13)
//│ 	at: mlscript.Message.show(Message.scala:9)
//│ 	at: mlscript.UnificationReport$.apply(Diagnostic.scala:52)




let wrap x = not x
//│ wrap: bool -> bool

:unify
let test z = wrap z
//│ test: bool -> bool

// TODO fix flow
:ex
test 1
//│ res: bool



:unify
let clone x n =
  let rec helper acc n' =
    if acc <= 0 then acc else helper (acc + 1) (n' - 1) in
  helper x (n - 1)
//│ clone: int -> int -> int


:e
:unify
let rec digitsOfInt n =
  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╔══[ERROR] Type `error` does not match `error`
//│ ║  
//│ ╟── this expression has type `error`
//│ ╟── this reference has type `error`
//│ ║  l.110: 	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                            ^^^^^^^^^
//│ ╟── this <nested> has type `error`
//│ ╟── this <nested> has type `error`
//│ ╟── this reference has type `error`
//│ ║  l.110: 	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ║         	                            ^^^^^^^^^
//│ ╙── this expression has type `error`
//│ ╔══[ERROR] identifier not found: remainder
//│ ║  
//│ ║  l.110: 	  ((digitsOfInt n) / 10) @ [remainder];;
//│ ╙──       	                            ^^^^^^^^^
//│ digitsOfInt: anything -> anything
