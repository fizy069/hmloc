:OcamlParser
:OcamlLoadLibrary


type Bool = True | False
//│ Defined type alias Bool
//│ Defined class True
//│ Defined class False
//│ True: Bool
//│ False: Bool

:unifyDbg
let test x =
  match x with True -> 0 | False -> 1
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:723)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.typeLetRhs(Typer.scala:418)
//│ 	at: mlscript.DiffTests.$anonfun$new$45(DiffTests.scala:589)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)

:unifyDbg
let test x =
  match x with True -> 0 | False -> "oops"
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:723)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.typeLetRhs(Typer.scala:418)
//│ 	at: mlscript.DiffTests.$anonfun$new$45(DiffTests.scala:589)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)



:unifyDbg
let temp x = if x then 0 else "oops"
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:723)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.typeLetRhs(Typer.scala:418)
//│ 	at: mlscript.DiffTests.$anonfun$new$45(DiffTests.scala:589)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)


let temp x y z = if x then y else z
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:723)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)

temp true 1 2
//│ ╔══[ERROR] identifier not found: temp
//│ ║  l.72: 	temp true 1 2
//│ ╙──      	^^^^
//│ res: error

:unifyDbg
temp true 1 "oops"
//│ [ERROR 0] ([(Int,)] -> α78) != error<> unifying because [([(Int,)] -> α78)] = [[error<>]] because α77 <: [([(Int,)] -> α78)] and α77 :> [[error<>]]
//│ allVarPols: +α81
//│ norm[+] [([(Int,)] -> α81)]
//│ | DNF: DNF(([(Int,)] -> α81){})
//│ | norm[-] [(Int,)]
//│ | | DNF: DNF((Int,){})
//│ | | norm[-] Int
//│ | | | DNF: DNF(int<>{})
//│ | | ~> int<>
//│ | ~> (int<>,)
//│ | norm[+] α81
//│ | | DNF: DNF(α81)
//│ | | norm[+] [[error<>]]
//│ | | | DNF: DNF(error<>{})
//│ | | ~> error<>
//│ | | norm[-] [([(String,)] -> α82)]
//│ | | | DNF: DNF(([(String,)] -> α82){})
//│ | | | norm[+] [(String,)]
//│ | | | | DNF: DNF((String,){})
//│ | | | | norm[+] String
//│ | | | | | DNF: DNF(string<>{})
//│ | | | | ~> string<>
//│ | | | ~> (string<>,)
//│ | | | norm[-] α82
//│ | | | | DNF: DNF(α82)
//│ | | | | norm[+] [[error<>]]
//│ | | | | | DNF: DNF(error<>{})
//│ | | | | ~> error<>
//│ | | | ~> α82
//│ | | ~> (string<> -> α82)
//│ | ~> α81
//│ ~> (int<> -> α81)
//│ allVarPols: 
//│ norm[+] [[error<>]]
//│ | DNF: DNF(error<>{})
//│ ~> error<>
//│ allVarPols: +α83
//│ norm[+] ([(Int,)] -> α83)
//│ | DNF: DNF(([(Int,)] -> α83){})
//│ | norm[-] [(Int,)]
//│ | | DNF: DNF((Int,){})
//│ | | norm[-] Int
//│ | | | DNF: DNF(int<>{})
//│ | | ~> int<>
//│ | ~> (int<>,)
//│ | norm[+] α83
//│ | | DNF: DNF(α83)
//│ | | norm[+] [[error<>]]
//│ | | | DNF: DNF(error<>{})
//│ | | ~> error<>
//│ | | norm[-] [([(String,)] -> α84)]
//│ | | | DNF: DNF(([(String,)] -> α84){})
//│ | | | norm[+] [(String,)]
//│ | | | | DNF: DNF((String,){})
//│ | | | | norm[+] String
//│ | | | | | DNF: DNF(string<>{})
//│ | | | | ~> string<>
//│ | | | ~> (string<>,)
//│ | | | norm[-] α84
//│ | | | | DNF: DNF(α84)
//│ | | | | norm[+] [[error<>]]
//│ | | | | | DNF: DNF(error<>{})
//│ | | | | ~> error<>
//│ | | | ~> α84
//│ | | ~> (string<> -> α84)
//│ | ~> α83
//│ ~> (int<> -> α83)
//│ allVarPols: 
//│ norm[+] error<>
//│ | DNF: DNF(error<>{})
//│ ~> error<>
//│ ╔══[WARNING] [UNIFICATION ERROR 0] int -> ?a and error cannot be unified but flows into the same location
//│ ╟── int -> ?b is used as application
//│ ║  l.79: 	temp true 1 "oops"
//│ ║        	^^^^^^^^^
//│ ╟── error is used as application
//│ ║  l.79: 	temp true 1 "oops"
//│ ╙──      	^^^^^^^^^
//│ [ERROR 0] ([(String,)] -> α79) != error<> unifying because [([(String,)] -> α79)] = [[error<>]] because α78 <: [([(String,)] -> α79)] and α78 :> [[error<>]]
//│ allVarPols: +α85
//│ norm[+] [([(String,)] -> α85)]
//│ | DNF: DNF(([(String,)] -> α85){})
//│ | norm[-] [(String,)]
//│ | | DNF: DNF((String,){})
//│ | | norm[-] String
//│ | | | DNF: DNF(string<>{})
//│ | | ~> string<>
//│ | ~> (string<>,)
//│ | norm[+] α85
//│ | | DNF: DNF(α85)
//│ | | norm[+] [[error<>]]
//│ | | | DNF: DNF(error<>{})
//│ | | ~> error<>
//│ | ~> α85
//│ ~> (string<> -> α85)
//│ allVarPols: 
//│ norm[+] [[error<>]]
//│ | DNF: DNF(error<>{})
//│ ~> error<>
//│ allVarPols: +α86
//│ norm[+] ([(String,)] -> α86)
//│ | DNF: DNF(([(String,)] -> α86){})
//│ | norm[-] [(String,)]
//│ | | DNF: DNF((String,){})
//│ | | norm[-] String
//│ | | | DNF: DNF(string<>{})
//│ | | ~> string<>
//│ | ~> (string<>,)
//│ | norm[+] α86
//│ | | DNF: DNF(α86)
//│ | | norm[+] [[error<>]]
//│ | | | DNF: DNF(error<>{})
//│ | | ~> error<>
//│ | ~> α86
//│ ~> (string<> -> α86)
//│ allVarPols: 
//│ norm[+] error<>
//│ | DNF: DNF(error<>{})
//│ ~> error<>
//│ ╔══[WARNING] [UNIFICATION ERROR 0] string -> ?a and error cannot be unified but flows into the same location
//│ ╟── string -> ?b is used as application
//│ ║  l.79: 	temp true 1 "oops"
//│ ║        	^^^^^^^^^^^
//│ ╟── error is used as application
//│ ║  l.79: 	temp true 1 "oops"
//│ ╙──      	^^^^^^^^^^^
//│ unified α77
//│  α77 :> [[error<>]]
//│  α77 <: [([(Int,)] -> α78)]
//│ unified α78
//│  α78 :> [[error<>]]
//│  α78 <: [([(String,)] -> α79)]
//│ unified α79
//│  α79 :> [[error<>]]
//│ ╔══[ERROR] identifier not found: temp
//│ ║  l.79: 	temp true 1 "oops"
//│ ╙──      	^^^^
//│ res: error


let temp x y = if x then x else y
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:723)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)

:unifyDbg
temp true 1
//│ [ERROR 0] ([(Int,)] -> α90) != error<> unifying because [([(Int,)] -> α90)] = [[error<>]] because α89 <: [([(Int,)] -> α90)] and α89 :> [[error<>]]
//│ allVarPols: +α92
//│ norm[+] [([(Int,)] -> α92)]
//│ | DNF: DNF(([(Int,)] -> α92){})
//│ | norm[-] [(Int,)]
//│ | | DNF: DNF((Int,){})
//│ | | norm[-] Int
//│ | | | DNF: DNF(int<>{})
//│ | | ~> int<>
//│ | ~> (int<>,)
//│ | norm[+] α92
//│ | | DNF: DNF(α92)
//│ | | norm[+] [[error<>]]
//│ | | | DNF: DNF(error<>{})
//│ | | ~> error<>
//│ | ~> α92
//│ ~> (int<> -> α92)
//│ allVarPols: 
//│ norm[+] [[error<>]]
//│ | DNF: DNF(error<>{})
//│ ~> error<>
//│ allVarPols: +α93
//│ norm[+] ([(Int,)] -> α93)
//│ | DNF: DNF(([(Int,)] -> α93){})
//│ | norm[-] [(Int,)]
//│ | | DNF: DNF((Int,){})
//│ | | norm[-] Int
//│ | | | DNF: DNF(int<>{})
//│ | | ~> int<>
//│ | ~> (int<>,)
//│ | norm[+] α93
//│ | | DNF: DNF(α93)
//│ | | norm[+] [[error<>]]
//│ | | | DNF: DNF(error<>{})
//│ | | ~> error<>
//│ | ~> α93
//│ ~> (int<> -> α93)
//│ allVarPols: 
//│ norm[+] error<>
//│ | DNF: DNF(error<>{})
//│ ~> error<>
//│ ╔══[WARNING] [UNIFICATION ERROR 0] int -> ?a and error cannot be unified but flows into the same location
//│ ╟── int -> ?b is used as application
//│ ║  l.234: 	temp true 1
//│ ║         	^^^^^^^^^
//│ ╟── error is used as application
//│ ║  l.234: 	temp true 1
//│ ╙──       	^^^^^^^^^
//│ unified α89
//│  α89 :> [[error<>]]
//│  α89 <: [([(Int,)] -> α90)]
//│ unified α90
//│  α90 :> [[error<>]]
//│ ╔══[ERROR] identifier not found: temp
//│ ║  l.234: 	temp true 1
//│ ╙──       	^^^^
//│ res: error



let addF x f arg = x + f arg
//│ addF: int -> ('a -> int) -> 'a -> int

:unify
let rec findOddAndAddThem xs = match xs with
  | x :: xs -> if (mod xs 2 == 0) then addF x findOddAndAddThem xs else findOddAndAddThem xs
  | [] -> 0
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:723)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.$anonfun$typeTerm$2(Typer.scala:651)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:31)
//│ 	at: mlscript.Typer.typeTerm(Typer.scala:735)
//│ 	at: mlscript.Typer.typeLetRhs(Typer.scala:415)
//│ 	at: mlscript.DiffTests.$anonfun$new$45(DiffTests.scala:589)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
