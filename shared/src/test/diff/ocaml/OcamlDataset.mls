:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (?a -> _ -> ?a) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   │ 
//│   ◉ (?b -> _ -> _) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                       ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.13     let f a x = padZero l1 l2 in
//│                     ^
//│   ◉ (?b -> _ -> _) comes from
//│   │  - l.13     let f a x = padZero l1 l2 in
//│   │                   ^^^^^^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?a -> _ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ list * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (_ list * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list * _) comes from
//│    - l.7    then (((clone 0 (-1 * diff)) @ l1), l2)
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _ list`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _ list)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _ list) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                    ^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) ---> (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.6    if diff < 0
//│             ^^^^^^^^^^^
//│             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) comes from
//│     │  - l.13     let f a x = padZero l1 l2 in
//│     │                   ^^^^^^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ cloneHelper: 'a -> int -> list['a] -> list['a]
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a], list['a0]
//│ padZero: list['a] -> list['b] -> (list['a], list['b],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list['a] -> 'b -> list[int]
//│   where
//│     'b = list[int], list['c]
//│ U max: 33, total: 666
//│ UERR 6 errors
//│ L: 1 [list[([α203''], [α204''],)] ~ ([α212''], [α213''],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - α208'', L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]], [α208'' - (α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')) - α206'', L: 0 [(α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')), (α208'' -> (α209'' -> [α158''])) <: (α206'' -> (α207'' -> α206''))]], α206'' <: ([α212''], [α213''],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([[α151'']], [[α154'']],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> α157'', α157'' :> ([[α151'']], [[α154'']],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([α212''], [α213''],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> α157'', α157'' <: α158'', [α158'' - (α209'' -> [α158'']) ~ (α207'' -> α206'') - α206'', L: 1 [(α209'' -> [α158'']) ~ (α207'' -> α206''), [(α209'' -> [α158'']) - (α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')) - (α207'' -> α206''), L: 0 [(α208'' -> (α209'' -> [α158''])) ~ (α206'' -> (α207'' -> α206'')), (α208'' -> (α209'' -> [α158''])) <: (α206'' -> (α207'' -> α206''))]]]], α206'' <: ([α212''], [α213''],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([[α151'']], [[list[α155'']]],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> α157'', α157'' :> ([[α151'']], [[list[α155'']]],)]
//│ L: 0 [list[([α203''], [α204''],)] ~ ([α212''], [α213''],), list[([α203''], [α204''],)] <: α206'', α206'' <: ([α212''], [α213''],)]
//│ L: 2 [list[([α203''], [α204''],)] ~ ([[list[α152'']]], [[α154'']],), list[([α203''], [α204''],)] <: α206'', [α206'' - (α207'' -> α206'') ~ (α209'' -> [α158'']) - α158'', L: 1 [(α207'' -> α206'') ~ (α209'' -> [α158'']), [(α207'' -> α206'') - (α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])) - (α209'' -> [α158'']), L: 0 [(α206'' -> (α207'' -> α206'')) ~ (α208'' -> (α209'' -> [α158''])), (α206'' -> (α207'' -> α206'')) :> (α208'' -> (α209'' -> [α158'']))]]]], α158'' :> ([[list[α152'']]], [[α154'']],)]

// FIXME: TODO file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ ╔══[ERROR] illegal cycle involving type expr
//│ ║  
//│ ║  l.291:	    VarX
//│ ║        	    ^^^^
//│ ║      	  | VarY ...
//│ ║      	  ^^^^^^^^^^
//│ ╔══[ERROR] illegal cycle involving type expr
//│ ║  
//│ ║  l.293:	  | Sine of expr
//│ ╙──      	    ^^^^^^^^^^^^
//│ ╔══[ERROR] illegal cycle involving type Cosine
//│ ║  
//│ ║  l.294:	  | Cosine of expr
//│ ╙──      	    ^^^^^^^^^^^^^^
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Could not find TypeName(expr)

// FIXME file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) comes from
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) comes from
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed for
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?c -> ?d -> ?c) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) comes from
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 32
//│ UERR 1 errors
//│ L: 2 [int ~ list['a359'], int <: α360', [α360' - (α358' -> α360') ~ (α356' -> α355') - α355', L: 1 [(α358' -> α360') ~ (α356' -> α355'), [(α358' -> α360') - (α357' -> (α358' -> α360')) ~ (α355' -> (α356' -> α355')) - (α356' -> α355'), L: 0 [(α357' -> (α358' -> α360')) ~ (α355' -> (α356' -> α355')), (α357' -> (α358' -> α360')) <: (α355' -> (α356' -> α355'))]]]], α355' :> α354', [α354' - list[α354'] ~ list[α356'] - α356', L: 0 [list[α354'] ~ list[α356'], list[α354'] :> α349', α349' <: list[α356']]], [α356' - (α356' -> α355') ~ (α358' -> α360') - α358', L: 1 [(α356' -> α355') ~ (α358' -> α360'), [(α356' -> α355') - (α355' -> (α356' -> α355')) ~ (α357' -> (α358' -> α360')) - (α358' -> α360'), L: 0 [(α355' -> (α356' -> α355')) ~ (α357' -> (α358' -> α360')), (α355' -> (α356' -> α355')) :> (α357' -> (α358' -> α360'))]]]], α358' <: list['a359']]


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ [ERROR] Type `_ list` does not match `(_ -> _) -> _ list -> _ list`
//│ 
//│         (_ list) <--- (?a) ~~~~ ((_ -> _) -> _ list -> _ list)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - l.3    | [] -> ""
//│ │             ^^
//│ │  - l.2    match sl with
//│ │                 ^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.1  let rec sepConcat sep sl =
//│                                 ^^
//│   ◉ (?a -> _) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?a -> _) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?b) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> _) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ ((_ -> _) -> _ list -> _ list) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                                         ^^^^^^^^
//│    - lib. let List.map: ('a -> 'b) -> 'a list -> 'b list
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `string` does not match `(_ * _) -> _`
//│ 
//│         (string) <--- (?a) ~~~~ (?b) ---> (?c) ~~~~ (?d) ---> ((_ * _) -> _)
//│ 
//│ ◉ (string) comes from
//│ ▲  - lib. let (^): string -> string -> string
//│ │                  ^^^^^^
//│ │  - l.5        let f a x = a ^ (sep ^ x) in
//│ │                           ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.5        let f a x = a ^ (sep ^ x) in
//│                       ^
//│   ◉ (?a -> _ -> string) comes from
//│   │  - l.5        let f a x = a ^ (sep ^ x) in
//│   │                     ^^^^^^^^^^^^^^^^^^^
//│   │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│   │                                                           ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│ │                                            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.2    match sl with
//│             ^^^^^^^^^^^^^
//│             | [] -> "" ...
//│             ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?d) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> ?e) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * _) -> _) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ sepConcat: string -> list[string] -> string
//│ stringOfList: 'a -> 'b -> string
//│ U max: 7, total: 76
//│ UERR 2 errors
//│ L: 2 [string ~ (([[α374']], [[α375']],) -> α389'), string :> α383', [α383' - (α383' -> (α381' -> [string])) ~ (α382' -> (α380' -> α382')) - α382', L: 0 [(α383' -> (α381' -> [string])) ~ (α382' -> (α380' -> α382')), (α383' -> (α381' -> [string])) <: (α382' -> (α380' -> α382'))]], α382' <: α384', [α384' - (α378' -> α384') ~ ([((α386' -> α387') -> (list[α386'] -> list[α387']))] -> α388') - α388', L: 1 [(α378' -> α384') ~ ([((α386' -> α387') -> (list[α386'] -> list[α387']))] -> α388'), [(α378' -> α384') - (α377' -> (α378' -> α384')) ~ ([string] -> α385') - α385', L: 0 [(α377' -> (α378' -> α384')) ~ ([string] -> α385'), (α377' -> (α378' -> α384')) <: sepConcat376', sepConcat376' <: ([string] -> α385')]], α385' <: ([((α386' -> α387') -> (list[α386'] -> list[α387']))] -> α388')]], α388' <: (([[α374']], [[α375']],) -> α389')]
//│ L: 2 [list['a379'] ~ ((α386' -> α387') -> (list[α386'] -> list[α387'])), list['a379'] :> α378', [α378' - (α378' -> α384') ~ ([((α386' -> α387') -> (list[α386'] -> list[α387']))] -> α388') - ((α386' -> α387') -> (list[α386'] -> list[α387'])), L: 1 [(α378' -> α384') ~ ([((α386' -> α387') -> (list[α386'] -> list[α387']))] -> α388'), [(α378' -> α384') - (α377' -> (α378' -> α384')) ~ ([string] -> α385') - α385', L: 0 [(α377' -> (α378' -> α384')) ~ ([string] -> α385'), (α377' -> (α378' -> α384')) <: sepConcat376', sepConcat376' <: ([string] -> α385')]], α385' <: ([((α386' -> α387') -> (list[α386'] -> list[α387']))] -> α388')]]]

// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ~~~~ (?digitsOfInt) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                                                  ^^^^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?a) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                                ^^
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                           ^^
//│   ◉ (?c -> _) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt -> _) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?digitsOfInt) is assumed for
//│ ▲  - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│ │                 ^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ~~~~ (?a) ---> (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                              ^
//│   ◉ (int -> ?a) comes from
//│   ▲  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^
//│   │  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?sumListHelper) is assumed for
//│   ▲  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b -> _ -> ?c) comes from
//│      - l.1  let rec sumListHelper total xs =
//│                                   ^^^^^^^^^^
//│               match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.1  let rec sumListHelper total xs =
//│ │                               ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │                                 ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ list -> ?d) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?e) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?e) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?f) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                ^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?f) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?g) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?g) is assumed for
//│ │  - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│ │                                         ^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                           ^^^^^^^^^^^^^^^^^^^
//│ sumListHelper: int -> list[int] -> int
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> list[int]
//│ sumList: list[int] -> int
//│ additivePersistence: 'a -> 'b
//│ U max: 28, total: 273
//│ UERR 2 errors
//│ L: 2 [int ~ ([α445'] -> α474'), [int - ([int] -> α455') ~ (α451' -> (α448' -> α449')) - α451', L: 0 [([int] -> α455') ~ (α451' -> (α448' -> α449')), ([int] -> α455') :> sumListHelper456', sumListHelper456' :> (α451' -> (α448' -> α449'))]], α451' <: α449', α449' :> α452', [α452' - ([list['a453']] -> α452') ~ ([α447'] -> α450') - α450', L: 1 [([list['a453']] -> α452') ~ ([α447'] -> α450'), ([list['a453']] -> α452') :> α454', [α454' - ([int] -> α454') ~ ([int] -> α455') - α455', L: 0 [([int] -> α454') ~ ([int] -> α455'), ([int] -> α454') :> sumListHelper456', sumListHelper456' <: ([int] -> α455')]], α455' <: ([α447'] -> α450')]], [α450' - (α447' -> α450') ~ ([digitsOfInt457'] -> α473') - α473', L: 0 [(α447' -> α450') ~ ([digitsOfInt457'] -> α473'), (α447' -> α450') <: sumList446', sumList446' <: ([digitsOfInt457'] -> α473')]], α473' <: ([α445'] -> α474')]
//│ L: 2 [list['a453'] ~ (α458' -> α469'), [list['a453'] - ([list['a453']] -> α452') ~ ([α447'] -> α450') - α447', L: 1 [([list['a453']] -> α452') ~ ([α447'] -> α450'), ([list['a453']] -> α452') :> α454', [α454' - ([int] -> α454') ~ ([int] -> α455') - α455', L: 0 [([int] -> α454') ~ ([int] -> α455'), ([int] -> α454') :> sumListHelper456', sumListHelper456' <: ([int] -> α455')]], α455' <: ([α447'] -> α450')]], [α447' - (α447' -> α450') ~ ([digitsOfInt457'] -> α473') - digitsOfInt457', L: 0 [(α447' -> α450') ~ ([digitsOfInt457'] -> α473'), (α447' -> α450') <: sumList446', sumList446' <: ([digitsOfInt457'] -> α473')]], digitsOfInt457' :> (α458' -> α469')]

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.6    match explode x with
//│ │                 ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    match explode x with
//│                   ^^^^^^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.8        if (getHeads (explode x)) = []
//│ │                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.8        if (getHeads (explode x)) = []
//│                               ^^^^^^^
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.717:	  match explode x with
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.719:	      if (getHeads (explode x)) = []
//│ ╙──      	                    ^^^^^^^
//│ matchHeads: 'a -> bool
//│ U max: 20, total: 272
//│ UERR 2 errors
//│ L: 0 [err ~ ([α521'] -> α542'), err <: ([α521'] -> α542')]
//│ L: 0 [err ~ ([α521'] -> α522'), err <: ([α521'] -> α522')]

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ [ERROR] Type `err` does not match `_ list -> _`
//│ 
//│         (err) ---> (_ list -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                                                     ^^
//│ ▼ 
//│ ◉ (_ list -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                                                       ^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                      ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                        ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: String.length
//│ ║  
//│ ║  l.764:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	             ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: s.
//│ ║  
//│ ║  l.764:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	                                            ^^
//│ explode: 'b -> list['a]
//│ U max: 7, total: 73
//│ UERR 2 errors
//│ L: 0 [err ~ ([α582'] -> α586''), err <: ([α582'] -> α586'')]
//│ L: 0 [err ~ ([list['a590'']] -> α592''), err <: ([list['a590'']] -> α592'')]

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.807:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.7    | [] -> 0
//│                     ^
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]
//│ additivePersistence: 'a -> 'b
//│   where
//│     'b = bool, int
//│ U max: 6, total: 137
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α662', α662' <: α652', α652' :> int]


// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ [ERROR] Type `err` does not match `(_ * int) -> _`
//│ 
//│         (err) ---> ((_ * int) -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                           ^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.11       then buildSine build (rand, (d - 1))
//│                      ^^^^^^^^^^^^^^^
//│ [ERROR] Type `err` does not match `(_ * int) -> _`
//│ 
//│         (err) ---> ((_ * int) -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                             ^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.12       else buildCosine build (rand, (d - 1));;
//│                      ^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) -> _` does not match `err`
//│ 
//│         ((_ * _) -> _) ---> (?build) ---> (?a) <--- (?build) ---> (?b) ---> (err)
//│ 
//│ ◉ ((_ * _) -> _) comes from
//│ │  - l.5  let rec build (rand,depth) =
//│ │                       ^^^^^^^^^^^^^^
//│ │           let r = rand 0.4 in ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ ▼ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.11       then buildSine build (rand, (d - 1))
//│ │                              ^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                                ^
//│ ▼ 
//│ ◉ (err) comes from
//│    - l.-573  | Sine of expr
//│                        ^^^^
//│ buildCosine: err -> err
//│ buildSine: err -> err
//│ buildX: () -> err
//│ buildY: () -> err
//│ build: 'build
//│   where
//│     'build = (float -> int, int,) -> () -> err, (err,)
//│ U max: 3, total: 32
//│ UERR 3 errors
//│ L: 0 [err ~ (([[α668']], [[int]],) -> α677'), err <: (([[α668']], [[int]],) -> α677')]
//│ L: 0 [(([α668'], [α669'],) -> α671') ~ ([err],), (([α668'], [α669'],) -> α671') <: build667', build667' <: α678', α678' :> build667', build667' <: α676', α676' <: ([err],)]
//│ L: 0 [err ~ (([[α668']], [[int]],) -> α679'), err <: (([[α668']], [[int]],) -> α679')]

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ [ERROR] Type `_ -> _ list -> _ list` does not match `int`
//│ 
//│         (_ -> _ list -> _ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ -> _ list -> _ list) comes from
//│ │  - l.2  let x l = List.map string_of_int;;
//│ │               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                 ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                      ^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.3  let y = [1, 2, 3];;
//│ │                 ^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                  ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                     ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                             ^^^
//│ remainder: int -> int -> int
//│ x: 'a -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ mulByDigit: 'b -> list['a] -> list[int]
//│ U max: 7, total: 85
//│ UERR 2 errors
//│ L: 0 [list['a708'] ~ int, list['a708'] <: α703', α703' <: int]
//│ L: 0 [(α705' -> [(list[α706'] -> list[α707'])]) ~ int, (α705' -> [(list[α706'] -> list[α707'])]) <: α702', α702' <: int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                                                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a]
//│ padLength: list['a] -> list['b] -> int
//│ padZero: list[list[int]] -> list['a] -> list[list[int]]
//│ U max: 11, total: 195
//│ UERR 2 errors
//│ L: 2 [list['a760'] ~ ([α737'] -> α773'), list['a760'] <: α762', [α762' - (α764' -> α762') ~ ([int] -> α763') - α763', L: 1 [(α764' -> α762') ~ ([int] -> α763'), [(α764' -> α762') - (α759' -> (α764' -> α762')) ~ ([α759'] -> α765') - α765', L: 0 [(α759' -> (α764' -> α762')) ~ ([α759'] -> α765'), (α759' -> (α764' -> α762')) <: clone758', clone758' <: ([α759'] -> α765')]], α765' <: ([int] -> α763')]], [α763' - ([int] -> α763') ~ (α764' -> α762') - α762', L: 1 [([int] -> α763') ~ (α764' -> α762'), ([int] -> α763') :> α765', [α765' - ([α759'] -> α765') ~ ([int] -> α767') - α767', L: 0 [([α759'] -> α765') ~ ([int] -> α767'), ([α759'] -> α765') :> clone758', clone758' <: ([int] -> α767')]], [α767' - ([int] -> α767') ~ (α759' -> (α764' -> α762')) - (α764' -> α762'), L: 0 [([int] -> α767') ~ (α759' -> (α764' -> α762')), ([int] -> α767') :> clone758', clone758' :> (α759' -> (α764' -> α762'))]]]], [α762' - (α764' -> α762') ~ ([int] -> α763') - α763', L: 1 [(α764' -> α762') ~ ([int] -> α763'), [(α764' -> α762') - (α759' -> (α764' -> α762')) ~ ([int] -> α767') - α767', L: 0 [(α759' -> (α764' -> α762')) ~ ([int] -> α767'), (α759' -> (α764' -> α762')) <: clone758', clone758' <: ([int] -> α767')]], [α767' - ([int] -> α767') ~ ([α759'] -> α765') - α765', L: 0 [([int] -> α767') ~ ([α759'] -> α765'), ([int] -> α767') :> clone758', clone758' <: ([α759'] -> α765')]], α765' <: ([int] -> α763')]], [α763' - ([int] -> α763') ~ ([[int]] -> α772') - α772', L: 1 [([int] -> α763') ~ ([[int]] -> α772'), ([int] -> α763') :> α765', [α765' - ([α759'] -> α765') ~ ([int] -> α767') - α767', L: 0 [([α759'] -> α765') ~ ([int] -> α767'), ([α759'] -> α765') :> clone758', clone758' <: ([int] -> α767')]], α767' <: ([[int]] -> α772')]], α772' <: ([α737'] -> α773')]
//│ L: 2 [list['a761'] ~ ([α737'] -> α773'), list['a761'] <: α762', [α762' - (α764' -> α762') ~ ([int] -> α763') - α763', L: 1 [(α764' -> α762') ~ ([int] -> α763'), [(α764' -> α762') - (α759' -> (α764' -> α762')) ~ ([α759'] -> α765') - α765', L: 0 [(α759' -> (α764' -> α762')) ~ ([α759'] -> α765'), (α759' -> (α764' -> α762')) <: clone758', clone758' <: ([α759'] -> α765')]], α765' <: ([int] -> α763')]], [α763' - ([int] -> α763') ~ (α764' -> α762') - α762', L: 1 [([int] -> α763') ~ (α764' -> α762'), ([int] -> α763') :> α765', [α765' - ([α759'] -> α765') ~ ([int] -> α767') - α767', L: 0 [([α759'] -> α765') ~ ([int] -> α767'), ([α759'] -> α765') :> clone758', clone758' <: ([int] -> α767')]], [α767' - ([int] -> α767') ~ (α759' -> (α764' -> α762')) - (α764' -> α762'), L: 0 [([int] -> α767') ~ (α759' -> (α764' -> α762')), ([int] -> α767') :> clone758', clone758' :> (α759' -> (α764' -> α762'))]]]], [α762' - (α764' -> α762') ~ ([int] -> α763') - α763', L: 1 [(α764' -> α762') ~ ([int] -> α763'), [(α764' -> α762') - (α759' -> (α764' -> α762')) ~ ([int] -> α767') - α767', L: 0 [(α759' -> (α764' -> α762')) ~ ([int] -> α767'), (α759' -> (α764' -> α762')) <: clone758', clone758' <: ([int] -> α767')]], [α767' - ([int] -> α767') ~ ([α759'] -> α765') - α765', L: 0 [([int] -> α767') ~ ([α759'] -> α765'), ([int] -> α767') :> clone758', clone758' <: ([α759'] -> α765')]], α765' <: ([int] -> α763')]], [α763' - ([int] -> α763') ~ ([[int]] -> α772') - α772', L: 1 [([int] -> α763') ~ ([[int]] -> α772'), ([int] -> α763') :> α765', [α765' - ([α759'] -> α765') ~ ([int] -> α767') - α767', L: 0 [([α759'] -> α765') ~ ([int] -> α767'), ([α759'] -> α765') :> clone758', clone758' <: ([int] -> α767')]], α767' <: ([[int]] -> α772')]], α772' <: ([α737'] -> α773')]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> list[int]



// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1355  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ │                                            ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1346    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1355  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-1348  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1348  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-1348  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1348  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) comes from
//│      - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1355  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ -> _`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ -> _)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1349let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ list`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ list)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                                        ^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│   │                                         ^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                             ^^^^^^^^^^^^
//│     ◉ (_ -> ?a) comes from
//│     ▲  - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│     │                                         ^^^^^^^^^^
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) <--- (?a) ~~~~ (?b) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - lib. let List.rev: 'a list -> 'a list
//│ │                       ^^^^^^^
//│ │  - l.-397  match List.rev l with
//│ │                           ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.-398let rec mulByDigit i l =
//│                                 ^
//│   ◉ (?a -> _) comes from
//│      - l.-398let rec mulByDigit i l =
//│                                   ^^^
//│                match List.rev l with ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?a -> _) comes from
//│     │  - l.-398let rec mulByDigit i l =
//│     │                             ^^^^^
//│     │            match List.rev l with ...
//│     │            ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?e) is assumed for
//│   ◉ (?e -> _ -> ?e) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?e) is assumed for
//│   ◉ (?e -> _ -> ?e) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?c) <--- (?b) <--- (?a) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?d -> _ -> ?d) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1349let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1354  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1347    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1354  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1347    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1355  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1354  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1347    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1346    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1354  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1347    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.-1348  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1348  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1353  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1349let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1343  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1348  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1348  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1356let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1354  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1347    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1344    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1344    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1347    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1347    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.-1348  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1348  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1343  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1354  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) comes from
//│      - l.-1352  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.-1356let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1355  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ helper: int -> int
//│ tenEx: int -> list[int] -> list[int]
//│ bigMul: 'b -> list[int] -> list[int]
//│   where
//│     'b = list[int] -> list[('c, list['a],)], list['d]
//│ U max: 13, total: 367
//│ UERR 22 errors
//│ L: 0 [([α996'], [[[α852'']]],) ~ list[α857''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', α882'' <: list[α857'']]
//│ L: 2 [(α1030' -> α1040') ~ ([α1158'], [α1159'],), (α1030' -> α1040') <: α1027', α1027' <: α1028', α1028' <: α1026', [α1026' - (α1023' -> α1026') ~ (α1019' -> α1018') - α1018', L: 1 [(α1023' -> α1026') ~ (α1019' -> α1018'), [(α1023' -> α1026') - (α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')) - (α1019' -> α1018'), L: 0 [(α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')), (α1020' -> (α1023' -> α1026')) <: (α1018' -> (α1019' -> α1018'))]]]], α1018' <: ([α1158'], [α1159'],)]
//│ L: 3 [([α996'], [[[α852'']]],) ~ list[α924''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: α950'', [α950'' - ([[α950'']], [[α921'']],) ~ ([[list[α924'']]], [[α921'']],) - list[α924''], L: 2 [([[α950'']], [[α921'']],) ~ ([[list[α924'']]], [[α921'']],), ([[α950'']], [[α921'']],) <: α951'', α951'' <: α952'', [α952'' - (α955'' -> [α952'']) ~ (α956'' -> α953'') - α953'', L: 1 [(α955'' -> [α952'']) ~ (α956'' -> α953''), [(α955'' -> [α952'']) - (α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')) - (α956'' -> α953''), L: 0 [(α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')), (α954'' -> (α955'' -> [α952''])) <: (α953'' -> (α956'' -> α953''))]]]], [α953'' - (α956'' -> α953'') ~ (α955'' -> [α952'']) - α952'', L: 1 [(α956'' -> α953'') ~ (α955'' -> [α952'']), [(α956'' -> α953'') - (α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])) - (α955'' -> [α952'']), L: 0 [(α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])), (α953'' -> (α956'' -> α953'')) :> (α954'' -> (α955'' -> [α952'']))]]]], α952'' :> ([[list[α924'']]], [[α921'']],)]]]
//│ L: 3 [([α996'], [[[α852'']]],) ~ list[α881''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: α950'', [α950'' - ([[α950'']], [[α921'']],) ~ ([α922''], [α920''],) - α922'', L: 2 [([[α950'']], [[α921'']],) ~ ([α922''], [α920''],), ([[α950'']], [[α921'']],) <: α951'', α951'' <: α952'', [α952'' - (α955'' -> [α952'']) ~ (α956'' -> α953'') - α953'', L: 1 [(α955'' -> [α952'']) ~ (α956'' -> α953''), [(α955'' -> [α952'']) - (α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')) - (α956'' -> α953''), L: 0 [(α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')), (α954'' -> (α955'' -> [α952''])) <: (α953'' -> (α956'' -> α953''))]]]], α953'' <: ([α922''], [α920''],)]], [α922'' - ([α922''], [α920''],) ~ ([[α950'']], [[α921'']],) - α950'', L: 2 [([α922''], [α920''],) ~ ([[α950'']], [[α921'']],), ([α922''], [α920''],) :> α953'', [α953'' - (α956'' -> α953'') ~ (α955'' -> [α952'']) - α952'', L: 1 [(α956'' -> α953'') ~ (α955'' -> [α952'']), [(α956'' -> α953'') - (α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])) - (α955'' -> [α952'']), L: 0 [(α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])), (α953'' -> (α956'' -> α953'')) :> (α954'' -> (α955'' -> [α952'']))]]]], α952'' :> α951'', α951'' :> ([[α950'']], [[α921'']],)]], α950'' <: list[α881'']]
//│ L: 1 [([α996'], [[[α852'']]],) ~ list[α924''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: α950'', [α950'' - ([[α950'']], [[α921'']],) ~ ([[list[α924'']]], [[α921'']],) - list[α924''], L: 0 [([[α950'']], [[α921'']],) ~ ([[list[α924'']]], [[α921'']],), ([[α950'']], [[α921'']],) <: α951'', α951'' <: α952'', α952'' :> ([[list[α924'']]], [[α921'']],)]]]
//│ L: 0 [([α996'], [[[α852'']]],) ~ list[α858''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', α882'' <: list[α858'']]
//│ L: 2 [list['a1029'] ~ (α1030' -> α1040'), list['a1029'] <: α1027', α1027' <: α1028', α1028' <: α1026', [α1026' - (α1023' -> α1026') ~ (α1019' -> α1018') - α1018', L: 1 [(α1023' -> α1026') ~ (α1019' -> α1018'), [(α1023' -> α1026') - (α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')) - (α1019' -> α1018'), L: 0 [(α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')), (α1020' -> (α1023' -> α1026')) <: (α1018' -> (α1019' -> α1018'))]]]], [α1018' - (α1019' -> α1018') ~ (α1023' -> α1026') - α1026', L: 1 [(α1019' -> α1018') ~ (α1023' -> α1026'), [(α1019' -> α1018') - (α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')) - (α1023' -> α1026'), L: 0 [(α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')), (α1018' -> (α1019' -> α1018')) :> (α1020' -> (α1023' -> α1026'))]]]], α1026' :> α1028', α1028' :> α1027', α1027' :> (α1030' -> α1040')]
//│ L: 0 [(α981'' -> α919'') ~ list['a855''], (α981'' -> α919'') <: α853'', α853'' :> list['a855'']]
//│ L: 1 [([α996'], [[[α852'']]],) ~ list[α881''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: α950'', α950'' <: list[α881'']]
//│ L: 2 [([[int]], [[list['a1156']]],) ~ list['a1029'], ([[int]], [[list['a1156']]],) <: α1018', [α1018' - (α1019' -> α1018') ~ (α1023' -> α1026') - α1026', L: 1 [(α1019' -> α1018') ~ (α1023' -> α1026'), [(α1019' -> α1018') - (α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')) - (α1023' -> α1026'), L: 0 [(α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')), (α1018' -> (α1019' -> α1018')) :> (α1020' -> (α1023' -> α1026'))]]]], α1026' :> α1028', α1028' :> α1027', α1027' :> list['a1029']]
//│ L: 2 [list['a1029'] ~ ([α1021'], [α1022'],), list['a1029'] <: α1027', α1027' <: α1028', α1028' <: α1026', [α1026' - (α1023' -> α1026') ~ (α1019' -> α1018') - α1018', L: 1 [(α1023' -> α1026') ~ (α1019' -> α1018'), [(α1023' -> α1026') - (α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')) - (α1019' -> α1018'), L: 0 [(α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')), (α1020' -> (α1023' -> α1026')) <: (α1018' -> (α1019' -> α1018'))]]]], [α1018' - (α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')) - α1020', L: 0 [(α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')), (α1018' -> (α1019' -> α1018')) :> (α1020' -> (α1023' -> α1026'))]], α1020' <: ([α1021'], [α1022'],)]
//│ L: 2 [([[int]], [[list['a1156']]],) ~ (α1030' -> α1040'), ([[int]], [[list['a1156']]],) <: α1018', [α1018' - (α1019' -> α1018') ~ (α1023' -> α1026') - α1026', L: 1 [(α1019' -> α1018') ~ (α1023' -> α1026'), [(α1019' -> α1018') - (α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')) - (α1023' -> α1026'), L: 0 [(α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')), (α1018' -> (α1019' -> α1018')) :> (α1020' -> (α1023' -> α1026'))]]]], α1026' :> α1028', α1028' :> α1027', α1027' :> (α1030' -> α1040')]
//│ L: 1 [([α996'], [[[α852'']]],) ~ list[α857''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], [α883'' - ([α883''], [α923''],) ~ ([[α882'']], [[list[α884'']]],) - α882'', L: 0 [([α883''], [α923''],) ~ ([[α882'']], [[list[α884'']]],), ([α883''], [α923''],) :> α926'', α926'' :> α925'', α925'' :> ([[α882'']], [[list[α884'']]],)]], α882'' <: list[α857'']]
//│ L: 3 [([α996'], [[[α852'']]],) ~ list[α858''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: α950'', [α950'' - ([[α950'']], [[α921'']],) ~ ([α922''], [α920''],) - α922'', L: 2 [([[α950'']], [[α921'']],) ~ ([α922''], [α920''],), ([[α950'']], [[α921'']],) <: α951'', α951'' <: α952'', [α952'' - (α955'' -> [α952'']) ~ (α956'' -> α953'') - α953'', L: 1 [(α955'' -> [α952'']) ~ (α956'' -> α953''), [(α955'' -> [α952'']) - (α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')) - (α956'' -> α953''), L: 0 [(α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')), (α954'' -> (α955'' -> [α952''])) <: (α953'' -> (α956'' -> α953''))]]]], α953'' <: ([α922''], [α920''],)]], [α922'' - ([α922''], [α920''],) ~ ([[α950'']], [[α921'']],) - α950'', L: 2 [([α922''], [α920''],) ~ ([[α950'']], [[α921'']],), ([α922''], [α920''],) :> α953'', [α953'' - (α956'' -> α953'') ~ (α955'' -> [α952'']) - α952'', L: 1 [(α956'' -> α953'') ~ (α955'' -> [α952'']), [(α956'' -> α953'') - (α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])) - (α955'' -> [α952'']), L: 0 [(α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])), (α953'' -> (α956'' -> α953'')) :> (α954'' -> (α955'' -> [α952'']))]]]], α952'' :> α951'', α951'' :> ([[α950'']], [[α921'']],)]], α950'' :> α883'', [α883'' - ([α883''], [α923''],) ~ ([[list[α858'']]], [[α909'']],) - list[α858''], L: 0 [([α883''], [α923''],) ~ ([[list[α858'']]], [[α909'']],), ([α883''], [α923''],) :> α926'', α926'' :> ([[list[α858'']]], [[α909'']],)]]]
//│ L: 1 [([α996'], [[[α852'']]],) ~ list[α858''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], [α883'' - ([α883''], [α923''],) ~ ([[list[α858'']]], [[α909'']],) - list[α858''], L: 0 [([α883''], [α923''],) ~ ([[list[α858'']]], [[α909'']],), ([α883''], [α923''],) :> α926'', α926'' :> ([[list[α858'']]], [[α909'']],)]]]
//│ L: 2 [list[α986'] ~ (α1016' -> α1017'), list[α986'] :> α984', [α984' - (α984' -> α987') ~ ([α840'] -> α996') - α840', L: 1 [(α984' -> α987') ~ ([α840'] -> α996'), [(α984' -> α987') - (α983' -> (α984' -> α987')) ~ (['a854'] -> α995') - α995', L: 0 [(α983' -> (α984' -> α987')) ~ (['a854'] -> α995'), (α983' -> (α984' -> α987')) <: mulByDigit982', mulByDigit982' <: (['a854'] -> α995')]], α995' <: ([α840'] -> α996')]], α840' <: (α1016' -> α1017')]
//│ L: 3 [([α996'], [[[α852'']]],) ~ list[α857''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: α950'', [α950'' - ([[α950'']], [[α921'']],) ~ ([α922''], [α920''],) - α922'', L: 2 [([[α950'']], [[α921'']],) ~ ([α922''], [α920''],), ([[α950'']], [[α921'']],) <: α951'', α951'' <: α952'', [α952'' - (α955'' -> [α952'']) ~ (α956'' -> α953'') - α953'', L: 1 [(α955'' -> [α952'']) ~ (α956'' -> α953''), [(α955'' -> [α952'']) - (α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')) - (α956'' -> α953''), L: 0 [(α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')), (α954'' -> (α955'' -> [α952''])) <: (α953'' -> (α956'' -> α953''))]]]], α953'' <: ([α922''], [α920''],)]], [α922'' - ([α922''], [α920''],) ~ ([[α950'']], [[α921'']],) - α950'', L: 2 [([α922''], [α920''],) ~ ([[α950'']], [[α921'']],), ([α922''], [α920''],) :> α953'', [α953'' - (α956'' -> α953'') ~ (α955'' -> [α952'']) - α952'', L: 1 [(α956'' -> α953'') ~ (α955'' -> [α952'']), [(α956'' -> α953'') - (α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])) - (α955'' -> [α952'']), L: 0 [(α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])), (α953'' -> (α956'' -> α953'')) :> (α954'' -> (α955'' -> [α952'']))]]]], α952'' :> α951'', α951'' :> ([[α950'']], [[α921'']],)]], α950'' :> α883'', [α883'' - ([α883''], [α923''],) ~ ([[α882'']], [[list[α884'']]],) - α882'', L: 0 [([α883''], [α923''],) ~ ([[α882'']], [[list[α884'']]],), ([α883''], [α923''],) :> α926'', α926'' :> α925'', α925'' :> ([[α882'']], [[list[α884'']]],)]], α882'' <: list[α857'']]
//│ L: 2 [list['a985'] ~ (α1016' -> α1017'), [list['a985'] - ([list['a985']] -> α993') ~ ([α840'] -> α996') - α840', L: 1 [([list['a985']] -> α993') ~ ([α840'] -> α996'), ([list['a985']] -> α993') :> α994', [α994' - ([α983'] -> α994') ~ (['a854'] -> α995') - α995', L: 0 [([α983'] -> α994') ~ (['a854'] -> α995'), ([α983'] -> α994') :> mulByDigit982', mulByDigit982' <: (['a854'] -> α995')]], α995' <: ([α840'] -> α996')]], α840' <: (α1016' -> α1017')]
//│ L: 2 [(α1030' -> α1040') ~ ([α1021'], [α1022'],), (α1030' -> α1040') <: α1027', α1027' <: α1028', α1028' <: α1026', [α1026' - (α1023' -> α1026') ~ (α1019' -> α1018') - α1018', L: 1 [(α1023' -> α1026') ~ (α1019' -> α1018'), [(α1023' -> α1026') - (α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')) - (α1019' -> α1018'), L: 0 [(α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')), (α1020' -> (α1023' -> α1026')) <: (α1018' -> (α1019' -> α1018'))]]]], [α1018' - (α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')) - α1020', L: 0 [(α1018' -> (α1019' -> α1018')) ~ (α1020' -> (α1023' -> α1026')), (α1018' -> (α1019' -> α1018')) :> (α1020' -> (α1023' -> α1026'))]], α1020' <: ([α1021'], [α1022'],)]
//│ L: 1 [([α996'], [[[α852'']]],) ~ list[α927''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: list[α927'']]
//│ L: 2 [list['a1029'] ~ ([α1158'], [α1159'],), list['a1029'] <: α1027', α1027' <: α1028', α1028' <: α1026', [α1026' - (α1023' -> α1026') ~ (α1019' -> α1018') - α1018', L: 1 [(α1023' -> α1026') ~ (α1019' -> α1018'), [(α1023' -> α1026') - (α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')) - (α1019' -> α1018'), L: 0 [(α1020' -> (α1023' -> α1026')) ~ (α1018' -> (α1019' -> α1018')), (α1020' -> (α1023' -> α1026')) <: (α1018' -> (α1019' -> α1018'))]]]], α1018' <: ([α1158'], [α1159'],)]
//│ L: 3 [([α996'], [[[α852'']]],) ~ list[α927''], ([α996'], [[[α852'']]],) <: α856'', α856'' <: α882'', [α882'' - ([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],) - α883'', L: 0 [([[α882'']], [[list[α884'']]],) ~ ([α883''], [α923''],), ([[α882'']], [[list[α884'']]],) <: α925'', α925'' <: α926'', α926'' <: ([α883''], [α923''],)]], α883'' <: α950'', [α950'' - ([[α950'']], [[α921'']],) ~ ([α922''], [α920''],) - α922'', L: 2 [([[α950'']], [[α921'']],) ~ ([α922''], [α920''],), ([[α950'']], [[α921'']],) <: α951'', α951'' <: α952'', [α952'' - (α955'' -> [α952'']) ~ (α956'' -> α953'') - α953'', L: 1 [(α955'' -> [α952'']) ~ (α956'' -> α953''), [(α955'' -> [α952'']) - (α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')) - (α956'' -> α953''), L: 0 [(α954'' -> (α955'' -> [α952''])) ~ (α953'' -> (α956'' -> α953'')), (α954'' -> (α955'' -> [α952''])) <: (α953'' -> (α956'' -> α953''))]]]], α953'' <: ([α922''], [α920''],)]], [α922'' - ([α922''], [α920''],) ~ ([[α950'']], [[α921'']],) - α950'', L: 2 [([α922''], [α920''],) ~ ([[α950'']], [[α921'']],), ([α922''], [α920''],) :> α953'', [α953'' - (α956'' -> α953'') ~ (α955'' -> [α952'']) - α952'', L: 1 [(α956'' -> α953'') ~ (α955'' -> [α952'']), [(α956'' -> α953'') - (α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])) - (α955'' -> [α952'']), L: 0 [(α953'' -> (α956'' -> α953'')) ~ (α954'' -> (α955'' -> [α952''])), (α953'' -> (α956'' -> α953'')) :> (α954'' -> (α955'' -> [α952'']))]]]], α952'' :> α951'', α951'' :> ([[α950'']], [[α921'']],)]], α950'' :> α883'', α883'' <: list[α927'']]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ [ERROR] Type `_ -> _` does not match `_ * bool`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) <--- (?c) <--- (_ * bool)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                 ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.3  let rec wwhile (f,b) =
//│                           ^
//│   ◉ (?a * _) comes from
//│      - l.3  let rec wwhile (f,b) =
//│                            ^^^^^
//│     ◉ ((?a * _) -> _) comes from
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                        ^^^^^^^
//│     │           match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ (?wwhile) is assumed for
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ ((?b * _) -> _) comes from
//│        - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                    ^^^^^^
//│   ◉ (?b * _) comes from
//│      - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                         ^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * bool) comes from
//│    - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│                                                       ^^^^^^^^^^^
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b
//│ U max: 10, total: 58
//│ UERR 1 errors
//│ L: 2 [([α1192'] -> α1197') ~ ([[[α1200']]], [[bool]],), ([α1192'] -> α1197') :> α1191', [α1191' - ([α1191'], [α1192'],) ~ ([[α1202']], [[α1189']],) - α1202', L: 1 [([α1191'], [α1192'],) ~ ([[α1202']], [[α1189']],), [([α1191'], [α1192'],) - (([α1191'], [α1192'],) -> α1196') ~ (([[α1202']], [[α1189']],) -> α1204') - ([[α1202']], [[α1189']],), L: 0 [(([α1191'], [α1192'],) -> α1196') ~ (([[α1202']], [[α1189']],) -> α1204'), (([α1191'], [α1192'],) -> α1196') <: wwhile1190', wwhile1190' <: (([[α1202']], [[α1189']],) -> α1204')]]]], α1202' :> α1203', α1203' :> ([[[α1200']]], [[bool]],)]

// FIXME: no common provs
// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (?d) <--- (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                                                    ^^^^^^^
//│   ◉ ((_ * _) list) comes from
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a list) comes from
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.26     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?b list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?b) is assumed for
//│   ◉ (?b -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?c -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?c -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.16       if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.16       if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.16       if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.14     let f a x =
//│                       ^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     │  - l.14     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?c -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│   ◉ (?c -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?c -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 35, total: 551
//│ UERR 3 errors
//│ L: 2 [list['a1310''] ~ ([α1308''], [α1309''],), list['a1310''] <: α1311'', α1311'' :> α1307'', [α1307'' - (α1307'' -> α1312'') ~ (α1301'' -> α1300'') - α1301'', L: 1 [(α1307'' -> α1312'') ~ (α1301'' -> α1300''), [(α1307'' -> α1312'') - (α1302'' -> (α1307'' -> α1312'')) ~ (α1300'' -> (α1301'' -> α1300'')) - (α1301'' -> α1300''), L: 0 [(α1302'' -> (α1307'' -> α1312'')) ~ (α1300'' -> (α1301'' -> α1300'')), (α1302'' -> (α1307'' -> α1312'')) <: (α1300'' -> (α1301'' -> α1300''))]]]], [α1301'' - (α1301'' -> α1300'') ~ (α1307'' -> α1312'') - α1307'', L: 1 [(α1301'' -> α1300'') ~ (α1307'' -> α1312''), [(α1301'' -> α1300'') - (α1300'' -> (α1301'' -> α1300'')) ~ (α1302'' -> (α1307'' -> α1312'')) - (α1307'' -> α1312''), L: 0 [(α1300'' -> (α1301'' -> α1300'')) ~ (α1302'' -> (α1307'' -> α1312'')), (α1300'' -> (α1301'' -> α1300'')) :> (α1302'' -> (α1307'' -> α1312''))]]]], α1307'' <: ([α1308''], [α1309''],)]
//│ L: 0 [list['a1289'''] ~ ([α1293'''], [α1294'''],), list['a1289'''] <: α1288''', α1288''' :> α1284''', α1284''' <: ([α1293'''], [α1294'''],)]
//│ L: 2 [([α1298''], [α1299''],) ~ list['a1310''], [([α1298''], [α1299''],) - list[([α1298''], [α1299''],)] ~ list[α1316''] - α1316'', L: 0 [list[([α1298''], [α1299''],)] ~ list[α1316''], list[([α1298''], [α1299''],)] <: list[α1316'']]], [α1316'' - list[α1316''] ~ list[α1301''] - α1301'', L: 0 [list[α1316''] ~ list[α1301''], list[α1316''] <: list[α1301'']]], [α1301'' - (α1301'' -> α1300'') ~ (α1307'' -> α1312'') - α1307'', L: 1 [(α1301'' -> α1300'') ~ (α1307'' -> α1312''), [(α1301'' -> α1300'') - (α1300'' -> (α1301'' -> α1300'')) ~ (α1302'' -> (α1307'' -> α1312'')) - (α1307'' -> α1312''), L: 0 [(α1300'' -> (α1301'' -> α1300'')) ~ (α1302'' -> (α1307'' -> α1312'')), (α1300'' -> (α1301'' -> α1300'')) :> (α1302'' -> (α1307'' -> α1312''))]]]], α1307'' <: α1311'', α1311'' :> list['a1310'']]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.15     let base = 0 in
//│ │                        ^
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?a) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.14     let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.14     let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?a -> _ -> int) comes from
//│   │  - l.14     let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.17     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│    - l.14     let f a x = (a + x) mod 10 in
//│                           ^^^^^^^^^^^^^^
//│    - lib. let mod: int -> int -> int
//│                                  ^^^
//│   ◉ (_ -> int) comes from
//│      - l.14     let f a x = (a + x) mod 10 in
//│                         ^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> int) comes from
//│     │  - l.14     let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.17     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 63, total: 556
//│ UERR 3 errors
//│ L: 0 [int ~ ([α1478''], [α1479''],), int <: α1471'', α1471'' <: ([α1478''], [α1479''],)]
//│ L: 2 [int ~ ([α1478''], [α1479''],), [int - (α1474'' -> [int]) ~ (α1472'' -> α1471'') - α1471'', L: 1 [(α1474'' -> [int]) ~ (α1472'' -> α1471''), [(α1474'' -> [int]) - (α1473'' -> (α1474'' -> [int])) ~ (α1471'' -> (α1472'' -> α1471'')) - (α1472'' -> α1471''), L: 0 [(α1473'' -> (α1474'' -> [int])) ~ (α1471'' -> (α1472'' -> α1471'')), (α1473'' -> (α1474'' -> [int])) <: (α1471'' -> (α1472'' -> α1471''))]]]], α1471'' <: ([α1478''], [α1479''],)]
//│ L: 1 [int ~ ([α1478''], [α1479''],), int :> α1473'', [α1473'' - (α1473'' -> (α1474'' -> [int])) ~ (α1471'' -> (α1472'' -> α1471'')) - α1471'', L: 0 [(α1473'' -> (α1474'' -> [int])) ~ (α1471'' -> (α1472'' -> α1471'')), (α1473'' -> (α1474'' -> [int])) <: (α1471'' -> (α1472'' -> α1471''))]], α1471'' <: ([α1478''], [α1479''],)]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ [ERROR] Type `_ * _` does not match `_ -> (_ * bool)`
//│ 
//│         (_ * _) <--- (?a) ~~~~ (_ -> (_ * bool))
//│ 
//│ ◉ (_ * _) comes from
//│ ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                             ^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│                    ^^^
//│   ◉ (_ -> ?a) comes from
//│   ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.-352let rec wwhile (f,b) =
//│                              ^
//│     ◉ (?b * _) comes from
//│        - l.-352let rec wwhile (f,b) =
//│                               ^^^^^
//│       ◉ ((?b * _) -> _) comes from
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                         ^^^^^^^
//│       │            match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ (?wwhile) is assumed for
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ ((_ -> _ -> (_ * bool) * _) -> _) comes from
//│          - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                      ^^^^^^
//│     ◉ (_ -> _ -> (_ * bool) * _) comes from
//│        - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                           ^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> (_ * bool)) comes from
//│      - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                          ^^^^^^^^
//│      - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ -> (_ * bool)) comes from
//│    - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^
//│ intboolf: ('a -> int) -> 'a -> (int, bool,)
//│ fixpoint: ('a, 'b,) -> 'b
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ U max: 10, total: 70
//│ UERR 1 errors
//│ L: 3 [([α1556'], [α1561'],) ~ (α1563' -> ([α1566'], [[bool]],)), ([α1556'], [α1561'],) :> α1560', [α1560' - ([α1555'] -> α1560') ~ (α1562' -> (α1563' -> ([α1566'], [[bool]],))) - (α1563' -> ([α1566'], [[bool]],)), L: 2 [([α1555'] -> α1560') ~ (α1562' -> (α1563' -> ([α1566'], [[bool]],))), ([α1555'] -> α1560') :> α1554', [α1554' - ([α1554'], [α1555'],) ~ ([[(α1562' -> (α1563' -> ([α1566'], [[bool]],)))]], [[α1552']],) - (α1562' -> (α1563' -> ([α1566'], [[bool]],))), L: 1 [([α1554'], [α1555'],) ~ ([[(α1562' -> (α1563' -> ([α1566'], [[bool]],)))]], [[α1552']],), [([α1554'], [α1555'],) - (([α1554'], [α1555'],) -> α1559') ~ (([[(α1562' -> (α1563' -> ([α1566'], [[bool]],)))]], [[α1552']],) -> α1567') - ([[(α1562' -> (α1563' -> ([α1566'], [[bool]],)))]], [[α1552']],), L: 0 [(([α1554'], [α1555'],) -> α1559') ~ (([[(α1562' -> (α1563' -> ([α1566'], [[bool]],)))]], [[α1552']],) -> α1567'), (([α1554'], [α1555'],) -> α1559') <: wwhile1553', wwhile1553' <: (([[(α1562' -> (α1563' -> ([α1566'], [[bool]],)))]], [[α1552']],) -> α1567')]]]]]]]



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a] -> 'b
//│   where
//│     'b = 'b -> 'b, ('c -> 'c) -> 'c -> 'c
//│     'a = 'a -> 'a, ('c -> 'c) -> 'c -> 'c
//│     'c = 'c -> 'c



// file 830
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│ │                                                    ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                         ^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                      ^^^^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                                                                     ^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (?sumList) is assumed for
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (_ -> ?a) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                   ^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ │                                               ^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                 ^^^^^^^^^^
//│ modulus: int -> int
//│ digitsOfInt: int -> list[int]
//│ lt10: int -> bool
//│ sumList: list[int] -> int
//│ additivePersistence: int -> int
//│ U max: 9, total: 157
//│ UERR 1 errors
//│ L: 1 [int ~ ([additivePersistence1622'] -> α1658'), int <: α1643', [α1643' - (α1641' -> α1643') ~ ([list['a1642']] -> α1644') - α1644', L: 0 [(α1641' -> α1643') ~ ([list['a1642']] -> α1644'), (α1641' -> α1643') <: sumList1640', sumList1640' <: ([list['a1642']] -> α1644')]], [α1644' - ([list['a1642']] -> α1644') ~ (α1641' -> α1643') - α1643', L: 0 [([list['a1642']] -> α1644') ~ (α1641' -> α1643'), ([list['a1642']] -> α1644') :> sumList1640', sumList1640' :> (α1641' -> α1643')]], [α1643' - (α1641' -> α1643') ~ ([α1645'] -> α1657') - α1657', L: 0 [(α1641' -> α1643') ~ ([α1645'] -> α1657'), (α1641' -> α1643') <: sumList1640', sumList1640' <: ([α1645'] -> α1657')]], α1657' <: ([additivePersistence1622'] -> α1658')]


// FIXME investigate
// file 1770 (TODO fix nested flows)
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                           ^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                             ^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ~~~~ (?a) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│    - l.1  let rec filter l a =
//│                            ^^^
//│             match l with ...
//│             ^^^^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> _) comes from
//│   │  - l.1  let rec filter l a =
//│   │                        ^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?a) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                   ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?c) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                                         ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                       ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?a) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?c) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ filter: list['a] -> 'b -> list['b]
//│ removeDuplicates: list[list['a]] -> list['a]
//│ U max: 18, total: 218
//│ UERR 4 errors
//│ L: 0 [list['a1683''] ~ (['a1683''] -> α1698'''), list['a1683''] <: (['a1683''] -> α1698''')]
//│ L: 1 [([α1692'''] -> α1690''') ~ list['a1684''], ([α1692'''] -> α1690''') :> α1694''', [α1694''' - ([list['a1687''']] -> α1694''') ~ ([list['a1687''']] -> α1696''') - α1696''', L: 0 [([list['a1687''']] -> α1694''') ~ ([list['a1687''']] -> α1696'''), ([list['a1687''']] -> α1694''') :> filter1685''', filter1685''' <: ([list['a1687''']] -> α1696''')]], [α1696''' - ([list['a1687''']] -> α1696''') ~ ([list['a1687''']] -> α1694''') - α1694''', L: 0 [([list['a1687''']] -> α1696''') ~ ([list['a1687''']] -> α1694'''), ([list['a1687''']] -> α1696''') :> filter1685''', filter1685''' <: ([list['a1687''']] -> α1694''')]], [α1694''' - ([list['a1687''']] -> α1694''') ~ (α1698''' -> α1699''') - α1699''', L: 0 [([list['a1687''']] -> α1694''') ~ (α1698''' -> α1699'''), ([list['a1687''']] -> α1694''') :> filter1685''', filter1685''' <: (α1698''' -> α1699''')]], [α1699''' - ([['a1683'']], [α1699'''],) ~ ('a1684'', list['a1684''],) - list['a1684''], L: 0 [([['a1683'']], [α1699'''],) ~ ('a1684'', list['a1684''],), ([['a1683'']], [α1699'''],) <: ('a1684'', list['a1684''],)]]]
//│ L: 1 [(α1692''' -> α1695''') ~ list['a1684''], [(α1692''' -> α1695''') - (α1686''' -> (α1692''' -> α1695''')) ~ (α1698''' -> α1699''') - α1699''', L: 0 [(α1686''' -> (α1692''' -> α1695''')) ~ (α1698''' -> α1699'''), (α1686''' -> (α1692''' -> α1695''')) <: filter1685''', filter1685''' <: (α1698''' -> α1699''')]], [α1699''' - ([['a1683'']], [α1699'''],) ~ ('a1684'', list['a1684''],) - list['a1684''], L: 0 [([['a1683'']], [α1699'''],) ~ ('a1684'', list['a1684''],), ([['a1683'']], [α1699'''],) <: ('a1684'', list['a1684''],)]]]
//│ L: 1 [([α1692'''] -> α1691''') ~ list['a1684''], ([α1692'''] -> α1691''') :> α1696''', [α1696''' - ([list['a1687''']] -> α1696''') ~ ([list['a1687''']] -> α1694''') - α1694''', L: 0 [([list['a1687''']] -> α1696''') ~ ([list['a1687''']] -> α1694'''), ([list['a1687''']] -> α1696''') :> filter1685''', filter1685''' <: ([list['a1687''']] -> α1694''')]], [α1694''' - ([list['a1687''']] -> α1694''') ~ (α1698''' -> α1699''') - α1699''', L: 0 [([list['a1687''']] -> α1694''') ~ (α1698''' -> α1699'''), ([list['a1687''']] -> α1694''') :> filter1685''', filter1685''' <: (α1698''' -> α1699''')]], [α1699''' - ([['a1683'']], [α1699'''],) ~ ('a1684'', list['a1684''],) - list['a1684''], L: 0 [([['a1683'']], [α1699'''],) ~ ('a1684'', list['a1684''],), ([['a1683'']], [α1699'''],) <: ('a1684'', list['a1684''],)]]]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> 'b) -> 'a -> ('a -> 'b, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ [ERROR] Type `_ * _ * _` does not match `_ -> _`
//│ 
//│         (?a * _ * _) ~~~~ (?a) ---> (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (?a * _ * _) comes from
//│    - l.1  let rec assoc (d,k,l) =
//│                         ^^^^^^^
//│   ◉ ((?a * _ * _) -> ?b) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.1  let rec assoc (d,k,l) =
//│ │                        ^
//│ │  - l.3    | [] -> d
//│ │                   ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.2    match l with
//│             ^^^^^^^^^^^^
//│             | [] -> d ...
//│             ^^^^^^^^^^^^^
//│   ◉ ((?a * _ * _) -> ?b) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ │                                                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                               ^^^^^^^
//│ assoc: 'assoc
//│   where
//│     'assoc = (('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],), 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,), ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,)
//│     'b = ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],)
//│     'a = ('d, 'a -> ('b, 'c, 'e,),)
//│     'e = list[('d, 'a -> ('b, 'c, 'e,),)]
//│ U max: 10, total: 35
//│ UERR 1 errors
//│ L: 1 [([α1768'], [α1769'], [α1770'],) ~ ([α1769'] -> α1780'), [([α1768'], [α1769'], [α1770'],) - (([α1768'], [α1769'], [α1770'],) -> α1771') ~ ([α1768'] -> α1779') - α1768', L: 0 [(([α1768'], [α1769'], [α1770'],) -> α1771') ~ ([α1768'] -> α1779'), (([α1768'], [α1769'], [α1770'],) -> α1771') <: assoc1767', assoc1767' <: ([α1768'] -> α1779')]], α1768' <: α1771', [α1771' - (([α1768'], [α1769'], [α1770'],) -> α1771') ~ ([α1768'] -> α1779') - α1779', L: 0 [(([α1768'], [α1769'], [α1770'],) -> α1771') ~ ([α1768'] -> α1779'), (([α1768'], [α1769'], [α1770'],) -> α1771') <: assoc1767', assoc1767' <: ([α1768'] -> α1779')]], α1779' <: ([α1769'] -> α1780')]
