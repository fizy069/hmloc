:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (?a -> _ -> ?a) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   │ 
//│   ◉ (?b -> _ -> _) is here
//│      - l.13     let f a x = padZero l1 l2 in
//│                       ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> _ -> _) is here
//│   │  - l.13     let f a x = padZero l1 l2 in
//│   │                   ^^^^^^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?a -> _ -> ?a) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ list * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (_ list * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list * _) is here
//│    - l.7    then (((clone 0 (-1 * diff)) @ l1), l2)
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _ list`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _ list)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _ list) is here
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _) is here
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                    ^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) ---> (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.6    if diff < 0
//│             ^^^^^^^^^^^
//│             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) is here
//│     │  - l.13     let f a x = padZero l1 l2 in
//│     │                   ^^^^^^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ cloneHelper: 'a -> int -> list['a] -> list['a]
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a], list['a0]
//│ padZero: list['a] -> list['b] -> (list['a], list['b],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list['a] -> 'b -> list[int]
//│   where
//│     'b = list[int], list['c]
//│ U max: 33, total: 666
//│ UERR 6 errors
//│ L: 2 [list[([α264''], [α265''],)] ~ ([α279''], [α280''],), list[([α264''], [α265''],)] <: α270'', [α270'' - (α271'' -> α270'') ~ (α273'' -> [α217'']) - α217'', L: 1 [(α271'' -> α270'') ~ (α273'' -> [α217'']), [(α271'' -> α270'') - (α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])) - (α273'' -> [α217'']), L: 0 [(α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])), (α270'' -> (α271'' -> α270'')) :> (α272'' -> (α273'' -> [α217'']))]]]], α217'' :> α216'', α216'' <: α217'', [α217'' - (α273'' -> [α217'']) ~ (α271'' -> α270'') - α270'', L: 1 [(α273'' -> [α217'']) ~ (α271'' -> α270''), [(α273'' -> [α217'']) - (α272'' -> (α273'' -> [α217''])) ~ (α270'' -> (α271'' -> α270'')) - (α271'' -> α270''), L: 0 [(α272'' -> (α273'' -> [α217''])) ~ (α270'' -> (α271'' -> α270'')), (α272'' -> (α273'' -> [α217''])) <: (α270'' -> (α271'' -> α270''))]]]], α270'' <: ([α279''], [α280''],)]
//│ L: 2 [list[([α264''], [α265''],)] ~ ([[α210'']], [[list[α214'']]],), list[([α264''], [α265''],)] <: α270'', [α270'' - (α271'' -> α270'') ~ (α273'' -> [α217'']) - α217'', L: 1 [(α271'' -> α270'') ~ (α273'' -> [α217'']), [(α271'' -> α270'') - (α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])) - (α273'' -> [α217'']), L: 0 [(α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])), (α270'' -> (α271'' -> α270'')) :> (α272'' -> (α273'' -> [α217'']))]]]], α217'' :> α216'', α216'' :> ([[α210'']], [[list[α214'']]],)]
//│ L: 2 [list[([α264''], [α265''],)] ~ ([[list[α211'']]], [[α213'']],), list[([α264''], [α265''],)] <: α270'', [α270'' - (α271'' -> α270'') ~ (α273'' -> [α217'']) - α217'', L: 1 [(α271'' -> α270'') ~ (α273'' -> [α217'']), [(α271'' -> α270'') - (α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])) - (α273'' -> [α217'']), L: 0 [(α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])), (α270'' -> (α271'' -> α270'')) :> (α272'' -> (α273'' -> [α217'']))]]]], α217'' :> ([[list[α211'']]], [[α213'']],)]
//│ L: 1 [list[([α264''], [α265''],)] ~ ([α279''], [α280''],), list[([α264''], [α265''],)] <: α270'', [α270'' - (α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])) - α272'', L: 0 [(α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])), (α270'' -> (α271'' -> α270'')) :> (α272'' -> (α273'' -> [α217'']))]], [α272'' - (α272'' -> (α273'' -> [α217''])) ~ (α270'' -> (α271'' -> α270'')) - α270'', L: 0 [(α272'' -> (α273'' -> [α217''])) ~ (α270'' -> (α271'' -> α270'')), (α272'' -> (α273'' -> [α217''])) <: (α270'' -> (α271'' -> α270''))]], α270'' <: ([α279''], [α280''],)]
//│ L: 2 [list[([α264''], [α265''],)] ~ ([[α210'']], [[α213'']],), list[([α264''], [α265''],)] <: α270'', [α270'' - (α271'' -> α270'') ~ (α273'' -> [α217'']) - α217'', L: 1 [(α271'' -> α270'') ~ (α273'' -> [α217'']), [(α271'' -> α270'') - (α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])) - (α273'' -> [α217'']), L: 0 [(α270'' -> (α271'' -> α270'')) ~ (α272'' -> (α273'' -> [α217''])), (α270'' -> (α271'' -> α270'')) :> (α272'' -> (α273'' -> [α217'']))]]]], α217'' :> α216'', α216'' :> ([[α210'']], [[α213'']],)]
//│ L: 0 [list[([α264''], [α265''],)] ~ ([α279''], [α280''],), list[([α264''], [α265''],)] <: α270'', α270'' <: ([α279''], [α280''],)]

// file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ [ERROR] Type `int` does not match `float`
//│ 
//│         (int) ---> (float)
//│ 
//│ ◉ (int) is here
//│ │  - l.16   | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ │                                                                           ^
//│ ▼ 
//│ ◉ (float) is here
//│    - lib. let ( /. ): float -> float -> float
//│                                ^^^^^
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ eval: (expr, float, float,) -> float
//│ U max: 14, total: 193
//│ UERR 1 errors
//│ L: 0 [int ~ float, int <: float]

// FIXME file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (int) is here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) is here
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) is here
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed here
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (?c -> ?d -> ?c) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) is here
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 31
//│ UERR 1 errors
//│ L: 2 [int ~ list['a491'], int <: α492', [α492' - (α490' -> α492') ~ (α488' -> α487') - α487', L: 1 [(α490' -> α492') ~ (α488' -> α487'), [(α490' -> α492') - (α489' -> (α490' -> α492')) ~ (α487' -> (α488' -> α487')) - (α488' -> α487'), L: 0 [(α489' -> (α490' -> α492')) ~ (α487' -> (α488' -> α487')), (α489' -> (α490' -> α492')) <: (α487' -> (α488' -> α487'))]]]], α487' :> α485', [α485' - list[α485'] ~ list[α488'] - α488', L: 0 [list[α485'] ~ list[α488'], list[α485'] :> α480', α480' <: list[α488']]], [α488' - (α488' -> α487') ~ (α490' -> α492') - α490', L: 1 [(α488' -> α487') ~ (α490' -> α492'), [(α488' -> α487') - (α487' -> (α488' -> α487')) ~ (α489' -> (α490' -> α492')) - (α490' -> α492'), L: 0 [(α487' -> (α488' -> α487')) ~ (α489' -> (α490' -> α492')), (α487' -> (α488' -> α487')) :> (α489' -> (α490' -> α492'))]]]], α490' <: list['a491']]


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ [ERROR] Type `_ list` does not match `(_ -> _) -> _ list -> _ list`
//│ 
//│         (_ list) <--- (?a) ~~~~ ((_ -> _) -> _ list -> _ list)
//│ 
//│ ◉ (_ list) is here
//│ ▲  - l.3    | [] -> ""
//│ │             ^^
//│ │  - l.2    match sl with
//│ │                 ^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.1  let rec sepConcat sep sl =
//│                                 ^^
//│     ◉ (_ -> ?a -> _) is here
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed here
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?b) is here
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> _) is here
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ [ERROR] Type `string` does not match `(_ * _) -> _`
//│ 
//│         (string) <--- (?a) ~~~~ (?b) ---> (?c) ~~~~ (?d) ---> ((_ * _) -> _)
//│ 
//│ ◉ (string) is here
//│ ▲  - lib. let (^): string -> string -> string
//│ │                  ^^^^^^
//│ │  - l.5        let f a x = a ^ (sep ^ x) in
//│ │                           ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.5        let f a x = a ^ (sep ^ x) in
//│                       ^
//│   ◉ (?a -> _ -> string) is here
//│   │  - l.5        let f a x = a ^ (sep ^ x) in
//│   │                     ^^^^^^^^^^^^^^^^^^^
//│   │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│   │                                                           ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│ │                                            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.2    match sl with
//│             ^^^^^^^^^^^^^
//│             | [] -> "" ...
//│             ^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed here
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?d) is here
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?d) is assumed here
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> ?e) is here
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * _) -> _) is here
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ sepConcat: string -> list[string] -> string
//│ stringOfList: 'a -> 'b -> string
//│ U max: 7, total: 76
//│ UERR 2 errors
//│ L: 2 [string ~ (([[α516']], [[α517']],) -> α535'), string :> α526', [α526' - (α526' -> (α524' -> [string])) ~ (α525' -> (α523' -> α525')) - α525', L: 0 [(α526' -> (α524' -> [string])) ~ (α525' -> (α523' -> α525')), (α526' -> (α524' -> [string])) <: (α525' -> (α523' -> α525'))]], α525' <: α527', [α527' - (α521' -> α527') ~ ([((α530' -> α531') -> (list[α530'] -> list[α531']))] -> α533') - α533', L: 1 [(α521' -> α527') ~ ([((α530' -> α531') -> (list[α530'] -> list[α531']))] -> α533'), [(α521' -> α527') - (α520' -> (α521' -> α527')) ~ (string -> α529') - α529', L: 0 [(α520' -> (α521' -> α527')) ~ (string -> α529'), (α520' -> (α521' -> α527')) <: sepConcat519', sepConcat519' <: (string -> α529')]], α529' <: ([((α530' -> α531') -> (list[α530'] -> list[α531']))] -> α533')]], α533' <: (([[α516']], [[α517']],) -> α535')]
//│ L: 2 [list['a522'] ~ ((α530' -> α531') -> (list[α530'] -> list[α531'])), list['a522'] :> α521', [α521' - (α521' -> α527') ~ ([((α530' -> α531') -> (list[α530'] -> list[α531']))] -> α533') - ((α530' -> α531') -> (list[α530'] -> list[α531'])), L: 1 [(α521' -> α527') ~ ([((α530' -> α531') -> (list[α530'] -> list[α531']))] -> α533'), [(α521' -> α527') - (α520' -> (α521' -> α527')) ~ (string -> α529') - α529', L: 0 [(α520' -> (α521' -> α527')) ~ (string -> α529'), (α520' -> (α521' -> α527')) <: sepConcat519', sepConcat519' <: (string -> α529')]], α529' <: ([((α530' -> α531') -> (list[α530'] -> list[α531']))] -> α533')]]]

// FIXME string indexing - Array types not supported
// file 2376
let getHead h = match h with | [] -> [] | h::t -> h;;
let getTail t = match t with | [] -> [] | h::t -> t;;
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let rec matchHeads x y =
  match x with
  | [] -> true
  | h::t ->
      if (getHead x) = (getHead y) then matchHeads t (getTail y) else false;;
let explode s =
  let rec go i =
    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
  go 0;;
let palindrome w =
  match explode w with
  | [] -> true
  | h::t -> matchHeads (explode w) (listReverse (explode w));;
//│ /!!!\ Uncaught error: scala.MatchError: undefined (of class mlscript.TyperDatatypes$TypeRef)


// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ~~~~ (?digitsOfInt) <--- (_ -> _)
//│ 
//│   ◉ (_ list -> _) is here
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed here
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?a) is here
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed here
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) is here
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) is here
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│   ◉ (?c -> _) is here
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed here
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt -> _) is here
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?digitsOfInt) is assumed here
//│ ▲  - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│ │                 ^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) is here
//│    - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ~~~~ (?a) ---> (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ -> _)
//│ 
//│   ◉ (int -> ?a) is here
//│   ▲  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^
//│   │  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?sumListHelper) is assumed here
//│   ▲  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b -> _ -> ?c) is here
//│      - l.1  let rec sumListHelper total xs =
//│                                   ^^^^^^^^^^
//│               match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.1  let rec sumListHelper total xs =
//│ │                               ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │                                 ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ list -> ?d) is here
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?e) is assumed here
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?e) is here
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed here
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) is here
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?a) is assumed here
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?f) is here
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?f) is here
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed here
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?g) is here
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?g) is assumed here
//│ │  - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│ │                                         ^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                           ^^^^^^^^^^^^^^^^^^^
//│ sumListHelper: int -> list[int] -> int
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> list[int]
//│ sumList: list[int] -> int
//│ additivePersistence: 'a -> 'b
//│ U max: 29, total: 492
//│ UERR 2 errors
//│ L: 2 [int ~ ([α683'] -> α714'), [int - (int -> α693') ~ (α689' -> (α686' -> α687')) - α689', L: 0 [(int -> α693') ~ (α689' -> (α686' -> α687')), (int -> α693') :> sumListHelper694', sumListHelper694' :> (α689' -> (α686' -> α687'))]], α689' <: α687', α687' :> α690', [α690' - ([list['a691']] -> α690') ~ ([α685'] -> α688') - α688', L: 1 [([list['a691']] -> α690') ~ ([α685'] -> α688'), ([list['a691']] -> α690') :> α692', [α692' - ([int] -> α692') ~ (int -> α693') - α693', L: 0 [([int] -> α692') ~ (int -> α693'), ([int] -> α692') :> sumListHelper694', sumListHelper694' <: (int -> α693')]], α693' <: ([α685'] -> α688')]], [α688' - (α685' -> α688') ~ ([digitsOfInt695'] -> α712') - α712', L: 0 [(α685' -> α688') ~ ([digitsOfInt695'] -> α712'), (α685' -> α688') <: sumList684', sumList684' <: ([digitsOfInt695'] -> α712')]], α712' <: ([α683'] -> α714')]
//│ L: 2 [list['a691'] ~ (α696' -> α707'), [list['a691'] - ([list['a691']] -> α690') ~ ([α685'] -> α688') - α685', L: 1 [([list['a691']] -> α690') ~ ([α685'] -> α688'), ([list['a691']] -> α690') :> α692', [α692' - ([int] -> α692') ~ (int -> α693') - α693', L: 0 [([int] -> α692') ~ (int -> α693'), ([int] -> α692') :> sumListHelper694', sumListHelper694' <: (int -> α693')]], α693' <: ([α685'] -> α688')]], [α685' - (α685' -> α688') ~ ([digitsOfInt695'] -> α712') - digitsOfInt695', L: 0 [(α685' -> α688') ~ ([digitsOfInt695'] -> α712'), (α685' -> α688') <: sumList684', sumList684' <: ([digitsOfInt695'] -> α712')]], digitsOfInt695' :> (α696' -> α707')]

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.6    match explode x with
//│ │                 ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.6    match explode x with
//│                   ^^^^^^^
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.8        if (getHeads (explode x)) = []
//│ │                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.8        if (getHeads (explode x)) = []
//│                               ^^^^^^^
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.675:	  match explode x with
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.677:	      if (getHeads (explode x)) = []
//│ ╙──      	                    ^^^^^^^
//│ matchHeads: 'a -> bool
//│ U max: 20, total: 272
//│ UERR 2 errors
//│ L: 0 [error<> ~ ([α768'] -> α770'), error<> <: ([α768'] -> α770')]
//│ L: 0 [error<> ~ ([α768'] -> α791'), error<> <: ([α768'] -> α791')]

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ /!!!\ Uncaught error: scala.MatchError: undefined (of class mlscript.TyperDatatypes$TypeRef)

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.731:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.-20    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                      ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.-20    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                        ^^^^^^^^^^^^^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.7    | [] -> 0
//│                     ^
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]
//│ additivePersistence: 'a -> 'b
//│   where
//│     'b = bool, int
//│ U max: 6, total: 144
//│ UERR 2 errors
//│ L: 0 [bool ~ int, bool <: α926', α926' <: α912', α912' :> int]
//│ L: 0 [error<> ~ ([α840'] -> α846''), error<> <: ([α840'] -> α846'')]


// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) is here
//│ │  - l.-538  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                           ^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) is here
//│    - l.11       then buildSine build (rand, (d - 1))
//│                      ^^^^^^^^^^^^^^^
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) is here
//│ │  - l.-538  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                             ^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) is here
//│    - l.12       else buildCosine build (rand, (d - 1));;
//│                      ^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) -> _` does not match `expr`
//│ 
//│         ((_ * _) -> _) ---> (?build) ---> (?a) <--- (?build) ---> (?b) ---> (expr)
//│ 
//│ ◉ ((_ * _) -> _) is here
//│ │  - l.5  let rec build (rand,depth) =
//│ │                       ^^^^^^^^^^^^^^
//│ │           let r = rand 0.4 in ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ ▼ 
//│ ◉ (?build) is assumed here
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │ 
//│ ◉ (?build) is assumed here
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.11       then buildSine build (rand, (d - 1))
//│ │                              ^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                                ^
//│ ▼ 
//│ ◉ (expr) is here
//│    - l.-542  | Sine of expr
//│                        ^^^^
//│ buildCosine: expr -> expr
//│ buildSine: expr -> expr
//│ buildX: () -> expr
//│ buildY: () -> expr
//│ build: 'build
//│   where
//│     'build = (float -> int, int,) -> () -> expr, expr
//│ U max: 3, total: 31
//│ UERR 3 errors
//│ L: 0 [expr ~ (([[α934']], [[int]],) -> α954'), expr <: (([[α934']], [[int]],) -> α954')]
//│ L: 0 [(([α934'], [α935'],) -> α938') ~ expr, (([α934'], [α935'],) -> α938') <: build933', build933' <: α955', α955' :> build933', build933' <: α949', α949' <: expr]
//│ L: 0 [expr ~ (([[α934']], [[int]],) -> α960'), expr <: (([[α934']], [[int]],) -> α960')]

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ [ERROR] Type `_ -> _ list -> _ list` does not match `int`
//│ 
//│         (_ -> _ list -> _ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ -> _ list -> _ list) is here
//│ │  - l.2  let x l = List.map string_of_int;;
//│ │               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                 ^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let ( * ): int -> int -> int
//│                      ^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.3  let y = [1, 2, 3];;
//│ │                 ^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                  ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                     ^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let ( * ): int -> int -> int
//│                             ^^^
//│ remainder: int -> int -> int
//│ x: 'a -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ mulByDigit: 'b -> list['a] -> list[int]
//│ U max: 7, total: 85
//│ UERR 2 errors
//│ L: 0 [list['a1001'] ~ int, list['a1001'] <: α995', α995' <: int]
//│ L: 0 [(α997' -> [(list[α998'] -> list[α999'])]) ~ int, (α997' -> [(list[α998'] -> list[α999'])]) <: α994', α994' <: int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) is here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) is here
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) is here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│   ◉ (int -> ?c) is here
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) is here
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) is here
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│     ◉ (int -> ?d) is here
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?a) is here
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) is here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) is here
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│     ◉ (int -> ?d) is here
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) is here
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) is here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│   ◉ (int -> ?c) is here
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) is here
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) is here
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed here
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) is here
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                                                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) is here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) is here
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) is here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│   ◉ (int -> ?c) is here
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) is here
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) is here
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│     ◉ (int -> ?d) is here
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?a) is here
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) is here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) is here
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│     ◉ (int -> ?d) is here
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) is here
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) is here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│   ◉ (int -> ?c) is here
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) is here
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) is here
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed here
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) is here
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a]
//│ padLength: list['a] -> list['b] -> int
//│ padZero: list[list[int]] -> list['a] -> list[list[int]]
//│ U max: 11, total: 195
//│ UERR 2 errors
//│ L: 2 [list['a1080'] ~ ([α1048'] -> α1098'), list['a1080'] <: α1082', [α1082' - (α1084' -> α1082') ~ ([int] -> α1083') - α1083', L: 1 [(α1084' -> α1082') ~ ([int] -> α1083'), [(α1084' -> α1082') - (α1079' -> (α1084' -> α1082')) ~ ([α1079'] -> α1085') - α1085', L: 0 [(α1079' -> (α1084' -> α1082')) ~ ([α1079'] -> α1085'), (α1079' -> (α1084' -> α1082')) <: clone1078', clone1078' <: ([α1079'] -> α1085')]], α1085' <: ([int] -> α1083')]], [α1083' - ([int] -> α1083') ~ (α1084' -> α1082') - α1082', L: 1 [([int] -> α1083') ~ (α1084' -> α1082'), ([int] -> α1083') :> α1085', [α1085' - ([α1079'] -> α1085') ~ (int -> α1088') - α1088', L: 0 [([α1079'] -> α1085') ~ (int -> α1088'), ([α1079'] -> α1085') :> clone1078', clone1078' <: (int -> α1088')]], [α1088' - (int -> α1088') ~ (α1079' -> (α1084' -> α1082')) - (α1084' -> α1082'), L: 0 [(int -> α1088') ~ (α1079' -> (α1084' -> α1082')), (int -> α1088') :> clone1078', clone1078' :> (α1079' -> (α1084' -> α1082'))]]]], [α1082' - (α1084' -> α1082') ~ ([int] -> α1083') - α1083', L: 1 [(α1084' -> α1082') ~ ([int] -> α1083'), [(α1084' -> α1082') - (α1079' -> (α1084' -> α1082')) ~ (int -> α1088') - α1088', L: 0 [(α1079' -> (α1084' -> α1082')) ~ (int -> α1088'), (α1079' -> (α1084' -> α1082')) <: clone1078', clone1078' <: (int -> α1088')]], [α1088' - (int -> α1088') ~ ([α1079'] -> α1085') - α1085', L: 0 [(int -> α1088') ~ ([α1079'] -> α1085'), (int -> α1088') :> clone1078', clone1078' <: ([α1079'] -> α1085')]], α1085' <: ([int] -> α1083')]], [α1083' - ([int] -> α1083') ~ ([[int]] -> α1096') - α1096', L: 1 [([int] -> α1083') ~ ([[int]] -> α1096'), ([int] -> α1083') :> α1085', [α1085' - ([α1079'] -> α1085') ~ (int -> α1088') - α1088', L: 0 [([α1079'] -> α1085') ~ (int -> α1088'), ([α1079'] -> α1085') :> clone1078', clone1078' <: (int -> α1088')]], α1088' <: ([[int]] -> α1096')]], α1096' <: ([α1048'] -> α1098')]
//│ L: 2 [list['a1081'] ~ ([α1048'] -> α1098'), list['a1081'] <: α1082', [α1082' - (α1084' -> α1082') ~ ([int] -> α1083') - α1083', L: 1 [(α1084' -> α1082') ~ ([int] -> α1083'), [(α1084' -> α1082') - (α1079' -> (α1084' -> α1082')) ~ ([α1079'] -> α1085') - α1085', L: 0 [(α1079' -> (α1084' -> α1082')) ~ ([α1079'] -> α1085'), (α1079' -> (α1084' -> α1082')) <: clone1078', clone1078' <: ([α1079'] -> α1085')]], α1085' <: ([int] -> α1083')]], [α1083' - ([int] -> α1083') ~ (α1084' -> α1082') - α1082', L: 1 [([int] -> α1083') ~ (α1084' -> α1082'), ([int] -> α1083') :> α1085', [α1085' - ([α1079'] -> α1085') ~ (int -> α1088') - α1088', L: 0 [([α1079'] -> α1085') ~ (int -> α1088'), ([α1079'] -> α1085') :> clone1078', clone1078' <: (int -> α1088')]], [α1088' - (int -> α1088') ~ (α1079' -> (α1084' -> α1082')) - (α1084' -> α1082'), L: 0 [(int -> α1088') ~ (α1079' -> (α1084' -> α1082')), (int -> α1088') :> clone1078', clone1078' :> (α1079' -> (α1084' -> α1082'))]]]], [α1082' - (α1084' -> α1082') ~ ([int] -> α1083') - α1083', L: 1 [(α1084' -> α1082') ~ ([int] -> α1083'), [(α1084' -> α1082') - (α1079' -> (α1084' -> α1082')) ~ (int -> α1088') - α1088', L: 0 [(α1079' -> (α1084' -> α1082')) ~ (int -> α1088'), (α1079' -> (α1084' -> α1082')) <: clone1078', clone1078' <: (int -> α1088')]], [α1088' - (int -> α1088') ~ ([α1079'] -> α1085') - α1085', L: 0 [(int -> α1088') ~ ([α1079'] -> α1085'), (int -> α1088') :> clone1078', clone1078' <: ([α1079'] -> α1085')]], α1085' <: ([int] -> α1083')]], [α1083' - ([int] -> α1083') ~ ([[int]] -> α1096') - α1096', L: 1 [([int] -> α1083') ~ ([[int]] -> α1096'), ([int] -> α1083') :> α1085', [α1085' - ([α1079'] -> α1085') ~ (int -> α1088') - α1088', L: 0 [([α1079'] -> α1085') ~ (int -> α1088'), ([α1079'] -> α1085') :> clone1078', clone1078' <: (int -> α1088')]], α1088' <: ([[int]] -> α1096')]], α1096' <: ([α1048'] -> α1098')]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> list[int]



// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1247  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1245  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ │                                            ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1238    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1247  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-1240  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-1245  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-1245  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-1240  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) is here
//│      - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1247  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ -> _`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ -> _)
//│ 
//│ ◉ (int * _ list) is here
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) is here
//│    - l.-1241let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ list`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ list)
//│ 
//│ ◉ (int * _ list) is here
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ---> (_ -> _)
//│ 
//│   ◉ (_ list -> _) is here
//│   ▲  - l.-347  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│   │                                         ^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed here
//│      - l.-347  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                             ^^^^^^^^^^^^
//│     ◉ (_ -> ?a) is here
//│     ▲  - l.-347  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│     │                                         ^^^^^^^^^^
//│     │  - l.-350let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?mulByDigit) is assumed here
//│     │  - l.-350let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) is here
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) is here
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) <--- (?a) ~~~~ (?b) ---> (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ ▲  - lib. let List.rev: 'a list -> 'a list
//│ │                       ^^^^^^^
//│ │  - l.-349  match List.rev l with
//│ │                           ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.-350let rec mulByDigit i l =
//│                                 ^
//│     ◉ (_ -> ?a -> _) is here
//│     │  - l.-350let rec mulByDigit i l =
//│     │                             ^^^^^
//│     │            match List.rev l with ...
//│     │            ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.-350let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (?mulByDigit) is assumed here
//│     │  - l.-350let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) is here
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) is here
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?c) <--- (?b) <--- (?a) <--- (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?d) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) is here
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) is here
//│    - l.-1241let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-1246  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-1239    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-1239    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-1245  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-1246  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-1239    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-1239    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1247  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-1246  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-1239    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-1239    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │ 
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1238    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-1246  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-1239    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-1239    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.-1240  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-1240  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-1245  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-1241let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1235  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-1240  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-1240  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-1248let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) is here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-1246  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-1239    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-1236    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1236    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-1239    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1239    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.-1240  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-1240  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1235  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-1246  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) is here
//│      - l.-1244  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-1248let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1247  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ helper: int -> int
//│ tenEx: int -> list[int] -> list[int]
//│ bigMul: 'b -> list[int] -> list[int]
//│   where
//│     'b = list[int] -> list[('c, list['a],)], list['d]
//│ U max: 13, total: 367
//│ UERR 22 errors
//│ L: 3 [([α1360'], [[[α1214'']]],) ~ list[α1286''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: α1312'', [α1312'' - ([[α1312'']], [[α1283'']],) ~ ([[list[α1286'']]], [[α1283'']],) - list[α1286''], L: 2 [([[α1312'']], [[α1283'']],) ~ ([[list[α1286'']]], [[α1283'']],), ([[α1312'']], [[α1283'']],) <: α1313'', α1313'' <: α1314'', [α1314'' - (α1317'' -> [α1314'']) ~ (α1318'' -> α1315'') - α1315'', L: 1 [(α1317'' -> [α1314'']) ~ (α1318'' -> α1315''), [(α1317'' -> [α1314'']) - (α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')) - (α1318'' -> α1315''), L: 0 [(α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')), (α1316'' -> (α1317'' -> [α1314''])) <: (α1315'' -> (α1318'' -> α1315''))]]]], [α1315'' - (α1318'' -> α1315'') ~ (α1317'' -> [α1314'']) - α1314'', L: 1 [(α1318'' -> α1315'') ~ (α1317'' -> [α1314'']), [(α1318'' -> α1315'') - (α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])) - (α1317'' -> [α1314'']), L: 0 [(α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])), (α1315'' -> (α1318'' -> α1315'')) :> (α1316'' -> (α1317'' -> [α1314'']))]]]], α1314'' :> ([[list[α1286'']]], [[α1283'']],)]]]
//│ L: 2 [list['a1397'] ~ ([α1389'], [α1390'],), list['a1397'] <: α1395', α1395' <: α1396', α1396' <: α1394', [α1394' - (α1391' -> α1394') ~ (α1387' -> α1386') - α1386', L: 1 [(α1391' -> α1394') ~ (α1387' -> α1386'), [(α1391' -> α1394') - (α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')) - (α1387' -> α1386'), L: 0 [(α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')), (α1388' -> (α1391' -> α1394')) <: (α1386' -> (α1387' -> α1386'))]]]], [α1386' - (α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')) - α1388', L: 0 [(α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')), (α1386' -> (α1387' -> α1386')) :> (α1388' -> (α1391' -> α1394'))]], α1388' <: ([α1389'], [α1390'],)]
//│ L: 2 [(α1398' -> α1408') ~ ([α1389'], [α1390'],), (α1398' -> α1408') <: α1395', α1395' <: α1396', α1396' <: α1394', [α1394' - (α1391' -> α1394') ~ (α1387' -> α1386') - α1386', L: 1 [(α1391' -> α1394') ~ (α1387' -> α1386'), [(α1391' -> α1394') - (α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')) - (α1387' -> α1386'), L: 0 [(α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')), (α1388' -> (α1391' -> α1394')) <: (α1386' -> (α1387' -> α1386'))]]]], [α1386' - (α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')) - α1388', L: 0 [(α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')), (α1386' -> (α1387' -> α1386')) :> (α1388' -> (α1391' -> α1394'))]], α1388' <: ([α1389'], [α1390'],)]
//│ L: 2 [list[α1348'] ~ (α1383' -> α1385'), list[α1348'] :> α1346', [α1346' - (α1346' -> α1349') ~ ([α1202'] -> α1360') - α1202', L: 1 [(α1346' -> α1349') ~ ([α1202'] -> α1360'), [(α1346' -> α1349') - (α1345' -> (α1346' -> α1349')) ~ (['a1216'] -> α1358') - α1358', L: 0 [(α1345' -> (α1346' -> α1349')) ~ (['a1216'] -> α1358'), (α1345' -> (α1346' -> α1349')) <: mulByDigit1344', mulByDigit1344' <: (['a1216'] -> α1358')]], α1358' <: ([α1202'] -> α1360')]], α1202' <: (α1383' -> α1385')]
//│ L: 1 [([α1360'], [[[α1214'']]],) ~ list[α1219''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], [α1245'' - ([α1245''], [α1285''],) ~ ([[α1244'']], [[list[α1246'']]],) - α1244'', L: 0 [([α1245''], [α1285''],) ~ ([[α1244'']], [[list[α1246'']]],), ([α1245''], [α1285''],) :> α1288'', α1288'' :> α1287'', α1287'' :> ([[α1244'']], [[list[α1246'']]],)]], α1244'' <: list[α1219'']]
//│ L: 1 [([α1360'], [[[α1214'']]],) ~ list[α1286''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: α1312'', [α1312'' - ([[α1312'']], [[α1283'']],) ~ ([[list[α1286'']]], [[α1283'']],) - list[α1286''], L: 0 [([[α1312'']], [[α1283'']],) ~ ([[list[α1286'']]], [[α1283'']],), ([[α1312'']], [[α1283'']],) <: α1313'', α1313'' <: α1314'', α1314'' :> ([[list[α1286'']]], [[α1283'']],)]]]
//│ L: 2 [([int], [[list['a1525']]],) ~ list['a1397'], ([int], [[list['a1525']]],) <: α1386', [α1386' - (α1387' -> α1386') ~ (α1391' -> α1394') - α1394', L: 1 [(α1387' -> α1386') ~ (α1391' -> α1394'), [(α1387' -> α1386') - (α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')) - (α1391' -> α1394'), L: 0 [(α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')), (α1386' -> (α1387' -> α1386')) :> (α1388' -> (α1391' -> α1394'))]]]], α1394' :> α1396', α1396' :> α1395', α1395' :> list['a1397']]
//│ L: 1 [([α1360'], [[[α1214'']]],) ~ list[α1220''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], [α1245'' - ([α1245''], [α1285''],) ~ ([[list[α1220'']]], [[α1271'']],) - list[α1220''], L: 0 [([α1245''], [α1285''],) ~ ([[list[α1220'']]], [[α1271'']],), ([α1245''], [α1285''],) :> α1288'', α1288'' :> ([[list[α1220'']]], [[α1271'']],)]]]
//│ L: 2 [(α1398' -> α1408') ~ ([α1529'], [α1530'],), (α1398' -> α1408') <: α1395', α1395' <: α1396', α1396' <: α1394', [α1394' - (α1391' -> α1394') ~ (α1387' -> α1386') - α1386', L: 1 [(α1391' -> α1394') ~ (α1387' -> α1386'), [(α1391' -> α1394') - (α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')) - (α1387' -> α1386'), L: 0 [(α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')), (α1388' -> (α1391' -> α1394')) <: (α1386' -> (α1387' -> α1386'))]]]], α1386' <: ([α1529'], [α1530'],)]
//│ L: 3 [([α1360'], [[[α1214'']]],) ~ list[α1289''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: α1312'', [α1312'' - ([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],) - α1284'', L: 2 [([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],), ([[α1312'']], [[α1283'']],) <: α1313'', α1313'' <: α1314'', [α1314'' - (α1317'' -> [α1314'']) ~ (α1318'' -> α1315'') - α1315'', L: 1 [(α1317'' -> [α1314'']) ~ (α1318'' -> α1315''), [(α1317'' -> [α1314'']) - (α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')) - (α1318'' -> α1315''), L: 0 [(α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')), (α1316'' -> (α1317'' -> [α1314''])) <: (α1315'' -> (α1318'' -> α1315''))]]]], α1315'' <: ([α1284''], [α1282''],)]], [α1284'' - ([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],) - α1312'', L: 2 [([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],), ([α1284''], [α1282''],) :> α1315'', [α1315'' - (α1318'' -> α1315'') ~ (α1317'' -> [α1314'']) - α1314'', L: 1 [(α1318'' -> α1315'') ~ (α1317'' -> [α1314'']), [(α1318'' -> α1315'') - (α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])) - (α1317'' -> [α1314'']), L: 0 [(α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])), (α1315'' -> (α1318'' -> α1315'')) :> (α1316'' -> (α1317'' -> [α1314'']))]]]], α1314'' :> α1313'', α1313'' :> ([[α1312'']], [[α1283'']],)]], α1312'' :> α1245'', α1245'' <: list[α1289'']]
//│ L: 0 [(α1343'' -> α1281'') ~ list['a1217''], (α1343'' -> α1281'') <: α1215'', α1215'' :> list['a1217'']]
//│ L: 0 [([α1360'], [[[α1214'']]],) ~ list[α1220''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', α1244'' <: list[α1220'']]
//│ L: 1 [([α1360'], [[[α1214'']]],) ~ list[α1289''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: list[α1289'']]
//│ L: 2 [([int], [[list['a1525']]],) ~ (α1398' -> α1408'), ([int], [[list['a1525']]],) <: α1386', [α1386' - (α1387' -> α1386') ~ (α1391' -> α1394') - α1394', L: 1 [(α1387' -> α1386') ~ (α1391' -> α1394'), [(α1387' -> α1386') - (α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')) - (α1391' -> α1394'), L: 0 [(α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')), (α1386' -> (α1387' -> α1386')) :> (α1388' -> (α1391' -> α1394'))]]]], α1394' :> α1396', α1396' :> α1395', α1395' :> (α1398' -> α1408')]
//│ L: 3 [([α1360'], [[[α1214'']]],) ~ list[α1220''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: α1312'', [α1312'' - ([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],) - α1284'', L: 2 [([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],), ([[α1312'']], [[α1283'']],) <: α1313'', α1313'' <: α1314'', [α1314'' - (α1317'' -> [α1314'']) ~ (α1318'' -> α1315'') - α1315'', L: 1 [(α1317'' -> [α1314'']) ~ (α1318'' -> α1315''), [(α1317'' -> [α1314'']) - (α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')) - (α1318'' -> α1315''), L: 0 [(α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')), (α1316'' -> (α1317'' -> [α1314''])) <: (α1315'' -> (α1318'' -> α1315''))]]]], α1315'' <: ([α1284''], [α1282''],)]], [α1284'' - ([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],) - α1312'', L: 2 [([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],), ([α1284''], [α1282''],) :> α1315'', [α1315'' - (α1318'' -> α1315'') ~ (α1317'' -> [α1314'']) - α1314'', L: 1 [(α1318'' -> α1315'') ~ (α1317'' -> [α1314'']), [(α1318'' -> α1315'') - (α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])) - (α1317'' -> [α1314'']), L: 0 [(α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])), (α1315'' -> (α1318'' -> α1315'')) :> (α1316'' -> (α1317'' -> [α1314'']))]]]], α1314'' :> α1313'', α1313'' :> ([[α1312'']], [[α1283'']],)]], α1312'' :> α1245'', [α1245'' - ([α1245''], [α1285''],) ~ ([[list[α1220'']]], [[α1271'']],) - list[α1220''], L: 0 [([α1245''], [α1285''],) ~ ([[list[α1220'']]], [[α1271'']],), ([α1245''], [α1285''],) :> α1288'', α1288'' :> ([[list[α1220'']]], [[α1271'']],)]]]
//│ L: 2 [list['a1347'] ~ (α1383' -> α1385'), [list['a1347'] - ([list['a1347']] -> α1355') ~ ([α1202'] -> α1360') - α1202', L: 1 [([list['a1347']] -> α1355') ~ ([α1202'] -> α1360'), ([list['a1347']] -> α1355') :> α1356', [α1356' - ([α1345'] -> α1356') ~ (['a1216'] -> α1358') - α1358', L: 0 [([α1345'] -> α1356') ~ (['a1216'] -> α1358'), ([α1345'] -> α1356') :> mulByDigit1344', mulByDigit1344' <: (['a1216'] -> α1358')]], α1358' <: ([α1202'] -> α1360')]], α1202' <: (α1383' -> α1385')]
//│ L: 1 [([α1360'], [[[α1214'']]],) ~ list[α1243''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: α1312'', α1312'' <: list[α1243'']]
//│ L: 3 [([α1360'], [[[α1214'']]],) ~ list[α1219''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: α1312'', [α1312'' - ([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],) - α1284'', L: 2 [([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],), ([[α1312'']], [[α1283'']],) <: α1313'', α1313'' <: α1314'', [α1314'' - (α1317'' -> [α1314'']) ~ (α1318'' -> α1315'') - α1315'', L: 1 [(α1317'' -> [α1314'']) ~ (α1318'' -> α1315''), [(α1317'' -> [α1314'']) - (α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')) - (α1318'' -> α1315''), L: 0 [(α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')), (α1316'' -> (α1317'' -> [α1314''])) <: (α1315'' -> (α1318'' -> α1315''))]]]], α1315'' <: ([α1284''], [α1282''],)]], [α1284'' - ([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],) - α1312'', L: 2 [([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],), ([α1284''], [α1282''],) :> α1315'', [α1315'' - (α1318'' -> α1315'') ~ (α1317'' -> [α1314'']) - α1314'', L: 1 [(α1318'' -> α1315'') ~ (α1317'' -> [α1314'']), [(α1318'' -> α1315'') - (α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])) - (α1317'' -> [α1314'']), L: 0 [(α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])), (α1315'' -> (α1318'' -> α1315'')) :> (α1316'' -> (α1317'' -> [α1314'']))]]]], α1314'' :> α1313'', α1313'' :> ([[α1312'']], [[α1283'']],)]], α1312'' :> α1245'', [α1245'' - ([α1245''], [α1285''],) ~ ([[α1244'']], [[list[α1246'']]],) - α1244'', L: 0 [([α1245''], [α1285''],) ~ ([[α1244'']], [[list[α1246'']]],), ([α1245''], [α1285''],) :> α1288'', α1288'' :> α1287'', α1287'' :> ([[α1244'']], [[list[α1246'']]],)]], α1244'' <: list[α1219'']]
//│ L: 2 [list['a1397'] ~ ([α1529'], [α1530'],), list['a1397'] <: α1395', α1395' <: α1396', α1396' <: α1394', [α1394' - (α1391' -> α1394') ~ (α1387' -> α1386') - α1386', L: 1 [(α1391' -> α1394') ~ (α1387' -> α1386'), [(α1391' -> α1394') - (α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')) - (α1387' -> α1386'), L: 0 [(α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')), (α1388' -> (α1391' -> α1394')) <: (α1386' -> (α1387' -> α1386'))]]]], α1386' <: ([α1529'], [α1530'],)]
//│ L: 0 [([α1360'], [[[α1214'']]],) ~ list[α1219''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', α1244'' <: list[α1219'']]
//│ L: 3 [([α1360'], [[[α1214'']]],) ~ list[α1243''], ([α1360'], [[[α1214'']]],) <: α1218'', α1218'' <: α1244'', [α1244'' - ([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],) - α1245'', L: 0 [([[α1244'']], [[list[α1246'']]],) ~ ([α1245''], [α1285''],), ([[α1244'']], [[list[α1246'']]],) <: α1287'', α1287'' <: α1288'', α1288'' <: ([α1245''], [α1285''],)]], α1245'' <: α1312'', [α1312'' - ([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],) - α1284'', L: 2 [([[α1312'']], [[α1283'']],) ~ ([α1284''], [α1282''],), ([[α1312'']], [[α1283'']],) <: α1313'', α1313'' <: α1314'', [α1314'' - (α1317'' -> [α1314'']) ~ (α1318'' -> α1315'') - α1315'', L: 1 [(α1317'' -> [α1314'']) ~ (α1318'' -> α1315''), [(α1317'' -> [α1314'']) - (α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')) - (α1318'' -> α1315''), L: 0 [(α1316'' -> (α1317'' -> [α1314''])) ~ (α1315'' -> (α1318'' -> α1315'')), (α1316'' -> (α1317'' -> [α1314''])) <: (α1315'' -> (α1318'' -> α1315''))]]]], α1315'' <: ([α1284''], [α1282''],)]], [α1284'' - ([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],) - α1312'', L: 2 [([α1284''], [α1282''],) ~ ([[α1312'']], [[α1283'']],), ([α1284''], [α1282''],) :> α1315'', [α1315'' - (α1318'' -> α1315'') ~ (α1317'' -> [α1314'']) - α1314'', L: 1 [(α1318'' -> α1315'') ~ (α1317'' -> [α1314'']), [(α1318'' -> α1315'') - (α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])) - (α1317'' -> [α1314'']), L: 0 [(α1315'' -> (α1318'' -> α1315'')) ~ (α1316'' -> (α1317'' -> [α1314''])), (α1315'' -> (α1318'' -> α1315'')) :> (α1316'' -> (α1317'' -> [α1314'']))]]]], α1314'' :> α1313'', α1313'' :> ([[α1312'']], [[α1283'']],)]], α1312'' <: list[α1243'']]
//│ L: 2 [list['a1397'] ~ (α1398' -> α1408'), list['a1397'] <: α1395', α1395' <: α1396', α1396' <: α1394', [α1394' - (α1391' -> α1394') ~ (α1387' -> α1386') - α1386', L: 1 [(α1391' -> α1394') ~ (α1387' -> α1386'), [(α1391' -> α1394') - (α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')) - (α1387' -> α1386'), L: 0 [(α1388' -> (α1391' -> α1394')) ~ (α1386' -> (α1387' -> α1386')), (α1388' -> (α1391' -> α1394')) <: (α1386' -> (α1387' -> α1386'))]]]], [α1386' - (α1387' -> α1386') ~ (α1391' -> α1394') - α1394', L: 1 [(α1387' -> α1386') ~ (α1391' -> α1394'), [(α1387' -> α1386') - (α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')) - (α1391' -> α1394'), L: 0 [(α1386' -> (α1387' -> α1386')) ~ (α1388' -> (α1391' -> α1394')), (α1386' -> (α1387' -> α1386')) :> (α1388' -> (α1391' -> α1394'))]]]], α1394' :> α1396', α1396' :> α1395', α1395' :> (α1398' -> α1408')]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ [ERROR] Type `_ -> _` does not match `_ * bool`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) <--- (?c) <--- (_ * bool)
//│ 
//│ ◉ (_ -> _) is here
//│ ▲  - l.4    match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                 ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.3  let rec wwhile (f,b) =
//│                           ^
//│     ◉ ((?a * _) -> _) is here
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                        ^^^^^^^
//│     │           match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ (?wwhile) is assumed here
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ ((?b * _) -> _) is here
//│        - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                    ^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * bool) is here
//│    - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│                                                       ^^^^^^^^^^^
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b
//│ U max: 10, total: 58
//│ UERR 1 errors
//│ L: 2 [([α1568'] -> α1573') ~ ([[[α1576']]], [[bool]],), ([α1568'] -> α1573') :> α1567', [α1567' - ([α1567'], [α1568'],) ~ ([[α1578']], [[α1565']],) - α1578', L: 1 [([α1567'], [α1568'],) ~ ([[α1578']], [[α1565']],), [([α1567'], [α1568'],) - (([α1567'], [α1568'],) -> α1572') ~ (([[α1578']], [[α1565']],) -> α1582') - ([[α1578']], [[α1565']],), L: 0 [(([α1567'], [α1568'],) -> α1572') ~ (([[α1578']], [[α1565']],) -> α1582'), (([α1567'], [α1568'],) -> α1572') <: wwhile1566', wwhile1566' <: (([[α1578']], [[α1565']],) -> α1582')]]]], α1578' :> α1579', α1579' :> ([[[α1576']]], [[bool]],)]

// FIXME: no common provs
// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed here
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (?d) <--- (_ list)
//│ 
//│   ◉ ((_ * _) list) is here
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a list) is here
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.26     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?b list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (_ -> ?b -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?c -> _) is here
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.16       if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.16       if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.16       if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed here
//│    - l.14     let f a x =
//│                       ^
//│     ◉ (_ -> ?b -> _) is here
//│     │  - l.14     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?c -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) is here
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 35, total: 551
//│ UERR 3 errors
//│ L: 2 [list['a1726''] ~ ([α1724''], [α1725''],), list['a1726''] <: α1727'', α1727'' :> α1723'', [α1723'' - (α1723'' -> α1728'') ~ (α1717'' -> α1716'') - α1717'', L: 1 [(α1723'' -> α1728'') ~ (α1717'' -> α1716''), [(α1723'' -> α1728'') - (α1718'' -> (α1723'' -> α1728'')) ~ (α1716'' -> (α1717'' -> α1716'')) - (α1717'' -> α1716''), L: 0 [(α1718'' -> (α1723'' -> α1728'')) ~ (α1716'' -> (α1717'' -> α1716'')), (α1718'' -> (α1723'' -> α1728'')) <: (α1716'' -> (α1717'' -> α1716''))]]]], [α1717'' - (α1717'' -> α1716'') ~ (α1723'' -> α1728'') - α1723'', L: 1 [(α1717'' -> α1716'') ~ (α1723'' -> α1728''), [(α1717'' -> α1716'') - (α1716'' -> (α1717'' -> α1716'')) ~ (α1718'' -> (α1723'' -> α1728'')) - (α1723'' -> α1728''), L: 0 [(α1716'' -> (α1717'' -> α1716'')) ~ (α1718'' -> (α1723'' -> α1728'')), (α1716'' -> (α1717'' -> α1716'')) :> (α1718'' -> (α1723'' -> α1728''))]]]], α1723'' <: ([α1724''], [α1725''],)]
//│ L: 0 [list['a1691'''] ~ ([α1697'''], [α1698'''],), list['a1691'''] <: α1689''', α1689''' :> α1685''', α1685''' <: ([α1697'''], [α1698'''],)]
//│ L: 2 [([α1711''], [α1712''],) ~ list['a1726''], [([α1711''], [α1712''],) - list[([α1711''], [α1712''],)] ~ list[α1734''] - α1734'', L: 0 [list[([α1711''], [α1712''],)] ~ list[α1734''], list[([α1711''], [α1712''],)] <: list[α1734'']]], [α1734'' - list[α1734''] ~ list[α1717''] - α1717'', L: 0 [list[α1734''] ~ list[α1717''], list[α1734''] <: list[α1717'']]], [α1717'' - (α1717'' -> α1716'') ~ (α1723'' -> α1728'') - α1723'', L: 1 [(α1717'' -> α1716'') ~ (α1723'' -> α1728''), [(α1717'' -> α1716'') - (α1716'' -> (α1717'' -> α1716'')) ~ (α1718'' -> (α1723'' -> α1728'')) - (α1723'' -> α1728''), L: 0 [(α1716'' -> (α1717'' -> α1716'')) ~ (α1718'' -> (α1723'' -> α1728'')), (α1716'' -> (α1717'' -> α1716'')) :> (α1718'' -> (α1723'' -> α1728''))]]]], α1723'' <: α1727'', α1727'' :> list['a1726'']]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ │  - l.15     let base = 0 in
//│ │                        ^
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?a) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.14     let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.14     let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?a -> _ -> int) is here
//│   │  - l.14     let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.17     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~~ (?a) ---> (_ * _)
//│ 
//│     ◉ (_ -> _ -> int) is here
//│     │  - l.14     let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.17     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 63, total: 556
//│ UERR 3 errors
//│ L: 0 [int ~ ([α1949''], [α1950''],), int <: α1939'', α1939'' <: ([α1949''], [α1950''],)]
//│ L: 1 [int ~ ([α1949''], [α1950''],), int :> α1941'', [α1941'' - (α1941'' -> (α1942'' -> [int])) ~ (α1939'' -> (α1940'' -> α1939'')) - α1939'', L: 0 [(α1941'' -> (α1942'' -> [int])) ~ (α1939'' -> (α1940'' -> α1939'')), (α1941'' -> (α1942'' -> [int])) <: (α1939'' -> (α1940'' -> α1939''))]], α1939'' <: ([α1949''], [α1950''],)]
//│ L: 2 [int ~ ([α1949''], [α1950''],), [int - (α1942'' -> [int]) ~ (α1940'' -> α1939'') - α1939'', L: 1 [(α1942'' -> [int]) ~ (α1940'' -> α1939''), [(α1942'' -> [int]) - (α1941'' -> (α1942'' -> [int])) ~ (α1939'' -> (α1940'' -> α1939'')) - (α1940'' -> α1939''), L: 0 [(α1941'' -> (α1942'' -> [int])) ~ (α1939'' -> (α1940'' -> α1939'')), (α1941'' -> (α1942'' -> [int])) <: (α1939'' -> (α1940'' -> α1939''))]]]], α1939'' <: ([α1949''], [α1950''],)]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ [ERROR] Type `_ * _` does not match `_ -> (_ * bool)`
//│ 
//│         (_ * _) <--- (?a) ~~~~ (_ -> (_ * bool))
//│ 
//│ ◉ (_ * _) is here
//│ ▲  - l.-304  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                             ^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.-304  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│                    ^^^
//│   ◉ (_ -> ?a) is here
//│   ▲  - l.-304  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed here
//│      - l.-305let rec wwhile (f,b) =
//│                              ^
//│       ◉ ((?b * _) -> _) is here
//│       │  - l.-305let rec wwhile (f,b) =
//│       │                         ^^^^^^^
//│       │            match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.-305let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ (?wwhile) is assumed here
//│       │  - l.-305let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ ((_ -> _ -> (_ * bool) * _) -> _) is here
//│          - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                      ^^^^^^
//│ intboolf: ('a -> int) -> 'a -> (int, bool,)
//│ fixpoint: ('a, 'b,) -> 'b
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ U max: 10, total: 70
//│ UERR 1 errors
//│ L: 3 [([α2035'], [α2040'],) ~ (α2042' -> ([α2045'], [[bool]],)), ([α2035'], [α2040'],) :> α2039', [α2039' - ([α2034'] -> α2039') ~ (α2041' -> (α2042' -> ([α2045'], [[bool]],))) - (α2042' -> ([α2045'], [[bool]],)), L: 2 [([α2034'] -> α2039') ~ (α2041' -> (α2042' -> ([α2045'], [[bool]],))), ([α2034'] -> α2039') :> α2033', [α2033' - ([α2033'], [α2034'],) ~ ([[(α2041' -> (α2042' -> ([α2045'], [[bool]],)))]], [[α2031']],) - (α2041' -> (α2042' -> ([α2045'], [[bool]],))), L: 1 [([α2033'], [α2034'],) ~ ([[(α2041' -> (α2042' -> ([α2045'], [[bool]],)))]], [[α2031']],), [([α2033'], [α2034'],) - (([α2033'], [α2034'],) -> α2038') ~ (([[(α2041' -> (α2042' -> ([α2045'], [[bool]],)))]], [[α2031']],) -> α2047') - ([[(α2041' -> (α2042' -> ([α2045'], [[bool]],)))]], [[α2031']],), L: 0 [(([α2033'], [α2034'],) -> α2038') ~ (([[(α2041' -> (α2042' -> ([α2045'], [[bool]],)))]], [[α2031']],) -> α2047'), (([α2033'], [α2034'],) -> α2038') <: wwhile2032', wwhile2032' <: (([[(α2041' -> (α2042' -> ([α2045'], [[bool]],)))]], [[α2031']],) -> α2047')]]]]]]]



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a] -> 'b
//│   where
//│     'b = 'b -> 'b, ('c -> 'c) -> 'c -> 'c
//│     'a = 'a -> 'a, ('c -> 'c) -> 'c -> 'c
//│     'c = 'c -> 'c



// file 830
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (int) is here
//│ │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│ │                                                    ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) is here
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed here
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) is here
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                         ^^^^^^^
//│   ◉ (_ list -> ?b) is here
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                                                                     ^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (?sumList) is assumed here
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (_ -> ?a) is here
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) is here
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed here
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) is here
//│      - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                   ^^^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ │                                               ^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                 ^^^^^^^^^^
//│ modulus: int -> int
//│ digitsOfInt: int -> list[int]
//│ lt10: int -> bool
//│ sumList: list[int] -> int
//│ additivePersistence: int -> int
//│ U max: 9, total: 157
//│ UERR 1 errors
//│ L: 1 [int ~ ([additivePersistence2124'] -> α2164'), int <: α2147', [α2147' - (α2145' -> α2147') ~ ([list['a2146']] -> α2148') - α2148', L: 0 [(α2145' -> α2147') ~ ([list['a2146']] -> α2148'), (α2145' -> α2147') <: sumList2144', sumList2144' <: ([list['a2146']] -> α2148')]], [α2148' - ([list['a2146']] -> α2148') ~ (α2145' -> α2147') - α2147', L: 0 [([list['a2146']] -> α2148') ~ (α2145' -> α2147'), ([list['a2146']] -> α2148') :> sumList2144', sumList2144' :> (α2145' -> α2147')]], [α2147' - (α2145' -> α2147') ~ ([α2149'] -> α2162') - α2162', L: 0 [(α2145' -> α2147') ~ ([α2149'] -> α2162'), (α2145' -> α2147') <: sumList2144', sumList2144' <: ([α2149'] -> α2162')]], α2162' <: ([additivePersistence2124'] -> α2164')]


// FIXME investigate
// file 1770 (TODO fix nested flows)
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                           ^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                             ^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ~~~~ (?a) ~~~~ (_ list)
//│ 
//│   ◉ (_ -> _ -> _) is here
//│   │  - l.1  let rec filter l a =
//│   │                        ^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│   ◉ (_ * ?a) is here
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                   ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?a) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) is here
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│   ◉ (_ list -> ?b) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│   ◉ (_ * ?c) is here
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                                         ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?a) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) is here
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                       ^^^^^^
//│   ◉ (_ list -> ?b) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?a) is here
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│   ◉ (_ list -> ?a) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│   ◉ (_ * ?c) is here
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ filter: list['a] -> 'b -> list['b]
//│ removeDuplicates: list[list['a]] -> list['a]
//│ U max: 18, total: 218
//│ UERR 4 errors
//│ L: 1 [([α2206'''] -> α2204''') ~ list['a2198''], ([α2206'''] -> α2204''') :> α2208''', [α2208''' - ([list['a2201''']] -> α2208''') ~ ([list['a2201''']] -> α2210''') - α2210''', L: 0 [([list['a2201''']] -> α2208''') ~ ([list['a2201''']] -> α2210'''), ([list['a2201''']] -> α2208''') :> filter2199''', filter2199''' <: ([list['a2201''']] -> α2210''')]], [α2210''' - ([list['a2201''']] -> α2210''') ~ ([list['a2201''']] -> α2208''') - α2208''', L: 0 [([list['a2201''']] -> α2210''') ~ ([list['a2201''']] -> α2208'''), ([list['a2201''']] -> α2210''') :> filter2199''', filter2199''' <: ([list['a2201''']] -> α2208''')]], [α2208''' - ([list['a2201''']] -> α2208''') ~ (α2213''' -> α2215''') - α2215''', L: 0 [([list['a2201''']] -> α2208''') ~ (α2213''' -> α2215'''), ([list['a2201''']] -> α2208''') :> filter2199''', filter2199''' <: (α2213''' -> α2215''')]], [α2215''' - ([['a2197'']], [α2215'''],) ~ ('a2198'', list['a2198''],) - list['a2198''], L: 0 [([['a2197'']], [α2215'''],) ~ ('a2198'', list['a2198''],), ([['a2197'']], [α2215'''],) <: ('a2198'', list['a2198''],)]]]
//│ L: 0 [list['a2197''] ~ (['a2197''] -> α2213'''), list['a2197''] <: (['a2197''] -> α2213''')]
//│ L: 1 [(α2206''' -> α2209''') ~ list['a2198''], [(α2206''' -> α2209''') - (α2200''' -> (α2206''' -> α2209''')) ~ (α2213''' -> α2215''') - α2215''', L: 0 [(α2200''' -> (α2206''' -> α2209''')) ~ (α2213''' -> α2215'''), (α2200''' -> (α2206''' -> α2209''')) <: filter2199''', filter2199''' <: (α2213''' -> α2215''')]], [α2215''' - ([['a2197'']], [α2215'''],) ~ ('a2198'', list['a2198''],) - list['a2198''], L: 0 [([['a2197'']], [α2215'''],) ~ ('a2198'', list['a2198''],), ([['a2197'']], [α2215'''],) <: ('a2198'', list['a2198''],)]]]
//│ L: 1 [([α2206'''] -> α2205''') ~ list['a2198''], ([α2206'''] -> α2205''') :> α2210''', [α2210''' - ([list['a2201''']] -> α2210''') ~ ([list['a2201''']] -> α2208''') - α2208''', L: 0 [([list['a2201''']] -> α2210''') ~ ([list['a2201''']] -> α2208'''), ([list['a2201''']] -> α2210''') :> filter2199''', filter2199''' <: ([list['a2201''']] -> α2208''')]], [α2208''' - ([list['a2201''']] -> α2208''') ~ (α2213''' -> α2215''') - α2215''', L: 0 [([list['a2201''']] -> α2208''') ~ (α2213''' -> α2215'''), ([list['a2201''']] -> α2208''') :> filter2199''', filter2199''' <: (α2213''' -> α2215''')]], [α2215''' - ([['a2197'']], [α2215'''],) ~ ('a2198'', list['a2198''],) - list['a2198''], L: 0 [([['a2197'']], [α2215'''],) ~ ('a2198'', list['a2198''],), ([['a2197'']], [α2215'''],) <: ('a2198'', list['a2198''],)]]]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> 'b) -> 'a -> ('a -> 'b, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ [ERROR] Type `_ * _ * _` does not match `_ -> _`
//│ 
//│         (?a * _ * _) ~~~~ (?a) ---> (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│   ◉ ((?a * _ * _) -> ?b) is here
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed here
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) is here
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.1  let rec assoc (d,k,l) =
//│ │                        ^
//│ │  - l.3    | [] -> d
//│ │                   ^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.2    match l with
//│             ^^^^^^^^^^^^
//│             | [] -> d ...
//│             ^^^^^^^^^^^^^
//│   ◉ ((?a * _ * _) -> ?b) is here
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed here
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) is here
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ │                                                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                               ^^^^^^^
//│ assoc: 'assoc
//│   where
//│     'assoc = (('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],), 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,), ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,)
//│     'b = ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],)
//│     'a = ('d, 'a -> ('b, 'c, 'e,),)
//│     'e = list[('d, 'a -> ('b, 'c, 'e,),)]
//│ U max: 10, total: 35
//│ UERR 1 errors
//│ L: 1 [([α2295'], [α2296'], [α2297'],) ~ ([α2296'] -> α2312'), [([α2295'], [α2296'], [α2297'],) - (([α2295'], [α2296'], [α2297'],) -> α2298') ~ ([α2295'] -> α2310') - α2295', L: 0 [(([α2295'], [α2296'], [α2297'],) -> α2298') ~ ([α2295'] -> α2310'), (([α2295'], [α2296'], [α2297'],) -> α2298') <: assoc2294', assoc2294' <: ([α2295'] -> α2310')]], α2295' <: α2298', [α2298' - (([α2295'], [α2296'], [α2297'],) -> α2298') ~ ([α2295'] -> α2310') - α2310', L: 0 [(([α2295'], [α2296'], [α2297'],) -> α2298') ~ ([α2295'] -> α2310'), (([α2295'], [α2296'], [α2297'],) -> α2298') <: assoc2294', assoc2294' <: ([α2295'] -> α2310')]], α2310' <: ([α2296'] -> α2312')]
