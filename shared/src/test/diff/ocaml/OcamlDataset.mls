:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ cloneHelper: 'a -> int -> ('b & 'c & list['a]) -> 'b
//│   where
//│     'b :> list['a] | 'c
//│        <: 'c
//│     'c :> 'b | list['a]
//│        <: 'b
//│ clone: 'a -> int -> (list[nothing] | list['a])
//│ padZero: (list['a] & list[?] & 'b) -> (list['c] & list[?] & 'd) -> ('b | list[int | 'a], 'd | list[int | 'c],)
//│ removeZero: ('b & 'c & 'd & list['a]) -> 'c
//│   where
//│     'b :> 'c | 'd | list[nothing] | list['a]
//│        <: 'c & 'd
//│     'c :> list[nothing] | 'b | 'd | list['a]
//│        <: 'b & 'd
//│     'd :> 'c | list[nothing] | 'b | list['a]
//│        <: 'b & 'c
//│ bigAdd: list[?] -> (list['a] & 'b & 'c & 'd & list['a & 'e] & list[?] & list['a & 'e & 'f]) -> ('c | 'd | 'b | list[int | 'f] | list[int | 'f | 'e] | list[int | 'f | 'e | 'a] | list[nothing])
//│   where
//│     'b :> list[int | 'f] | list[int | 'f | 'e] | 'c | list[nothing] | 'd | list[int | 'f | 'e | 'a]
//│        <: 'd & 'c
//│     'c :> list[int | 'f] | list[int | 'f | 'e] | list[nothing] | 'd | 'b | list[int | 'f | 'e | 'a]
//│        <: 'd & 'b
//│     'd :> list[int | 'f] | list[int | 'f | 'e] | 'c | 'b | list[nothing] | list[int | 'f | 'e | 'a]
//│        <: 'c & 'b
//│ U max: 56, total: 89
//│ UERR 1 errors
//│ L: 0 [list[(α283', α284',)] ~ ([α295'], [α296'],), list[(α283', α284',)] <: α289', α289' <: ([α295'], [α296'],)]

// file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ [ERROR] Type `int` does not match `float`
//│ 
//│         (int) ---> (float)
//│ 
//│ ◉ (int) is here
//│ │  - l.16   | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ │                                                                           ^
//│ ▼ 
//│ ◉ (float) is here
//│    - lib. let ( /. ): float -> float -> float
//│                                ^^^^^
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ eval: (expr, float & 'a & 'b & 'c & 'd, float & 'a & 'b & 'c & 'd,) -> 'c
//│   where
//│     'a :> 'c | 'b | 'd | float
//│        <: float & 'b & 'c & 'd
//│     'c :> float | 'b | 'd | 'a
//│        <: float & 'a & 'b & 'd
//│     'b :> 'c | 'd | float | 'a
//│        <: float & 'a & 'c & 'd
//│     'd :> 'c | float | 'b | 'a
//│        <: float & 'a & 'b & 'c
//│ U max: 49, total: 134
//│ UERR 1 errors
//│ L: 0 [int ~ float, int <: float]

// FIXME file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (?a) ---> (?a) ---> (?b -> ?a) ~~~~ (?b -> ?a) ---> (_ -> ?b -> ?a) ---> (?c -> ?d) <--- (?c -> ?d) <--- (?d) ~~~~ (?d) <--- (?e) ---> (?e list) <--- (?f) ---> (?c) ---> (?c) ---> (?c -> ?d) ~~~~ (?c -> ?d) ---> (?d -> ?c -> ?d) <--- (?b -> ?a) <--- (?b -> ?a) <--- (?b) ~~~~ 
//│ 
//│ ◉ (int) is here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (_ list) is here
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (_ list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> _ -> _) is here
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: (list[list[?]] & list['a]) -> (int | 'a)
//│ U max: 6, total: 17
//│ UERR 1 errors
//│ L: 0 [int ~ list['a470'], int <: α469', [α469' - (α468' -> α469') ~ (α474' -> α473') - α473', L: 1 [(α468' -> α469') ~ (α474' -> α473'), [(α468' -> α469') - (α467' -> (α468' -> α469')) ~ (α473' -> (α474' -> α473')) - (α474' -> α473'), L: 0 [(α467' -> (α468' -> α469')) ~ (α473' -> (α474' -> α473')), (α467' -> (α468' -> α469')) <: (α473' -> (α474' -> α473'))]]]], α473' :> α471', [α471' - list[α471'] ~ list[α474'] - α474', L: 0 [list[α471'] ~ list[α474'], list[α471'] :> α466', α466' <: list[α474']]], [α474' - (α474' -> α473') ~ (α468' -> α469') - α468', L: 1 [(α474' -> α473') ~ (α468' -> α469'), [(α474' -> α473') - (α473' -> (α474' -> α473')) ~ (α467' -> (α468' -> α469')) - (α468' -> α469'), L: 0 [(α473' -> (α474' -> α473')) ~ (α467' -> (α468' -> α469')), (α473' -> (α474' -> α473')) :> (α467' -> (α468' -> α469'))]]]], α468' <: list['a470']]


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ sepConcat: string -> list[string] -> string
//│ stringOfList: anything -> anything -> string

// FIXME string indexing - Array types not supported
// file 2376
let getHead h = match h with | [] -> [] | h::t -> h;;
let getTail t = match t with | [] -> [] | h::t -> t;;
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let rec matchHeads x y =
  match x with
  | [] -> true
  | h::t ->
      if (getHead x) = (getHead y) then matchHeads t (getTail y) else false;;
let explode s =
  let rec go i =
    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
  go 0;;
let palindrome w =
  match explode w with
  | [] -> true
  | h::t -> matchHeads (explode w) (listReverse (explode w));;
//│ /!!!\ Uncaught error: scala.MatchError: undefined (of class mlscript.TyperDatatypes$TypeRef)


// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ sumListHelper: ('a & 'b & int) -> list[int] -> 'a
//│   where
//│     'a :> int | 'b
//│        <: 'b
//│     'b :> 'a | int
//│        <: 'a
//│ digitsOfIntHelper: int -> (list[int] | list[nothing])
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ sumList: list[int] -> int
//│ additivePersistence: anything -> nothing

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.8        if (getHeads (explode x)) = []
//│ │                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.8        if (getHeads (explode x)) = []
//│                               ^^^^^^^
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.6    match explode x with
//│ │                 ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.6    match explode x with
//│                   ^^^^^^^
//│ listReverse: list['a] -> (list['a] | list[nothing])
//│ getHeads: list['a] -> (list['a] | list[nothing])
//│ loseTail: list['a] -> (list['a] | list[nothing])
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.264:	  match explode x with
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.266:	      if (getHeads (explode x)) = []
//│ ╙──      	                    ^^^^^^^
//│ matchHeads: error -> bool
//│ U max: 34, total: 51
//│ UERR 2 errors
//│ L: 0 [error<> ~ ([α864'] -> α883'), error<> <: ([α864'] -> α883')]
//│ L: 0 [error<> ~ ([α864'] -> α866'), error<> <: ([α864'] -> α866')]

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ /!!!\ Uncaught error: scala.MatchError: undefined (of class mlscript.TyperDatatypes$TypeRef)

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.320:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.-20    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                      ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.-20    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                        ^^^^^^^^^^^^^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.7    | [] -> 0
//│                     ^
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ addNumbs: list[int] -> int
//│ digits: int -> (list[int] | list[nothing])
//│ additivePersistence: int -> (bool | int)
//│ U max: 32, total: 47
//│ UERR 2 errors
//│ L: 0 [error<> ~ ([α929'] -> α935'), error<> <: ([α929'] -> α935')]
//│ L: 0 [bool ~ int, bool <: α1025', α1025' <: α1011', α1011' :> int]


// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) is here
//│ │  - l.-313  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                             ^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) is here
//│    - l.12       else buildCosine build (rand, (d - 1));;
//│                      ^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) is here
//│ │  - l.-313  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                           ^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) is here
//│    - l.11       then buildSine build (rand, (d - 1))
//│                      ^^^^^^^^^^^^^^^
//│ buildCosine: expr -> expr
//│ buildSine: expr -> expr
//│ buildX: () -> expr
//│ buildY: () -> expr
//│ build: (float -> int, int,) -> () -> expr
//│ U max: 19, total: 21
//│ UERR 2 errors
//│ L: 0 [expr ~ (([α1038'], [int],) -> α1058'), expr <: (([α1038'], [int],) -> α1058')]
//│ L: 0 [expr ~ (([α1038'], [int],) -> α1064'), expr <: (([α1038'], [int],) -> α1064')]

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ remainder: int -> int -> int
//│ x: anything -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ mulByDigit: anything -> list[?] -> (list[int] | list[nothing])


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ clone: 'a -> int -> (list[nothing] | list['a])
//│ padLength: list[?] -> list[?] -> int
//│ padZero: (list[?] & list['a]) -> list[?] -> list[list[nothing] | list[int] | 'a]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> (list[int] | list[nothing])



// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `int * _ list`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?b) ---> (_ -> ?b) ~~~~ (_ -> ?b) ---> (_ -> _ -> ?b) ---> (_ -> ?c) <--- (_ -> ?c) <--- (?c) ~~~~ 
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-466let bigAdd l1 l2 =
//│ │                        ^^^^
//│ │            let add (l1,l2) = ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ ▲  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                                              ^^^^
//│ │ 
//│ ◉ (int * _ list) is here
//│    - l.9    let base = (0, []) in
//│                        ^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?b) ---> (_ -> ?b) ~~~~ (_ -> ?b) ---> (_ -> _ -> ?b) ---> (_ -> ?c) <--- (_ -> ?c) <--- (?c) ~~~~ 
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `int * _ list`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?b) ---> (_ -> ?b) ~~~~ (_ -> ?b) ---> (_ -> _ -> ?b) ---> (_ -> ?c) <--- (_ -> ?c) <--- (?c) ~~~~ 
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ ▲  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                                              ^^^^
//│ │ 
//│ ◉ (int * _ list) is here
//│    - l.9    let base = (0, []) in
//│                        ^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?b) ---> (_ -> ?b) ~~~~ (_ -> ?b) ---> (_ -> _ -> ?b) ---> (_ -> ?c) <--- (_ -> ?c) <--- (?c) ~~~~ 
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-466let bigAdd l1 l2 =
//│ │                        ^^^^
//│ │            let add (l1,l2) = ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?b) ---> (_ -> ?b) ~~~~ (_ -> ?b) ---> (?c -> _ -> ?b) ---> (_ -> ?d) <--- (_ -> ?d) <--- (?d) ~~~~ (?d) ---> (?d -> _ -> ?d) <--- (?c -> _ -> ?b) <--- (?c) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> _) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (_ -> _ -> _) is here
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?b) ---> (_ -> ?b) ~~~~ (_ -> ?b) ---> (?c -> _ -> ?b) ---> (_ -> ?d) <--- (_ -> ?d) <--- (?d) ~~~~ (?d) ---> (?d -> _ -> ?d) <--- (?c -> _ -> ?b) <--- (?c) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-466let bigAdd l1 l2 =
//│ │                        ^^^^
//│ │            let add (l1,l2) = ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> _) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (_ -> _ -> _) is here
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-466let bigAdd l1 l2 =
//│ │                        ^^^^
//│ │            let add (l1,l2) = ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ helper: int -> int
//│ tenEx: int -> list[int] -> (list[int] | list[nothing])
//│ bigMul: ((list[int] | list[nothing]) -> list[(anything, list[?],)] & list[?]) -> list[int] -> list[int]
//│ U max: 41, total: 85
//│ UERR 7 errors
//│ L: 0 [list['a1396'] ~ ([α1490'], [α1491'],), list['a1396'] <: α1394', α1394' <: α1391', α1391' <: α1388', [α1388' - (α1387' -> α1388') ~ (α1485' -> α1484') - α1484', L: 1 [(α1387' -> α1388') ~ (α1485' -> α1484'), [(α1387' -> α1388') - (α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')) - (α1485' -> α1484'), L: 0 [(α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')), (α1383' -> (α1387' -> α1388')) <: (α1484' -> (α1485' -> α1484'))]]]], α1484' <: ([α1490'], [α1491'],)]
//│ L: 0 [(α1417' -> α1418') ~ ([α1490'], [α1491'],), (α1417' -> α1418') <: α1394', α1394' <: α1391', α1391' <: α1388', [α1388' - (α1387' -> α1388') ~ (α1485' -> α1484') - α1484', L: 1 [(α1387' -> α1388') ~ (α1485' -> α1484'), [(α1387' -> α1388') - (α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')) - (α1485' -> α1484'), L: 0 [(α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')), (α1383' -> (α1387' -> α1388')) <: (α1484' -> (α1485' -> α1484'))]]]], α1484' <: ([α1490'], [α1491'],)]
//│ L: 0 [(α1417' -> α1418') ~ (int, [list['a1464']],), (α1417' -> α1418') <: α1394', α1394' <: α1391', α1391' <: α1388', [α1388' - (α1387' -> α1388') ~ (α1485' -> α1484') - α1484', L: 1 [(α1387' -> α1388') ~ (α1485' -> α1484'), [(α1387' -> α1388') - (α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')) - (α1485' -> α1484'), L: 0 [(α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')), (α1383' -> (α1387' -> α1388')) <: (α1484' -> (α1485' -> α1484'))]]]], α1484' :> (int, [list['a1464']],)]
//│ L: 0 [list['a1396'] ~ (int, [list['a1464']],), list['a1396'] <: α1394', α1394' <: α1391', α1391' <: α1388', [α1388' - (α1387' -> α1388') ~ (α1485' -> α1484') - α1484', L: 1 [(α1387' -> α1388') ~ (α1485' -> α1484'), [(α1387' -> α1388') - (α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')) - (α1485' -> α1484'), L: 0 [(α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')), (α1383' -> (α1387' -> α1388')) <: (α1484' -> (α1485' -> α1484'))]]]], α1484' :> (int, [list['a1464']],)]
//│ L: 0 [list['a1396'] ~ ([α1392'], [α1393'],), list['a1396'] <: α1394', α1394' <: α1391', α1391' <: α1388', [α1388' - (α1387' -> α1388') ~ (α1485' -> α1484') - α1484', L: 1 [(α1387' -> α1388') ~ (α1485' -> α1484'), [(α1387' -> α1388') - (α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')) - (α1485' -> α1484'), L: 0 [(α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')), (α1383' -> (α1387' -> α1388')) <: (α1484' -> (α1485' -> α1484'))]]]], [α1484' - (α1484' -> (α1485' -> α1484')) ~ (α1383' -> (α1387' -> α1388')) - α1383', L: 0 [(α1484' -> (α1485' -> α1484')) ~ (α1383' -> (α1387' -> α1388')), (α1484' -> (α1485' -> α1484')) :> (α1383' -> (α1387' -> α1388'))]], α1383' <: ([α1392'], [α1393'],)]
//│ L: 0 [(α1417' -> α1418') ~ list['a1396'], (α1417' -> α1418') <: α1394', α1394' :> list['a1396']]
//│ L: 0 [(α1417' -> α1418') ~ ([α1392'], [α1393'],), (α1417' -> α1418') <: α1394', α1394' <: α1391', α1391' <: α1388', [α1388' - (α1387' -> α1388') ~ (α1485' -> α1484') - α1484', L: 1 [(α1387' -> α1388') ~ (α1485' -> α1484'), [(α1387' -> α1388') - (α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')) - (α1485' -> α1484'), L: 0 [(α1383' -> (α1387' -> α1388')) ~ (α1484' -> (α1485' -> α1484')), (α1383' -> (α1387' -> α1388')) <: (α1484' -> (α1485' -> α1484'))]]]], [α1484' - (α1484' -> (α1485' -> α1484')) ~ (α1383' -> (α1387' -> α1388')) - α1383', L: 0 [(α1484' -> (α1485' -> α1484')) ~ (α1383' -> (α1387' -> α1388')), (α1484' -> (α1485' -> α1484')) :> (α1383' -> (α1387' -> α1388'))]], α1383' <: ([α1392'], [α1393'],)]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: (('a | 'b) -> ('c & 'd & 'e & 'b & 'a, bool,), 'b,) -> 'd
//│   where
//│     'c :> 'd | 'e | 'a
//│        <: 'd & 'e
//│     'd :> 'c | 'e | 'a
//│        <: 'c & 'e
//│     'e :> 'd | 'c | 'a
//│        <: 'c & 'd
//│ fixpoint: ((anything, bool,), anything,) -> nothing

// FIXME: no common provs
// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed here
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?a) ---> (?a -> _) ~~~~ (?a -> _) ---> (_ -> ?a -> _) ---> (?b -> _) <--- (?b -> _) <--- (?b) ~~~~ (?b) ---> (?b list) <--- (?c list) <--- (?c) ---> (?c list) <--- ((_ * _) list) <--- (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed here
//│    - l.14     let f a x =
//│                       ^
//│     ◉ (_ -> _ -> _) is here
//│     │  - l.14     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ list) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                                                        ^^^^^^^
//│   │  - l.26     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list) is here
//│      - lib. let List.rev: 'a list -> 'a list
//│                                      ^^^^^^^
//│   ◉ (_ list) is here
//│   ▲  - lib. let List.rev: 'a list -> 'a list
//│   │                       ^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ ((_ * _) list) is here
//│      - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                                                      ^^^^^^^^^^^^^
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ padZero: (list['a] & list[?] & 'b) -> (list['c] & list[?] & 'd) -> (list[int | 'a] | 'b, 'd | list[int | 'c],)
//│ removeZero: ('b & 'c & list[int & 'a]) -> 'b
//│   where
//│     'b :> list[nothing] | list['a] | 'c
//│        <: 'c
//│     'c :> 'b | list[nothing] | list['a]
//│        <: 'b
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> (list[int] | list[nothing])
//│ U max: 55, total: 154
//│ UERR 2 errors
//│ L: 0 [list['a1714'] ~ (α1734', α1735',), list['a1714'] <: α1712', α1712' :> α1708', [α1708' - (α1708' -> α1709') ~ (α1740' -> α1739') - α1740', L: 1 [(α1708' -> α1709') ~ (α1740' -> α1739'), [(α1708' -> α1709') - (α1704' -> (α1708' -> α1709')) ~ (α1739' -> (α1740' -> α1739')) - (α1740' -> α1739'), L: 0 [(α1704' -> (α1708' -> α1709')) ~ (α1739' -> (α1740' -> α1739')), (α1704' -> (α1708' -> α1709')) <: (α1739' -> (α1740' -> α1739'))]]]], [α1740' - list[α1740'] ~ list[α1733'] - α1733', L: 0 [list[α1740'] ~ list[α1733'], list[α1740'] :> list[α1733']]], [α1733' - list[α1733'] ~ list[(α1734', α1735',)] - (α1734', α1735',), L: 0 [list[α1733'] ~ list[(α1734', α1735',)], list[α1733'] :> list[(α1734', α1735',)]]]]
//│ L: 0 [list['a1714'] ~ ([α1720'], [α1721'],), list['a1714'] <: α1712', α1712' :> α1708', α1708' <: ([α1720'], [α1721'],)]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ │  - l.15     let base = 0 in
//│ │                        ^
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (?a) ---> (_ * _)
//│ 
//│     ◉ (_ -> _ -> int) is here
//│     │  - l.14     let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.17     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> _ -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ addTuple: (int, int,) -> int
//│ padZero: (list['a] & list[?] & 'b) -> (list[?] & list['c] & 'd) -> ('b | list[int | 'a], 'd | list[int | 'c],)
//│ removeZero: list['a] -> (list[nothing] | list['a])
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> list[nothing]
//│ U max: 58, total: 141
//│ UERR 2 errors
//│ L: 2 [int ~ ([α1975'], [α1976'],), [int - (α1954' -> [int]) ~ (α1970' -> α1969') - α1969', L: 1 [(α1954' -> [int]) ~ (α1970' -> α1969'), [(α1954' -> [int]) - (α1950' -> (α1954' -> [int])) ~ (α1969' -> (α1970' -> α1969')) - (α1970' -> α1969'), L: 0 [(α1950' -> (α1954' -> [int])) ~ (α1969' -> (α1970' -> α1969')), (α1950' -> (α1954' -> [int])) <: (α1969' -> (α1970' -> α1969'))]]]], α1969' <: ([α1975'], [α1976'],)]
//│ L: 0 [int ~ ([α1975'], [α1976'],), int <: α1969', α1969' <: ([α1975'], [α1976'],)]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ intboolf: ('a -> 'b) -> 'a -> ('b, bool,)
//│ fixpoint: (anything, nothing -> anything,) -> nothing
//│ wwhile: (('a | 'b) -> ('c & 'd & 'e & 'b & 'a, bool,), 'b,) -> 'd
//│   where
//│     'c :> 'd | 'e | 'a
//│        <: 'd & 'e
//│     'd :> 'c | 'e | 'a
//│        <: 'c & 'e
//│     'e :> 'd | 'c | 'a
//│        <: 'c & 'd



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a & 'b & 'c & 'd & 'e] -> 'a
//│   where
//│     'a :> 'e | 'd | ('a & 'b & 'c & 'd) -> ('e | 'd) | 'c
//│        <: 'b
//│     'b <: 'e -> 'c
//│     'c :> 'e | 'd
//│        <: 'b & 'a



// file 830
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ modulus: int -> int
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ lt10: anything -> bool
//│ sumList: list[int] -> int
//│ additivePersistence: (int & 'a) -> 'a


// FIXME investigate
// file 1770 (TODO fix nested flows)
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                           ^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                             ^
//│ filter: list['a] -> anything -> (list[nothing] | list['a])
//│ removeDuplicates: list[list['a]] -> list['a]
//│ U max: 22, total: 51
//│ UERR 1 errors
//│ L: 0 [list['a2290'] ~ (['a2290'] -> α2306'), list['a2290'] <: (['a2290'] -> α2306')]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> anything & 'b) -> 'a -> ('b, bool,)
//│ wwhile: (('a | 'b) -> ('c & 'd & 'e & 'b & 'a, bool,), 'b,) -> 'd
//│   where
//│     'c :> 'd | 'e | 'a
//│        <: 'd & 'e
//│     'd :> 'c | 'e | 'a
//│        <: 'c & 'e
//│     'e :> 'd | 'c | 'a
//│        <: 'c & 'd
//│ fixpoint: ('a & 'b & 'c & 'd & 'e & ('e | 'a) -> anything, 'a,) -> ('c | 'd | 'b | 'e)
//│   where
//│     'b :> 'c | 'd | 'e
//│        <: 'd & 'c
//│     'c :> 'd | 'b | 'e
//│        <: 'd & 'b
//│     'd :> 'c | 'b | 'e
//│        <: 'c & 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ assoc: ('b, 'c, list[(anything, 'a -> ('d & 'e & 'f & 'g),) & 'a],) -> 'e
//│   where
//│     'b <: 'd & ('b, 'c, list[(anything, 'a -> ('d & 'e & 'f & 'g),) & 'a],) & 'e
//│     'd <: 'c -> list['a] -> 'h
//│     'h <: 'd & 'e & 'f & 'g
//│     'e :> 'f | 'g | 'h | 'b
//│        <: 'd
//│     'f :> 'g | 'h
//│        <: 'd & 'e
//│     'g :> 'h
//│        <: 'd & 'e & 'f
