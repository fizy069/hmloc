// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ cloneHelper: 'a -> int -> list['a] -> list['a]
//│ clone: 'a -> int -> list['a]
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)
//│ removeZero: list['a] -> list['a]
//│ ╔══[ERROR] Type `?a list * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a list * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a list * ?b`
//│ ║  l.8: 	  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a list * ?b`
//│ ║  l.7: 	  if diff < 0
//│ ║       	  ^^^^^^^^^^^
//│ ║  l.8: 	  then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list * ?b` and it flows into `?e`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	                ^^^^^^^^^^^^^
//│ ╟── this variable has type `?e`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	          ^
//│ ╟── this reference has type `?e`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this application has type `?e` and it flows from `?c * ?d list`
//│ ║  l.15: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this applied type reference has type `?c * ?d list`
//│ ║  builtin:42: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──            	                                         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a * ?b ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.9: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	                                                         ^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b`
//│ ║  l.9: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b`
//│ ║  l.7: 	  if diff < 0
//│ ║       	  ^^^^^^^^^^^
//│ ║  l.8: 	  then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b` and it flows into `?e`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	                ^^^^^^^^^^^^^
//│ ╟── this variable has type `?e`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	          ^
//│ ╟── this reference has type `?e`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this application has type `?e` and it flows from `?c * ?d list`
//│ ║  l.15: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this applied type reference has type `?c * ?d list`
//│ ║  builtin:42: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──            	                                         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?c * ?d list`
//│ ║  
//│ ╟──        ?a * ?b list ---> ?e <--- ?c * ?d list 
//│ ║  
//│ ╟── this tuple literal has type `?a * ?b list`
//│ ║  l.9: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b list`
//│ ║  l.9: 	  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ ║       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a * ?b list`
//│ ║  l.7: 	  if diff < 0
//│ ║       	  ^^^^^^^^^^^
//│ ║  l.8: 	  then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b list` and it flows into `?e`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	                ^^^^^^^^^^^^^
//│ ╟── this variable has type `?e`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	          ^
//│ ╟── this reference has type `?e`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this application has type `?e` and it flows from `?c * ?d list`
//│ ║  l.15: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this applied type reference has type `?c * ?d list`
//│ ║  builtin:42: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──            	                                         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b list` does not match `?c * ?d`
//│ ╟── `?a * ?b list` comes from this type expression
//│ ║  builtin:42: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ║              	                                         ^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b list`
//│ ║  l.15: 	    let base = List.combine l1 l2 in
//│ ║        	               ^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?a * ?b list`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.17: 	    let (_,res) = List.fold_left f base args in res in
//│ ╙──      	        ^^^^^^^
//│ bigAdd: list[?] -> list[?] -> list[int]

// file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ ╔══[ERROR] Type `int` does not match `float`
//│ ╟── this integer literal has type `int`
//│ ║  l.141: 	  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ ║         	                                                                  ^
//│ ╟── `float` comes from this type expression
//│ ║  builtin:47: 	let ( /. ): float -> float -> float
//│ ╙──            	                     ^^^^^
//│ eval: (expr, float, float,) -> float

// file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ sqsum: list[list[?] | 'a] -> (int | 'a)


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ sepConcat: string -> list[string] -> string
//│ ╔══[ERROR] Type `(?b -> ?c) -> ?b list -> ?c list` does not match `?a list`
//│ ╟── `(?b -> ?c) -> ?b list -> ?c list` comes from this type expression
//│ ║  builtin:38: 	let List.map: ('a -> 'b) -> 'a list -> 'b list
//│ ║              	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `((?b -> ?c) -> ?b list -> ?c list) -> ?d`
//│ ║  l.186: 	let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ ║         	                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?e -> ?f`
//│ ║  l.186: 	let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ ║         	                               ^^^^^^^^^^^^^^
//│ ╟── this function has type `?e -> ?f`
//│ ║  l.180: 	let rec sepConcat sep sl =
//│ ║         	                      ^^^^
//│ ║  l.181: 	  match sl with ...
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?a list`
//│ ║  l.180: 	let rec sepConcat sep sl =
//│ ║         	                      ^^
//│ ╟── this reference has type `?a list`
//│ ║  l.181: 	  match sl with
//│ ║         	        ^^
//│ ╟── this pattern has type `?a list`
//│ ║  l.182: 	  | [] -> ""
//│ ║         	    ^^
//│ ╟── this `match` condition has type `?a list`
//│ ║  l.181: 	  match sl with
//│ ║         	        ^^
//│ ╟── this pattern has type `?a list`
//│ ║  l.182: 	  | [] -> ""
//│ ╙──       	    ^^
//│ ╔══[ERROR] Type `string` does not match `?a * ?b -> ?c`
//│ ╟── `string` comes from this type expression
//│ ║  builtin:13: 	let (^): string -> string -> string
//│ ║              	                             ^^^^^^
//│ ╟── this operator application has type `string`
//│ ║  l.184: 	      let f a x = a ^ (sep ^ x) in
//│ ║         	                  ^^^^^^^^^^^^^
//│ ╟── this application has type `string`
//│ ║  l.185: 	      let base = h in let l = t in List.fold_left f base l;;
//│ ║         	                                   ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `string`
//│ ║  l.181: 	  match sl with
//│ ║         	  ^^^^^^^^^^^^^
//│ ║  l.182: 	  | [] -> "" ...
//│ ║         	^^^^^^^^^^^^
//│ ╟── this application has type `string`
//│ ║  l.186: 	let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ ║         	                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a * ?b -> ?c`
//│ ║  l.186: 	let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ ╙──       	                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ stringOfList: anything -> anything -> string

// file 2376
let getHead h = match h with | [] -> [] | h::t -> h;;
let getTail t = match t with | [] -> [] | h::t -> t;;
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let rec matchHeads x y =
  match x with
  | [] -> true
  | h::t ->
      if (getHead x) = (getHead y) then matchHeads t (getTail y) else false;;
let explode s =
  let rec go i =
    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
  go 0;;
let palindrome w =
  match explode w with
  | [] -> true
  | h::t -> matchHeads (explode w) (listReverse (explode w));;
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.UnificationSolver.makeMessagesUR$1(UnificationSolver.scala:287)
//│ 	at: mlscript.UnificationSolver.createErrorMessage(UnificationSolver.scala:318)
//│ 	at: mlscript.UnificationSolver.createErrorMessage$(UnificationSolver.scala:225)
//│ 	at: mlscript.TypeDefs.createErrorMessage(TypeDefs.scala:11)
//│ 	at: mlscript.UnificationSolver$$anonfun$1.applyOrElse(UnificationSolver.scala:215)
//│ 	at: mlscript.UnificationSolver$$anonfun$1.applyOrElse(UnificationSolver.scala:214)
//│ 	at: scala.collection.Iterator$$anon$7.hasNext(Iterator.scala:525)
//│ 	at: scala.collection.immutable.List.prependedAll(List.scala:152)
//│ 	at: scala.collection.IterableOnceOps.toList(IterableOnce.scala:1288)


// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ sumListHelper: int -> list[int] -> int
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> list[int]
//│ sumList: list[int] -> int
//│ ╔══[ERROR] Type `?b -> ?c` does not match `?a list`
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.279: 	let rec digitsOfInt n = digitsOfIntHelper n;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?digitsOfInt -> ?d`
//│ ║  l.281: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ║         	                                ^^^^^^^^^^^^^^^^^^^
//│ ╟── this function has type `?e -> ?f`
//│ ║  l.280: 	let rec sumList xs = sumListHelper 0 xs;;
//│ ║         	                ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?a list`
//│ ║  l.273: 	let rec sumListHelper total xs =
//│ ║         	                            ^^
//│ ╟── this reference has type `?a list`
//│ ║  l.274: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║         	        ^^
//│ ╟── this pattern has type `?a list`
//│ ║  l.274: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║         	                  ^^
//│ ╟── this `match` condition has type `?a list`
//│ ║  l.274: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║         	        ^^
//│ ╟── this pattern has type `?a list`
//│ ║  l.274: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ╙──       	                  ^^
//│ ╔══[ERROR] Type `int` does not match `?a -> ?b`
//│ ╟── this integer literal has type `int`
//│ ║  l.280: 	let rec sumList xs = sumListHelper 0 xs;;
//│ ║         	                                   ^
//│ ╟── this match expression has type `int`
//│ ║  l.274: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `int`
//│ ║  l.274: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║         	                        ^^^^^
//│ ╟── this variable has type `int`
//│ ║  l.273: 	let rec sumListHelper total xs =
//│ ║         	                      ^^^^^
//│ ╟── this match expression has type `int`
//│ ║  l.274: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `int`
//│ ║  l.280: 	let rec sumList xs = sumListHelper 0 xs;;
//│ ║         	                     ^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `int`
//│ ║  l.281: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ║         	                                ^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.281: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ╙──       	                                ^^^^^^^^^^^^^^^^^^^^^
//│ additivePersistence: anything -> nothing

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] Type `?a | undefined` does not match `?a | undefined`
//│ ║  
//│ ╟──        ?a | undefined ---> ?b <--- ?a | undefined 
//│ ║  
//│ ╟── `?a | undefined` comes from this type expression and it flows into `?b`
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^
//│ ╟── this reference has type `?b`
//│ ║  l.342: 	let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
//│ ║         	                                                                ^
//│ ╟── this reference has type `?a | undefined` and it flows into `?b`
//│ ║  l.349: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ╙──       	               ^
//│ matchHeads: nothing -> bool

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ ╔══[ERROR] identifier not found: String.length
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──       	             ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `error` does not match `?a -> ?b`
//│ ╟── this reference has type `error`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║         	             ^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──       	            ^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: s.
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──       	                                            ^^
//│ ╔══[ERROR] Type `error` does not match `int`
//│ ║  
//│ ╟──        error ---> ?a <--- ?b ---> int 
//│ ║  
//│ ╟── this application has type `error` and it flows into `?a`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║         	            ^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?a` and it flows from `?b`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║         	       ^
//│ ╟── this variable has type `?b`
//│ ║  l.370: 	  let rec go i =
//│ ║         	             ^
//│ ╟── this reference has type `?b` and it flows into `int`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──       	                                               ^
//│ ╔══[ERROR] Type `error` does not match `?a Array`
//│ ╟── this reference has type `error`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║         	                                            ^^
//│ ╟── this array access has type `?a Array`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^^
//│ ╔══[ERROR] Type `error` does not match `int`
//│ ║  
//│ ╟──        error ---> ?a <--- ?b ---> int 
//│ ║  
//│ ╟── this application has type `error` and it flows into `?a`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║         	            ^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?a` and it flows from `?b`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║         	       ^
//│ ╟── this variable has type `?b`
//│ ║  l.370: 	  let rec go i =
//│ ║         	             ^
//│ ╟── this reference has type `?b` and it flows into `int`
//│ ║  l.371: 	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ║         	                                                           ^
//│ ╟── this type reference has type `int`
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ╙──            	         ^^^
//│ explode: error -> list[undefined]

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.435:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── this integer literal has type `int` and it flows into `?a`
//│ ║  l.453: 	  | [] -> 0
//│ ║         	          ^
//│ ╟── this match expression has type `?a`
//│ ║  l.452: 	  match digits n with
//│ ║         	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.453: 	  | [] -> 0 ...
//│ ║         	^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a` and it flows from `bool`
//│ ║  l.454: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `bool`
//│ ║  l.454: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ╙──       	                                                         ^^^^
//│ additivePersistence: int -> (bool | int)

// TODO: Create adts for built in types
// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: could not find type definition d

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ remainder: int -> int -> int
//│ x: anything -> list[int] -> list[string]
//│ y: list[int]
//│ ╔══[ERROR] Type `?a -> ?b list -> ?c list` does not match `int`
//│ ╟── this function has type `?a -> ?b list -> ?c list`
//│ ║  l.499: 	let x l = List.map string_of_int;;
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `int`
//│ ║  l.498: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║         	              ^
//│ ╟── this reference has type `int`
//│ ║  l.498: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║         	                                              ^
//│ ╟── `int` comes from this type expression
//│ ║  builtin:18: 	let ( * ): int -> int -> int
//│ ╙──            	           ^^^
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this variable has type `int`
//│ ║  l.498: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║         	                ^
//│ ╟── this reference has type `int`
//│ ║  l.498: 	let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ ║         	                                                  ^
//│ ╟── `int` comes from this type expression
//│ ║  builtin:18: 	let ( * ): int -> int -> int
//│ ╙──            	                  ^^^
//│ mulByDigit: anything -> list[?] -> list[int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ clone: 'a -> int -> list['a]
//│ padLength: list[?] -> list[?] -> int
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this `then` branch has type `?a list`
//│ ║  l.538: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║         	                                  ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a list`
//│ ║  l.538: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.543: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `?b -> ?c`
//│ ║  l.543: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ╙──       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this `else` branch has type `?a list`
//│ ║  l.538: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║         	                                                              ^^
//│ ╟── this if-then-else expression has type `?a list`
//│ ║  l.538: 	let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a list`
//│ ║  l.543: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `?b -> ?c`
//│ ║  l.543: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ╙──       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ padZero: list[?] -> list[?] -> list[list[int]]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> list[int]

// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ helper: int -> int
//│ tenEx: int -> list[int] -> list[int]
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c list`
//│ ║  l.13: 	  let add (l1,l2) =
//│ ║        	           ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.15: 	    let base = List.combine l1 l2 in
//│ ║        	                            ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin:42: 	let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──            	                  ^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c list`
//│ ║  l.13: 	  let add (l1,l2) =
//│ ║        	           ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	                        ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin:34: 	let List.length: 'a list -> int
//│ ║              	                 ^^^^^^^
//│ ╟── this reference has type `?c list`
//│ ║  l.6: 	  let diff = (List.length l1) - (List.length l2) in
//│ ║       	                          ^^
//│ ╟── this variable has type `?c list`
//│ ║  l.5: 	let padZero l1 l2 =
//│ ║       	            ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin:34: 	let List.length: 'a list -> int
//│ ╙──            	                 ^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c list`
//│ ║  l.13: 	  let add (l1,l2) =
//│ ║        	           ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.14: 	    let f a x = padZero l1 l2 in
//│ ║        	                        ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin:37: 	let (@): 'a list -> 'a list -> 'a list
//│ ║              	                    ^^^^^^^
//│ ╟── this reference has type `?c list`
//│ ║  l.8: 	  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ ║       	                                 ^^
//│ ╟── this variable has type `?c list`
//│ ║  l.5: 	let padZero l1 l2 =
//│ ║       	            ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin:37: 	let (@): 'a list -> 'a list -> 'a list
//│ ╙──            	                    ^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c list`
//│ ║  l.5: 	let padZero l1 l2 =
//│ ║       	            ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.8: 	  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ ║       	                                 ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin:37: 	let (@): 'a list -> 'a list -> 'a list
//│ ╙──            	                    ^^^^^^^
//│ ╔══[ERROR] Type `?a * ?b` does not match `?c list`
//│ ╟── this tuple literal has type `?a * ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c list`
//│ ║  l.5: 	let padZero l1 l2 =
//│ ║       	            ^^
//│ ╟── this reference has type `?c list`
//│ ║  l.6: 	  let diff = (List.length l1) - (List.length l2) in
//│ ║       	                          ^^
//│ ╟── `?c list` comes from this type expression
//│ ║  builtin:34: 	let List.length: 'a list -> int
//│ ╙──            	                 ^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟──        ?a list ---> ?d <--- ?b -> ?c 
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list` and it flows into `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this match expression has type `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?d` and it flows from `?b -> ?c`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.12: 	let bigAdd l1 l2 =
//│ ║        	              ^^^^
//│ ║  l.13: 	  let add (l1,l2) = ...
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a -> ?b` does not match `?c list`
//│ ║  
//│ ╟──        ?a -> ?b ---> ?d <--- ?c list 
//│ ║  
//│ ╟── this function has type `?a -> ?b`
//│ ║  l.12: 	let bigAdd l1 l2 =
//│ ║        	              ^^^^
//│ ║  l.13: 	  let add (l1,l2) = ...
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b` and it flows into `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `?d` and it flows from `?c list`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this applied type reference has type `?c list`
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──           	     ^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟──        ?a list ---> ?d <--- ?b -> ?c 
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list` and it flows into `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this match expression has type `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?d` and it flows from `?b -> ?c`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.12: 	let bigAdd l1 l2 =
//│ ║        	              ^^^^
//│ ║  l.13: 	  let add (l1,l2) = ...
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── `?d -> ?e -> ?d` comes from this type expression
//│ ║  builtin:39: 	let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│ ║              	                      ^^^^^^^^^^^^^^
//│ ╟── this reference has type `?f -> ?g -> ?h`
//│ ║  l.604: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                                   ^
//│ ╟── this function has type `?f -> ?g -> ?h`
//│ ║  l.598: 	  let f a x =
//│ ║         	        ^^^^^
//│ ║  l.599: 	    let (x1,x2) = x in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?b * ?c`
//│ ║  l.598: 	  let f a x =
//│ ║         	        ^
//│ ╟── this reference has type `?b * ?c`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	                      ^
//│ ╟── this pattern has type `?b * ?c`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	        ^^^^^^^^^^^
//│ ╟── this `match` condition has type `?b * ?c`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	                      ^
//│ ╟── this pattern has type `?b * ?c`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ╙──       	        ^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a -> ?b` does not match `?c * ?d`
//│ ╟── this function has type `?a -> ?b`
//│ ║  l.12: 	let bigAdd l1 l2 =
//│ ║        	              ^^^^
//│ ║  l.13: 	  let add (l1,l2) = ...
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── `?e -> ?f -> ?e` comes from this type expression
//│ ║  builtin:39: 	let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│ ║              	                      ^^^^^^^^^^^^^^
//│ ╟── this reference has type `?g -> ?h -> ?i`
//│ ║  l.604: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                                   ^
//│ ╟── this function has type `?g -> ?h -> ?i`
//│ ║  l.598: 	  let f a x =
//│ ║         	        ^^^^^
//│ ║  l.599: 	    let (x1,x2) = x in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c * ?d`
//│ ║  l.598: 	  let f a x =
//│ ║         	        ^
//│ ╟── this reference has type `?c * ?d`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	                      ^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	        ^^^^^^^^^^^
//│ ╟── this `match` condition has type `?c * ?d`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	                      ^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ╙──       	        ^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b -> ?c`
//│ ║  
//│ ╟──        ?a list ---> ?d <--- ?b -> ?c 
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list` and it flows into `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this match expression has type `?d`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?d` and it flows from `?b -> ?c`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.12: 	let bigAdd l1 l2 =
//│ ║        	              ^^^^
//│ ║  l.13: 	  let add (l1,l2) = ...
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `int * ?b list`
//│ ║  
//│ ╟──        ?a list ---> ?c <--- int * ?b list 
//│ ║  
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list` and it flows into `?c`
//│ ║  l.599: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.600: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?c`
//│ ║  l.598: 	  let f a x =
//│ ║         	        ^
//│ ╟── this reference has type `?c` and it flows from `int * ?b list`
//│ ║  l.604: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                                     ^^^^
//│ ╟── this tuple literal has type `int * ?b list`
//│ ║  l.602: 	  let base = (0, []) in
//│ ╙──       	             ^^^^^^^
//│ ╔══[ERROR] Type `?a -> ?b` does not match `int * ?c list`
//│ ║  
//│ ╟──        ?a -> ?b ---> ?d <--- int * ?c list 
//│ ║  
//│ ╟── this function has type `?a -> ?b`
//│ ║  l.12: 	let bigAdd l1 l2 =
//│ ║        	              ^^^^
//│ ║  l.13: 	  let add (l1,l2) = ...
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?a -> ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a -> ?b`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a -> ?b` and it flows into `?d`
//│ ║  l.599: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.600: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this variable has type `?d`
//│ ║  l.598: 	  let f a x =
//│ ║         	        ^
//│ ╟── this reference has type `?d` and it flows from `int * ?c list`
//│ ║  l.604: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ║         	                                     ^^^^
//│ ╟── this tuple literal has type `int * ?c list`
//│ ║  l.602: 	  let base = (0, []) in
//│ ╙──       	             ^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                          ^^
//│ ╟── this match expression has type `?a list`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a list`
//│ ║  l.599: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.600: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this pattern has type `?b * ?c`
//│ ║  l.604: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╙──       	      ^^^^^^^^^^^
//│ ╔══[ERROR] Type `?a -> ?b` does not match `?c * ?d`
//│ ╟── this function has type `?a -> ?b`
//│ ║  l.12: 	let bigAdd l1 l2 =
//│ ║        	              ^^^^
//│ ║  l.13: 	  let add (l1,l2) = ...
//│ ║        	^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `?a -> ?b`
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a -> ?b`
//│ ║  l.600: 	    let (carry,res) = a in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.601: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this let expression has type `?a -> ?b`
//│ ║  l.599: 	    let (x1,x2) = x in
//│ ║         	    ^^^^^^^^^^^^^^^^^^
//│ ║  l.600: 	    let (carry,res) = a in ...
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.604: 	  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ ╙──       	      ^^^^^^^^^^^
//│ bigMul: (list[?] & list[int] -> list[(anything, list[?],)]) -> list[int] -> list[int]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: ('a -> ('a & 'b, bool,), 'a,) -> 'b
//│ ╔══[ERROR] Type `?a * bool` does not match `?b -> ?c`
//│ ╟── this tuple literal has type `?a * bool`
//│ ║  l.954: 	  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ ║         	                                                             ^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?d * ?e`
//│ ║  l.957: 	let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ ║         	                            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `?d * ?e -> ?f`
//│ ║  l.957: 	let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this function has type `?g * ?b -> ?h`
//│ ║  l.955: 	let rec wwhile (f,b) =
//│ ║         	               ^^^^^^^
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?g * ?b`
//│ ║  l.955: 	let rec wwhile (f,b) =
//│ ║         	               ^^^^^
//│ ╟── this variable has type `?b -> ?c`
//│ ║  l.955: 	let rec wwhile (f,b) =
//│ ║         	                ^
//│ ╟── this reference has type `?b -> ?c`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	        ^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ╙──       	        ^^^
//│ fixpoint: ((anything, bool,), anything,) -> nothing

// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ clone: 'a -> int -> list['a]
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)
//│ removeZero: (list[int & 'a] & 'b) -> (list['a] | 'b)
//│ ╔══[ERROR] Type `?a list` does not match `?b * ?c`
//│ ║  
//│ ╟──        ?a list ---> ?d <--- ?e ---> ?b * ?c 
//│ ║  
//│ ╟── `?a list` comes from this type expression and it flows into `?d`
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	     ^^^^^^^
//│ ╟── this reference has type `?d`
//│ ║  l.1005: 	      if x = []
//│ ║          	             ^^
//│ ╟── this reference has type `?d` and it flows from `?e`
//│ ║  l.1005: 	      if x = []
//│ ║          	         ^
//│ ╟── this variable has type `?e`
//│ ║  l.1003: 	    let f a x =
//│ ║          	            ^
//│ ╟── this reference has type `?e` and it flows into `?b * ?c`
//│ ║  l.1008: 	        (let (toSum1,toSum2) = x in
//│ ║          	                               ^
//│ ╟── this pattern has type `?b * ?c`
//│ ║  l.1008: 	        (let (toSum1,toSum2) = x in
//│ ╙──        	             ^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `int` does not match `(int -> int -> int) -> ?a`
//│ ╟── `int` comes from this type expression
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ║              	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.1009: 	         let intermediateValue = (toSum1 + toSum2) + carry in
//│ ║          	                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this reference has type `int`
//│ ║  l.1010: 	         let valueToAddToArray = intermediateValue mod 10 in
//│ ║          	                                 ^^^^^^^^^^^^^^^^^
//│ ╟── this application has type `(int -> int -> int) -> ?a`
//│ ║  l.1010: 	         let valueToAddToArray = intermediateValue mod 10 in
//│ ╙──        	                                 ^^^^^^^^^^^^^^^^^^^^^
//│ bigAdd: list[?] -> list[?] -> list[int]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)
//│ removeZero: list['a] -> list['a]
//│ ╔══[ERROR] Type `int` does not match `(int -> int -> int) -> ?a`
//│ ╟── `int` comes from this type expression
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ║              	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.1071: 	    let f a x = (a + x) mod 10 in
//│ ║          	                ^^^^^^^
//│ ╟── this application has type `(int -> int -> int) -> ?a`
//│ ║  l.1071: 	    let f a x = (a + x) mod 10 in
//│ ╙──        	                ^^^^^^^^^^^
//│ ╔══[ERROR] Type `int` does not match `?a * ?b`
//│ ╟── this integer literal has type `int`
//│ ║  l.1072: 	    let base = 0 in
//│ ║          	               ^
//│ ╟── this reference has type `int`
//│ ║  l.1074: 	    let (_,res) = List.fold_left f base args in res in
//│ ║          	                                   ^^^^
//│ ╟── this pattern has type `?a * ?b`
//│ ║  l.1074: 	    let (_,res) = List.fold_left f base args in res in
//│ ╙──        	        ^^^^^^^
//│ bigAdd: list[?] -> list[?] -> list[nothing]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ intboolf: ('a -> 'b) -> 'a -> ('b, bool,)
//│ ╔══[ERROR] Type `?a -> ?b * bool` does not match `?c * ?d`
//│ ╟── this function has type `?a -> ?b * bool`
//│ ║  l.1105: 	let intboolf f x = ((f x), ((f x) < 1));;
//│ ║          	               ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this function has type `?e -> ?a -> ?b * bool`
//│ ║  l.1105: 	let intboolf f x = ((f x), ((f x) < 1));;
//│ ║          	             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?e -> ?a -> ?b * bool * ?f`
//│ ║  l.1106: 	let fixpoint (f,b) = wwhile (intboolf, b);;
//│ ║          	                            ^^^^^^^^^^^^^
//│ ╟── this application has type `?e -> ?a -> ?b * bool * ?f -> ?g`
//│ ║  l.1106: 	let fixpoint (f,b) = wwhile (intboolf, b);;
//│ ║          	                     ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this function has type `?h * ?i -> ?j`
//│ ║  l.955: 	let rec wwhile (f,b) =
//│ ║         	               ^^^^^^^
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?h * ?i`
//│ ║  l.955: 	let rec wwhile (f,b) =
//│ ║         	               ^^^^^
//│ ╟── this variable has type `?i -> ?k`
//│ ║  l.955: 	let rec wwhile (f,b) =
//│ ║         	                ^
//│ ╟── this reference has type `?i -> ?k`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	        ^
//│ ╟── this application has type `?i -> ?k`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	        ^^^
//│ ╟── this application has type `?c * ?d`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	        ^^^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	                   ^^^^^^^^^^
//│ ╟── this `match` condition has type `?c * ?d`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	        ^^^
//│ ╟── this pattern has type `?c * ?d`
//│ ║  l.956: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ╙──       	                   ^^^^^^^^^^
//│ fixpoint: (anything, nothing -> anything,) -> nothing
//│ wwhile: ('a -> ('a & 'b, bool,), 'a,) -> 'b



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a & 'b & 'c] -> 'c
//│   where
//│     'c :> ('b & 'c) -> 'b
//│        <: 'a -> 'c


// file 830
// TODO: fix how match case is done
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: could not find type definition x


// file 1770 (TODO fix nested flows)
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ filter: list['a] -> anything -> list['a]
//│ ╔══[ERROR] Type `?a list` does not match `?a -> ?b`
//│ ╟── `?a list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	                            ^^^^^^^
//│ ╟── this reference has type `?a list`
//│ ║  l.1197: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ║          	                                  ^
//│ ╟── this application has type `?a -> ?b`
//│ ║  l.1197: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ╙──        	                                 ^^^^^
//│ ╔══[ERROR] Type `?b -> ?c` does not match `?d list`
//│ ╟── this function has type `?b -> ?c`
//│ ║  l.1187: 	let rec filter l a =
//│ ║          	                 ^^^
//│ ║  l.1188: 	  match l with ...
//│ ║          	^^^^^^^^^^^^^^
//│ ╟── this application has type `?b -> ?c`
//│ ║  l.1197: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ║          	                         ^^^^^^^^^^^^^^
//│ ╟── this tuple literal has type `?a * ?e`
//│ ║  l.1197: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ║          	                    ^^^^^^^^^^^^^^^^^^^
//│ ╟── `?d * ?d list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║             	                       ^^^^^^^^^^^^
//│ ╟── `?d list` comes from this type expression
//│ ║  builtin:1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──           	                            ^^^^^^^
//│ removeDuplicates: list[list['a]] -> list['a]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> anything & 'b) -> 'a -> ('b, bool,)
//│ wwhile: ('a -> ('a & 'b, bool,), 'a,) -> 'b
//│ fixpoint: ('a -> anything & 'a & 'b, 'a,) -> 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ assoc: ('b, 'c, list[(anything, 'a -> 'd,) & 'a],) -> 'd
//│   where
//│     'b <: ('b, 'c, list[(anything, 'a -> 'd,) & 'a],) & 'd
//│     'd <: 'c -> list['a] -> 'd
