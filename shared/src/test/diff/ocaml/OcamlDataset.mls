:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (?a -> _ -> ?a) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   │ 
//│   ◉ (?b -> _ -> _) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                       ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.13     let f a x = padZero l1 l2 in
//│                     ^
//│   ◉ (?b -> _ -> _) comes from
//│   │  - l.13     let f a x = padZero l1 l2 in
//│   │                   ^^^^^^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?a -> _ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ list * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (_ list * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list * _) comes from
//│    - l.7    then (((clone 0 (-1 * diff)) @ l1), l2)
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _ list`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?c) <--- (?b) <--- (_ * _ list)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _ list) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?c) <--- (?b) <--- (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                    ^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?c) <--- (?b) ---> (?c) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6    if diff < 0
//│             ^^^^^^^^^^^
//│             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.13     let f a x = padZero l1 l2 in
//│     │                   ^^^^^^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ cloneHelper: 'a -> int -> list['a] -> list['a]
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a], list['a0]
//│ padZero: list['a] -> list['b] -> (list['a], list['b],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list['a] -> 'b -> list[int]
//│   where
//│     'b = list[int], list['c]
//│ U max: 33, total: 661
//│ UERR 6 errors
//│ L: 2 [list[([α196''], [α197''],)] ~ ([[list[α147'']]], [[α149'']],), list[([α196''], [α197''],)] <: α199'', [α199'' - (α200'' -> α199'') ~ (α202'' -> [α153'']) - α153'', L: 1 [(α200'' -> α199'') ~ (α202'' -> [α153'']), [(α200'' -> α199'') - (α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])) - (α202'' -> [α153'']), L: 0 [(α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])), (α199'' -> (α200'' -> α199'')) :> (α201'' -> (α202'' -> [α153'']))]]]], α153'' :> ([[list[α147'']]], [[α149'']],)]
//│ L: 2 [list[([α196''], [α197''],)] ~ ([[α146'']], [[α149'']],), list[([α196''], [α197''],)] <: α199'', [α199'' - (α200'' -> α199'') ~ (α202'' -> [α153'']) - α153'', L: 1 [(α200'' -> α199'') ~ (α202'' -> [α153'']), [(α200'' -> α199'') - (α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])) - (α202'' -> [α153'']), L: 0 [(α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])), (α199'' -> (α200'' -> α199'')) :> (α201'' -> (α202'' -> [α153'']))]]]], α153'' :> α152'', α152'' :> ([[α146'']], [[α149'']],)]
//│ L: 1 [list[([α196''], [α197''],)] ~ ([α205''], [α206''],), list[([α196''], [α197''],)] <: α199'', [α199'' - (α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])) - α201'', L: 0 [(α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])), (α199'' -> (α200'' -> α199'')) :> (α201'' -> (α202'' -> [α153'']))]], [α201'' - (α201'' -> (α202'' -> [α153''])) ~ (α199'' -> (α200'' -> α199'')) - α199'', L: 0 [(α201'' -> (α202'' -> [α153''])) ~ (α199'' -> (α200'' -> α199'')), (α201'' -> (α202'' -> [α153''])) <: (α199'' -> (α200'' -> α199''))]], α199'' <: ([α205''], [α206''],)]
//│ L: 2 [list[([α196''], [α197''],)] ~ ([[α146'']], [[list[α150'']]],), list[([α196''], [α197''],)] <: α199'', [α199'' - (α200'' -> α199'') ~ (α202'' -> [α153'']) - α153'', L: 1 [(α200'' -> α199'') ~ (α202'' -> [α153'']), [(α200'' -> α199'') - (α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])) - (α202'' -> [α153'']), L: 0 [(α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])), (α199'' -> (α200'' -> α199'')) :> (α201'' -> (α202'' -> [α153'']))]]]], α153'' :> α152'', α152'' :> ([[α146'']], [[list[α150'']]],)]
//│ L: 0 [list[([α196''], [α197''],)] ~ ([α205''], [α206''],), list[([α196''], [α197''],)] <: α199'', α199'' <: ([α205''], [α206''],)]
//│ L: 2 [list[([α196''], [α197''],)] ~ ([α205''], [α206''],), list[([α196''], [α197''],)] <: α199'', [α199'' - (α200'' -> α199'') ~ (α202'' -> [α153'']) - α153'', L: 1 [(α200'' -> α199'') ~ (α202'' -> [α153'']), [(α200'' -> α199'') - (α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])) - (α202'' -> [α153'']), L: 0 [(α199'' -> (α200'' -> α199'')) ~ (α201'' -> (α202'' -> [α153''])), (α199'' -> (α200'' -> α199'')) :> (α201'' -> (α202'' -> [α153'']))]]]], α153'' :> α152'', α152'' <: α153'', [α153'' - (α202'' -> [α153'']) ~ (α200'' -> α199'') - α199'', L: 1 [(α202'' -> [α153'']) ~ (α200'' -> α199''), [(α202'' -> [α153'']) - (α201'' -> (α202'' -> [α153''])) ~ (α199'' -> (α200'' -> α199'')) - (α200'' -> α199''), L: 0 [(α201'' -> (α202'' -> [α153''])) ~ (α199'' -> (α200'' -> α199'')), (α201'' -> (α202'' -> [α153''])) <: (α199'' -> (α200'' -> α199''))]]]], α199'' <: ([α205''], [α206''],)]


type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ [ERROR] Type `int` does not match `float`
//│ 
//│         (int) ---> (float)
//│ 
//│ ◉ (int) comes from
//│ │  - l.16   | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ │                                                                           ^
//│ ▼ 
//│ ◉ (float) comes from
//│    - lib. let ( /. ): float -> float -> float
//│                                ^^^^^
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ eval: (expr, float, float,) -> float
//│ U max: 14, total: 193
//│ UERR 1 errors
//│ L: 0 [int ~ float, int <: float]


let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?e) <--- (?c) ~~~~ (?d) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) comes from
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?e -> ?d -> ?e) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?d -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?e) is assumed for
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?c list) comes from
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed for
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (?d -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?e -> ?d -> ?e) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) comes from
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 31
//│ UERR 1 errors
//│ L: 2 [int ~ list['a363'], int <: α364', [α364' - (α362' -> α364') ~ (α360' -> α359') - α359', L: 1 [(α362' -> α364') ~ (α360' -> α359'), [(α362' -> α364') - (α361' -> (α362' -> α364')) ~ (α359' -> (α360' -> α359')) - (α360' -> α359'), L: 0 [(α361' -> (α362' -> α364')) ~ (α359' -> (α360' -> α359')), (α361' -> (α362' -> α364')) <: (α359' -> (α360' -> α359'))]]]], α359' :> α358', [α358' - list[α358'] ~ list[α360'] - α360', L: 0 [list[α358'] ~ list[α360'], list[α358'] :> α353', α353' <: list[α360']]], [α360' - (α360' -> α359') ~ (α362' -> α364') - α362', L: 1 [(α360' -> α359') ~ (α362' -> α364'), [(α360' -> α359') - (α359' -> (α360' -> α359')) ~ (α361' -> (α362' -> α364')) - (α362' -> α364'), L: 0 [(α359' -> (α360' -> α359')) ~ (α361' -> (α362' -> α364')), (α359' -> (α360' -> α359')) :> (α361' -> (α362' -> α364'))]]]], α362' <: list['a363']]


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ [ERROR] Type `_ list` does not match `(_ -> _) -> _ list -> _ list`
//│ 
//│         (_ list) <--- (?b) ~~~~ ((_ -> _) -> _ list -> _ list)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - l.3    | [] -> ""
//│ │             ^^
//│ │  - l.2    match sl with
//│ │                 ^^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.1  let rec sepConcat sep sl =
//│                                 ^^
//│   ◉ (?b -> _) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?a) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> _) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ ((_ -> _) -> _ list -> _ list) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                                         ^^^^^^^^
//│    - lib. let List.map: ('a -> 'b) -> 'a list -> 'b list
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `string` does not match `(_ * _) -> _`
//│ 
//│         (string) <--- (?e) ~~~~ (?c) ---> (?d) ~~~~ (?b) ---> ((_ * _) -> _)
//│ 
//│ ◉ (string) comes from
//│ ▲  - lib. let (^): string -> string -> string
//│ │                  ^^^^^^
//│ │  - l.5        let f a x = a ^ (sep ^ x) in
//│ │                           ^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.5        let f a x = a ^ (sep ^ x) in
//│                       ^
//│   ◉ (?e -> _ -> string) comes from
//│   │  - l.5        let f a x = a ^ (sep ^ x) in
//│   │                     ^^^^^^^^^^^^^^^^^^^
//│   │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│   │                                                           ^
//│   ▼ 
//│   ◉ (?c -> _ -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│ │                                            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│    - l.2    match sl with
//│             ^^^^^^^^^^^^^
//│             | [] -> "" ...
//│             ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?d) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?a) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> ?b) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * _) -> _) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ sepConcat: string -> list[string] -> string
//│ stringOfList: 'a -> 'b -> string
//│ U max: 7, total: 76
//│ UERR 2 errors
//│ L: 2 [string ~ (([[α378']], [[α379']],) -> α393'), string :> α387', [α387' - (α387' -> (α385' -> [string])) ~ (α386' -> (α384' -> α386')) - α386', L: 0 [(α387' -> (α385' -> [string])) ~ (α386' -> (α384' -> α386')), (α387' -> (α385' -> [string])) <: (α386' -> (α384' -> α386'))]], α386' <: α388', [α388' - (α382' -> α388') ~ ([((α390' -> α391') -> (list[α390'] -> list[α391']))] -> α392') - α392', L: 1 [(α382' -> α388') ~ ([((α390' -> α391') -> (list[α390'] -> list[α391']))] -> α392'), [(α382' -> α388') - (α381' -> (α382' -> α388')) ~ ([string] -> α389') - α389', L: 0 [(α381' -> (α382' -> α388')) ~ ([string] -> α389'), (α381' -> (α382' -> α388')) <: sepConcat380', sepConcat380' <: ([string] -> α389')]], α389' <: ([((α390' -> α391') -> (list[α390'] -> list[α391']))] -> α392')]], α392' <: (([[α378']], [[α379']],) -> α393')]
//│ L: 2 [list['a383'] ~ ((α390' -> α391') -> (list[α390'] -> list[α391'])), list['a383'] :> α382', [α382' - (α382' -> α388') ~ ([((α390' -> α391') -> (list[α390'] -> list[α391']))] -> α392') - ((α390' -> α391') -> (list[α390'] -> list[α391'])), L: 1 [(α382' -> α388') ~ ([((α390' -> α391') -> (list[α390'] -> list[α391']))] -> α392'), [(α382' -> α388') - (α381' -> (α382' -> α388')) ~ ([string] -> α389') - α389', L: 0 [(α381' -> (α382' -> α388')) ~ ([string] -> α389'), (α381' -> (α382' -> α388')) <: sepConcat380', sepConcat380' <: ([string] -> α389')]], α389' <: ([((α390' -> α391') -> (list[α390'] -> list[α391']))] -> α392')]]]

// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?c) ~~~~ (?digitsOfInt) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                                                  ^^^^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?a) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                                ^^
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                           ^^
//│   ◉ (?c -> _) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt -> _) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?digitsOfInt) is assumed for
//│ ▲  - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│ │                 ^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ~~~~ (?c) ---> (?b) <--- (?g) ~~~~ (?f) ~~~~ (?e) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                              ^
//│   ◉ (int -> ?a) comes from
//│   ▲  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^
//│   │  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?sumListHelper) is assumed for
//│   ▲  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c -> _ -> ?b) comes from
//│      - l.1  let rec sumListHelper total xs =
//│                                   ^^^^^^^^^^
//│               match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.1  let rec sumListHelper total xs =
//│ │                               ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │                                 ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?g) is assumed for
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ list -> ?g) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?f) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                ^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?f) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?e) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│ │                                         ^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                           ^^^^^^^^^^^^^^^^^^^
//│ sumListHelper: int -> list[int] -> int
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> list[int]
//│ sumList: list[int] -> int
//│ additivePersistence: 'a -> 'b
//│ U max: 20, total: 226
//│ UERR 2 errors
//│ L: 2 [int ~ ([α441'] -> α466'), [int - ([int] -> α451') ~ (α447' -> (α444' -> α445')) - α447', L: 0 [([int] -> α451') ~ (α447' -> (α444' -> α445')), ([int] -> α451') :> sumListHelper452', sumListHelper452' :> (α447' -> (α444' -> α445'))]], α447' <: α445', α445' :> α448', [α448' - ([list['a449']] -> α448') ~ ([α443'] -> α446') - α446', L: 1 [([list['a449']] -> α448') ~ ([α443'] -> α446'), ([list['a449']] -> α448') :> α450', [α450' - ([int] -> α450') ~ ([int] -> α451') - α451', L: 0 [([int] -> α450') ~ ([int] -> α451'), ([int] -> α450') :> sumListHelper452', sumListHelper452' <: ([int] -> α451')]], α451' <: ([α443'] -> α446')]], [α446' - (α443' -> α446') ~ ([digitsOfInt453'] -> α465') - α465', L: 0 [(α443' -> α446') ~ ([digitsOfInt453'] -> α465'), (α443' -> α446') <: sumList442', sumList442' <: ([digitsOfInt453'] -> α465')]], α465' <: ([α441'] -> α466')]
//│ L: 2 [list['a449'] ~ (α454' -> α464'), [list['a449'] - ([list['a449']] -> α448') ~ ([α443'] -> α446') - α443', L: 1 [([list['a449']] -> α448') ~ ([α443'] -> α446'), ([list['a449']] -> α448') :> α450', [α450' - ([int] -> α450') ~ ([int] -> α451') - α451', L: 0 [([int] -> α450') ~ ([int] -> α451'), ([int] -> α450') :> sumListHelper452', sumListHelper452' <: ([int] -> α451')]], α451' <: ([α443'] -> α446')]], [α443' - (α443' -> α446') ~ ([digitsOfInt453'] -> α465') - digitsOfInt453', L: 0 [(α443' -> α446') ~ ([digitsOfInt453'] -> α465'), (α443' -> α446') <: sumList442', sumList442' <: ([digitsOfInt453'] -> α465')]], digitsOfInt453' :> (α454' -> α464')]

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.6    match explode x with
//│ │                 ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    match explode x with
//│                   ^^^^^^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.8        if (getHeads (explode x)) = []
//│ │                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.8        if (getHeads (explode x)) = []
//│                               ^^^^^^^
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.728:	  match explode x with
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.730:	      if (getHeads (explode x)) = []
//│ ╙──      	                    ^^^^^^^
//│ matchHeads: 'a -> bool
//│ U max: 10, total: 205
//│ UERR 2 errors
//│ L: 0 [err ~ ([α505'] -> α522'), err <: ([α505'] -> α522')]
//│ L: 0 [err ~ ([α505'] -> α506'), err <: ([α505'] -> α506')]

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                      ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                        ^^^^^^^^^^^^^
//│ [ERROR] Type `err` does not match `_ list -> _`
//│ 
//│         (err) ---> (_ list -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                                                     ^^
//│ ▼ 
//│ ◉ (_ list -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                                                       ^^
//│ ╔══[ERROR] identifier not found: String.length
//│ ║  
//│ ║  l.775:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	             ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: s.
//│ ║  
//│ ║  l.775:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	                                            ^^
//│ explode: 'a -> list['b]
//│ U max: 6, total: 52
//│ UERR 2 errors
//│ L: 0 [err ~ (list[[α556'']] -> α561''), err <: (list[[α556'']] -> α561'')]
//│ L: 0 [err ~ ([α554'] -> α558''), err <: ([α554'] -> α558'')]

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.818:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.7    | [] -> 0
//│                     ^
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]
//│ additivePersistence: 'a -> 'b
//│   where
//│     'b = bool, int
//│ U max: 5, total: 109
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α621', α621' <: α612', α612' :> int]


// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) comes from
//│ │  - l.-580  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                           ^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.11       then buildSine build (rand, (d - 1))
//│                      ^^^^^^^^^^^^^^^
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) comes from
//│ │  - l.-580  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                             ^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.12       else buildCosine build (rand, (d - 1));;
//│                      ^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) -> _` does not match `expr`
//│ 
//│         ((_ * _) -> _) ---> (?build) ---> (?b) <--- (?build) ---> (?a) ---> (expr)
//│ 
//│ ◉ ((_ * _) -> _) comes from
//│ │  - l.5  let rec build (rand,depth) =
//│ │                       ^^^^^^^^^^^^^^
//│ │           let r = rand 0.4 in ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ ▼ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.11       then buildSine build (rand, (d - 1))
//│ │                              ^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                                ^
//│ ▼ 
//│ ◉ (expr) comes from
//│    - l.-584  | Sine of expr
//│                        ^^^^
//│ buildCosine: expr -> expr
//│ buildSine: expr -> expr
//│ buildX: () -> expr
//│ buildY: () -> expr
//│ build: 'build
//│   where
//│     'build = (float -> int, int,) -> () -> expr, expr
//│ U max: 3, total: 31
//│ UERR 3 errors
//│ L: 0 [expr ~ (([[α627']], [[int]],) -> α638'), expr <: (([[α627']], [[int]],) -> α638')]
//│ L: 0 [(([α627'], [α628'],) -> α630') ~ expr, (([α627'], [α628'],) -> α630') <: build626', build626' <: α637', α637' :> build626', build626' <: α635', α635' <: expr]
//│ L: 0 [expr ~ (([[α627']], [[int]],) -> α636'), expr <: (([[α627']], [[int]],) -> α636')]

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ [ERROR] Type `_ -> _ list -> _ list` does not match `int`
//│ 
//│         (_ -> _ list -> _ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ -> _ list -> _ list) comes from
//│ │  - l.2  let x l = List.map string_of_int;;
//│ │               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                 ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                      ^^^
//│ [ERROR] Type `(int * int * int) list` does not match `int`
//│ 
//│         ((int * int * int) list) ---> (?a) ---> (int)
//│ 
//│ ◉ ((int * int * int) list) comes from
//│ │  - l.3  let y = [1, 2, 3];;
//│ │                 ^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                  ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                     ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                             ^^^
//│ remainder: int -> int -> int
//│ x: 'a -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ mulByDigit: 'b -> list['a] -> list[int]
//│ U max: 5, total: 55
//│ UERR 2 errors
//│ L: 0 [list[([[int]], [[int]], [[int]],)] ~ int, list[([[int]], [[int]], [[int]],)] <: α658', α658' <: int]
//│ L: 0 [(α660' -> [(list[α661'] -> list[α662'])]) ~ int, (α660' -> [(list[α661'] -> list[α662'])]) <: α657', α657' <: int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?c) ~~~~ (?e) ~~~~ (?c) ~~~~ (?e) ~~~~ (?a) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                                                       ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?e) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?b) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?b) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?c) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?b) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?b) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?e) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?a) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?c) ~~~~ (?e) ~~~~ (?c) ~~~~ (?e) ~~~~ (?a) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?e) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?b) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?b) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?c) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?b) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?b) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?d) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?e) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?d) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?a) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padLength: list['a] -> list['b] -> int
//│ padZero: list[list[int]] -> list['a] -> list[list[int]]
//│ U max: 9, total: 179
//│ UERR 2 errors
//│ L: 2 [list['a708'] ~ ([α687'] -> α720'), list['a708'] <: α709', [α709' - (α711' -> α709') ~ ([int] -> α710') - α710', L: 1 [(α711' -> α709') ~ ([int] -> α710'), [(α711' -> α709') - (α707' -> (α711' -> α709')) ~ ([α707'] -> α712') - α712', L: 0 [(α707' -> (α711' -> α709')) ~ ([α707'] -> α712'), (α707' -> (α711' -> α709')) <: clone706', clone706' <: ([α707'] -> α712')]], α712' <: ([int] -> α710')]], [α710' - ([int] -> α710') ~ (α711' -> α709') - α709', L: 1 [([int] -> α710') ~ (α711' -> α709'), ([int] -> α710') :> α712', [α712' - ([α707'] -> α712') ~ ([int] -> α714') - α714', L: 0 [([α707'] -> α712') ~ ([int] -> α714'), ([α707'] -> α712') :> clone706', clone706' <: ([int] -> α714')]], [α714' - ([int] -> α714') ~ (α707' -> (α711' -> α709')) - (α711' -> α709'), L: 0 [([int] -> α714') ~ (α707' -> (α711' -> α709')), ([int] -> α714') :> clone706', clone706' :> (α707' -> (α711' -> α709'))]]]], [α709' - (α711' -> α709') ~ ([int] -> α710') - α710', L: 1 [(α711' -> α709') ~ ([int] -> α710'), [(α711' -> α709') - (α707' -> (α711' -> α709')) ~ ([int] -> α714') - α714', L: 0 [(α707' -> (α711' -> α709')) ~ ([int] -> α714'), (α707' -> (α711' -> α709')) <: clone706', clone706' <: ([int] -> α714')]], [α714' - ([int] -> α714') ~ ([α707'] -> α712') - α712', L: 0 [([int] -> α714') ~ ([α707'] -> α712'), ([int] -> α714') :> clone706', clone706' <: ([α707'] -> α712')]], α712' <: ([int] -> α710')]], [α710' - ([int] -> α710') ~ ([[int]] -> α719') - α719', L: 1 [([int] -> α710') ~ ([[int]] -> α719'), ([int] -> α710') :> α712', [α712' - ([α707'] -> α712') ~ ([int] -> α714') - α714', L: 0 [([α707'] -> α712') ~ ([int] -> α714'), ([α707'] -> α712') :> clone706', clone706' <: ([int] -> α714')]], α714' <: ([[int]] -> α719')]], α719' <: ([α687'] -> α720')]
//│ L: 2 [list[[α707']] ~ ([α687'] -> α720'), list[[α707']] <: α709', [α709' - (α711' -> α709') ~ ([int] -> α710') - α710', L: 1 [(α711' -> α709') ~ ([int] -> α710'), [(α711' -> α709') - (α707' -> (α711' -> α709')) ~ ([α707'] -> α712') - α712', L: 0 [(α707' -> (α711' -> α709')) ~ ([α707'] -> α712'), (α707' -> (α711' -> α709')) <: clone706', clone706' <: ([α707'] -> α712')]], α712' <: ([int] -> α710')]], [α710' - ([int] -> α710') ~ (α711' -> α709') - α709', L: 1 [([int] -> α710') ~ (α711' -> α709'), ([int] -> α710') :> α712', [α712' - ([α707'] -> α712') ~ ([int] -> α714') - α714', L: 0 [([α707'] -> α712') ~ ([int] -> α714'), ([α707'] -> α712') :> clone706', clone706' <: ([int] -> α714')]], [α714' - ([int] -> α714') ~ (α707' -> (α711' -> α709')) - (α711' -> α709'), L: 0 [([int] -> α714') ~ (α707' -> (α711' -> α709')), ([int] -> α714') :> clone706', clone706' :> (α707' -> (α711' -> α709'))]]]], [α709' - (α711' -> α709') ~ ([int] -> α710') - α710', L: 1 [(α711' -> α709') ~ ([int] -> α710'), [(α711' -> α709') - (α707' -> (α711' -> α709')) ~ ([int] -> α714') - α714', L: 0 [(α707' -> (α711' -> α709')) ~ ([int] -> α714'), (α707' -> (α711' -> α709')) <: clone706', clone706' <: ([int] -> α714')]], [α714' - ([int] -> α714') ~ ([α707'] -> α712') - α712', L: 0 [([int] -> α714') ~ ([α707'] -> α712'), ([int] -> α714') :> clone706', clone706' <: ([α707'] -> α712')]], α712' <: ([int] -> α710')]], [α710' - ([int] -> α710') ~ ([[int]] -> α719') - α719', L: 1 [([int] -> α710') ~ ([[int]] -> α719'), ([int] -> α710') :> α712', [α712' - ([α707'] -> α712') ~ ([int] -> α714') - α714', L: 0 [([α707'] -> α712') ~ ([int] -> α714'), ([α707'] -> α712') :> clone706', clone706' <: ([int] -> α714')]], α714' <: ([[int]] -> α719')]], α719' <: ([α687'] -> α720')]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> list[int]



// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?a) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1368  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?b) ---> (?a) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ │                                            ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?c) ---> (?a) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1359    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?d) ---> (?b) ~~~~ (?f) ---> (?a) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?f) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1368  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?c) ---> (?a) ~~~~ (?e) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-1361  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1361  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?d) ---> (?b) ~~~~ (?g) ---> (?a) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?g) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?c) ---> (?a) ~~~~ (?e) ~~~~ (?a) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-1361  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1361  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a * _ list) comes from
//│      - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1368  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ -> _`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?d) <--- (?c) <--- (_ -> _)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1362let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ list`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?d) <--- (?c) <--- (_ list)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?c) ---> (?d) ---> (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?b) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.-393  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                                        ^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.-393  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│   │                                         ^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│      - l.-393  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                             ^^^^^^^^^^^^
//│     ◉ (_ -> ?c) comes from
//│     ▲  - l.-393  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│     │                                         ^^^^^^^^^^
//│     │  - l.-396let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-396let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?c) ---> (?d) ---> (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) <--- (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - lib. let List.rev: 'a list -> 'a list
//│ │                       ^^^^^^^
//│ │  - l.-395  match List.rev l with
//│ │                           ^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.-396let rec mulByDigit i l =
//│                                 ^
//│   ◉ (?b -> _) comes from
//│      - l.-396let rec mulByDigit i l =
//│                                   ^^^
//│                match List.rev l with ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     │  - l.-396let rec mulByDigit i l =
//│     │                             ^^^^^
//│     │            match List.rev l with ...
//│     │            ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.-396let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-396let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?a) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?b) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?c) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?c -> _ -> ?e) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a -> _ -> ?a) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?c -> _ -> ?e) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?b) ---> (?d) ---> (?e) ~~~~ (?a) ~~~~ (?c) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?c -> _ -> ?e) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a -> _ -> ?a) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?c -> _ -> ?e) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?c) ---> (?d) ---> (?b) ~~~~ (?a) ~~~~ (?b) <--- (?d) <--- (?c) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1362let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?d) ---> (?b) ~~~~ (?h) ---> (?a) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?h) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?i) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e) is assumed for
//│      - l.-1367  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?e) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?e) comes from
//│       │  - l.-1360    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?g -> _ -> ?g) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?g) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?g) is assumed for
//│     ◉ (_ -> ?g) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?g -> _ -> ?g) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?e) comes from
//│          - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?e) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?e) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?e) ---> (?c) ~~~~ (?i) ---> (?a) ~~~~ (?b) ~~~~ (?a) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?c * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?i * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?i) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│      - l.-1367  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?f) comes from
//│       │  - l.-1360    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?h -> _ -> ?h) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?h) is assumed for
//│   │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b * _) comes from
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?b * _) comes from
//│   ▲  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?h) is assumed for
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?h -> _ -> ?h) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?f) comes from
//│          - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?f) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a * _) comes from
//│      - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1368  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?e) ---> (?c) ~~~~ (?i) ---> (?a) ~~~~ (?b) ~~~~ (?a) <--- (?i) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?c * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?i * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?i) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│      - l.-1367  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?f) comes from
//│       │  - l.-1360    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?h -> _ -> ?h) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?h) is assumed for
//│   │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b * _) comes from
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?b * _) comes from
//│   ▲  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?h) is assumed for
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?h -> _ -> ?h) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?f) comes from
//│          - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?f) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a * _) comes from
//│      - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │ 
//│ ◉ (?i) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1359    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?e) ---> (?c) ~~~~ (?i) ---> (?a) ~~~~ (?b) ~~~~ (?a) <--- (?i) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?c * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?i * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?i) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│      - l.-1367  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?f) comes from
//│       │  - l.-1360    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?h -> _ -> ?h) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?h) is assumed for
//│   │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b * _) comes from
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?b * _) comes from
//│   ▲  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?h) is assumed for
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?h -> _ -> ?h) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?f) comes from
//│          - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?f) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a * _) comes from
//│      - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?i) is assumed for
//│    - l.-1361  let add (l1,l2) =
//│                        ^^
//│   ◉ (?i * _) comes from
//│   ▲  - l.-1361  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1366  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?e) ---> (?c) ~~~~ (?i) ---> (?a) ~~~~ (?b) ~~~~ (?a) <--- (?i) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1362let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1356  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?c * _ list) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?i * _) comes from
//│      - l.-1361  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?i) is assumed for
//│ │  - l.-1361  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.-1369let padZero l1 l2 =
//│                         ^^
//│   ◉ (?a * _) comes from
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j) is assumed for
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?f) is assumed for
//│      - l.-1367  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?f) comes from
//│       │  - l.-1360    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?h -> _ -> ?h) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?h) is assumed for
//│   │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?b * _) comes from
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?b * _) comes from
//│   ▲  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?h) is assumed for
//│      - l.-1357    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?h -> _ -> ?h) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1357    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?f) comes from
//│          - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?f) comes from
//│        - l.-1360    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?f) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?j) is assumed for
//│   ▲  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a * _) comes from
//│      - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1360    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?i) is assumed for
//│    - l.-1361  let add (l1,l2) =
//│                        ^^
//│   ◉ (?i * _) comes from
//│   ▲  - l.-1361  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1356  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1367  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c * _ list) comes from
//│      - l.-1365  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.-1369let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1368  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ helper: int -> int
//│ tenEx: int -> list[int] -> list[int]
//│ bigMul: 'b -> list[int] -> list[int]
//│   where
//│     'b = list[int] -> list[('c, list['a],)], list['d]
//│ U max: 13, total: 318
//│ UERR 22 errors
//│ L: 0 [(α916'' -> α856'') ~ list['a794''], (α916'' -> α856'') <: α792'', α792'' :> list['a794'']]
//│ L: 3 [([α929'], [[[α791'']]],) ~ list[α864''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: α886'', [α886'' - ([[α886'']], [[α858'']],) ~ ([α859''], [α857''],) - α859'', L: 2 [([[α886'']], [[α858'']],) ~ ([α859''], [α857''],), ([[α886'']], [[α858'']],) <: α887'', α887'' <: α888'', [α888'' - (α891'' -> [α888'']) ~ (α892'' -> α889'') - α889'', L: 1 [(α891'' -> [α888'']) ~ (α892'' -> α889''), [(α891'' -> [α888'']) - (α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')) - (α892'' -> α889''), L: 0 [(α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')), (α890'' -> (α891'' -> [α888''])) <: (α889'' -> (α892'' -> α889''))]]]], α889'' <: ([α859''], [α857''],)]], [α859'' - ([α859''], [α857''],) ~ ([[α886'']], [[α858'']],) - α886'', L: 2 [([α859''], [α857''],) ~ ([[α886'']], [[α858'']],), ([α859''], [α857''],) :> α889'', [α889'' - (α892'' -> α889'') ~ (α891'' -> [α888'']) - α888'', L: 1 [(α892'' -> α889'') ~ (α891'' -> [α888'']), [(α892'' -> α889'') - (α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])) - (α891'' -> [α888'']), L: 0 [(α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])), (α889'' -> (α892'' -> α889'')) :> (α890'' -> (α891'' -> [α888'']))]]]], α888'' :> α887'', α887'' :> ([[α886'']], [[α858'']],)]], α886'' :> α821'', α821'' <: list[α864'']]
//│ L: 2 [list['a960'] ~ (α961' -> α971'), list['a960'] <: α958', α958' <: α959', α959' <: α957', [α957' - (α954' -> α957') ~ (α950' -> α949') - α949', L: 1 [(α954' -> α957') ~ (α950' -> α949'), [(α954' -> α957') - (α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')) - (α950' -> α949'), L: 0 [(α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')), (α951' -> (α954' -> α957')) <: (α949' -> (α950' -> α949'))]]]], [α949' - (α950' -> α949') ~ (α954' -> α957') - α957', L: 1 [(α950' -> α949') ~ (α954' -> α957'), [(α950' -> α949') - (α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')) - (α954' -> α957'), L: 0 [(α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')), (α949' -> (α950' -> α949')) :> (α951' -> (α954' -> α957'))]]]], α957' :> α959', α959' :> α958', α958' :> (α961' -> α971')]
//│ L: 2 [list[α921'] ~ (α947' -> α948'), list[α921'] :> α919', [α919' - (α919' -> α922') ~ ([α779'] -> α929') - α779', L: 1 [(α919' -> α922') ~ ([α779'] -> α929'), [(α919' -> α922') - (α918' -> (α919' -> α922')) ~ (['a793'] -> α928') - α928', L: 0 [(α918' -> (α919' -> α922')) ~ (['a793'] -> α928'), (α918' -> (α919' -> α922')) <: mulByDigit917', mulByDigit917' <: (['a793'] -> α928')]], α928' <: ([α779'] -> α929')]], α779' <: (α947' -> α948')]
//│ L: 2 [(α961' -> α971') ~ ([α1085'], [α1086'],), (α961' -> α971') <: α958', α958' <: α959', α959' <: α957', [α957' - (α954' -> α957') ~ (α950' -> α949') - α949', L: 1 [(α954' -> α957') ~ (α950' -> α949'), [(α954' -> α957') - (α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')) - (α950' -> α949'), L: 0 [(α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')), (α951' -> (α954' -> α957')) <: (α949' -> (α950' -> α949'))]]]], α949' <: ([α1085'], [α1086'],)]
//│ L: 3 [([α929'], [[[α791'']]],) ~ list[α819''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: α886'', [α886'' - ([[α886'']], [[α858'']],) ~ ([α859''], [α857''],) - α859'', L: 2 [([[α886'']], [[α858'']],) ~ ([α859''], [α857''],), ([[α886'']], [[α858'']],) <: α887'', α887'' <: α888'', [α888'' - (α891'' -> [α888'']) ~ (α892'' -> α889'') - α889'', L: 1 [(α891'' -> [α888'']) ~ (α892'' -> α889''), [(α891'' -> [α888'']) - (α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')) - (α892'' -> α889''), L: 0 [(α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')), (α890'' -> (α891'' -> [α888''])) <: (α889'' -> (α892'' -> α889''))]]]], α889'' <: ([α859''], [α857''],)]], [α859'' - ([α859''], [α857''],) ~ ([[α886'']], [[α858'']],) - α886'', L: 2 [([α859''], [α857''],) ~ ([[α886'']], [[α858'']],), ([α859''], [α857''],) :> α889'', [α889'' - (α892'' -> α889'') ~ (α891'' -> [α888'']) - α888'', L: 1 [(α892'' -> α889'') ~ (α891'' -> [α888'']), [(α892'' -> α889'') - (α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])) - (α891'' -> [α888'']), L: 0 [(α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])), (α889'' -> (α892'' -> α889'')) :> (α890'' -> (α891'' -> [α888'']))]]]], α888'' :> α887'', α887'' :> ([[α886'']], [[α858'']],)]], α886'' <: list[α819'']]
//│ L: 3 [([α929'], [[[α791'']]],) ~ list[α797''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: α886'', [α886'' - ([[α886'']], [[α858'']],) ~ ([α859''], [α857''],) - α859'', L: 2 [([[α886'']], [[α858'']],) ~ ([α859''], [α857''],), ([[α886'']], [[α858'']],) <: α887'', α887'' <: α888'', [α888'' - (α891'' -> [α888'']) ~ (α892'' -> α889'') - α889'', L: 1 [(α891'' -> [α888'']) ~ (α892'' -> α889''), [(α891'' -> [α888'']) - (α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')) - (α892'' -> α889''), L: 0 [(α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')), (α890'' -> (α891'' -> [α888''])) <: (α889'' -> (α892'' -> α889''))]]]], α889'' <: ([α859''], [α857''],)]], [α859'' - ([α859''], [α857''],) ~ ([[α886'']], [[α858'']],) - α886'', L: 2 [([α859''], [α857''],) ~ ([[α886'']], [[α858'']],), ([α859''], [α857''],) :> α889'', [α889'' - (α892'' -> α889'') ~ (α891'' -> [α888'']) - α888'', L: 1 [(α892'' -> α889'') ~ (α891'' -> [α888'']), [(α892'' -> α889'') - (α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])) - (α891'' -> [α888'']), L: 0 [(α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])), (α889'' -> (α892'' -> α889'')) :> (α890'' -> (α891'' -> [α888'']))]]]], α888'' :> α887'', α887'' :> ([[α886'']], [[α858'']],)]], α886'' :> α821'', [α821'' - ([α821''], [α860''],) ~ ([[list[α797'']]], [[α846'']],) - list[α797''], L: 0 [([α821''], [α860''],) ~ ([[list[α797'']]], [[α846'']],), ([α821''], [α860''],) :> α863'', α863'' :> ([[list[α797'']]], [[α846'']],)]]]
//│ L: 1 [([α929'], [[[α791'']]],) ~ list[α797''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], [α821'' - ([α821''], [α860''],) ~ ([[list[α797'']]], [[α846'']],) - list[α797''], L: 0 [([α821''], [α860''],) ~ ([[list[α797'']]], [[α846'']],), ([α821''], [α860''],) :> α863'', α863'' :> ([[list[α797'']]], [[α846'']],)]]]
//│ L: 3 [([α929'], [[[α791'']]],) ~ list[α796''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: α886'', [α886'' - ([[α886'']], [[α858'']],) ~ ([α859''], [α857''],) - α859'', L: 2 [([[α886'']], [[α858'']],) ~ ([α859''], [α857''],), ([[α886'']], [[α858'']],) <: α887'', α887'' <: α888'', [α888'' - (α891'' -> [α888'']) ~ (α892'' -> α889'') - α889'', L: 1 [(α891'' -> [α888'']) ~ (α892'' -> α889''), [(α891'' -> [α888'']) - (α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')) - (α892'' -> α889''), L: 0 [(α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')), (α890'' -> (α891'' -> [α888''])) <: (α889'' -> (α892'' -> α889''))]]]], α889'' <: ([α859''], [α857''],)]], [α859'' - ([α859''], [α857''],) ~ ([[α886'']], [[α858'']],) - α886'', L: 2 [([α859''], [α857''],) ~ ([[α886'']], [[α858'']],), ([α859''], [α857''],) :> α889'', [α889'' - (α892'' -> α889'') ~ (α891'' -> [α888'']) - α888'', L: 1 [(α892'' -> α889'') ~ (α891'' -> [α888'']), [(α892'' -> α889'') - (α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])) - (α891'' -> [α888'']), L: 0 [(α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])), (α889'' -> (α892'' -> α889'')) :> (α890'' -> (α891'' -> [α888'']))]]]], α888'' :> α887'', α887'' :> ([[α886'']], [[α858'']],)]], α886'' :> α821'', [α821'' - ([α821''], [α860''],) ~ ([[α820'']], [[list[α822'']]],) - α820'', L: 0 [([α821''], [α860''],) ~ ([[α820'']], [[list[α822'']]],), ([α821''], [α860''],) :> α863'', α863'' :> α862'', α862'' :> ([[α820'']], [[list[α822'']]],)]], α820'' <: list[α796'']]
//│ L: 2 [([[int]], [[list['a1083']]],) ~ list['a960'], ([[int]], [[list['a1083']]],) <: α949', [α949' - (α950' -> α949') ~ (α954' -> α957') - α957', L: 1 [(α950' -> α949') ~ (α954' -> α957'), [(α950' -> α949') - (α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')) - (α954' -> α957'), L: 0 [(α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')), (α949' -> (α950' -> α949')) :> (α951' -> (α954' -> α957'))]]]], α957' :> α959', α959' :> α958', α958' :> list['a960']]
//│ L: 1 [([α929'], [[[α791'']]],) ~ list[α819''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: α886'', α886'' <: list[α819'']]
//│ L: 3 [([α929'], [[[α791'']]],) ~ list[α861''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: α886'', [α886'' - ([[α886'']], [[α858'']],) ~ ([[list[α861'']]], [[α858'']],) - list[α861''], L: 2 [([[α886'']], [[α858'']],) ~ ([[list[α861'']]], [[α858'']],), ([[α886'']], [[α858'']],) <: α887'', α887'' <: α888'', [α888'' - (α891'' -> [α888'']) ~ (α892'' -> α889'') - α889'', L: 1 [(α891'' -> [α888'']) ~ (α892'' -> α889''), [(α891'' -> [α888'']) - (α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')) - (α892'' -> α889''), L: 0 [(α890'' -> (α891'' -> [α888''])) ~ (α889'' -> (α892'' -> α889'')), (α890'' -> (α891'' -> [α888''])) <: (α889'' -> (α892'' -> α889''))]]]], [α889'' - (α892'' -> α889'') ~ (α891'' -> [α888'']) - α888'', L: 1 [(α892'' -> α889'') ~ (α891'' -> [α888'']), [(α892'' -> α889'') - (α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])) - (α891'' -> [α888'']), L: 0 [(α889'' -> (α892'' -> α889'')) ~ (α890'' -> (α891'' -> [α888''])), (α889'' -> (α892'' -> α889'')) :> (α890'' -> (α891'' -> [α888'']))]]]], α888'' :> ([[list[α861'']]], [[α858'']],)]]]
//│ L: 0 [([α929'], [[[α791'']]],) ~ list[α796''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', α820'' <: list[α796'']]
//│ L: 2 [(α961' -> α971') ~ ([α952'], [α953'],), (α961' -> α971') <: α958', α958' <: α959', α959' <: α957', [α957' - (α954' -> α957') ~ (α950' -> α949') - α949', L: 1 [(α954' -> α957') ~ (α950' -> α949'), [(α954' -> α957') - (α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')) - (α950' -> α949'), L: 0 [(α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')), (α951' -> (α954' -> α957')) <: (α949' -> (α950' -> α949'))]]]], [α949' - (α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')) - α951', L: 0 [(α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')), (α949' -> (α950' -> α949')) :> (α951' -> (α954' -> α957'))]], α951' <: ([α952'], [α953'],)]
//│ L: 2 [list['a960'] ~ ([α952'], [α953'],), list['a960'] <: α958', α958' <: α959', α959' <: α957', [α957' - (α954' -> α957') ~ (α950' -> α949') - α949', L: 1 [(α954' -> α957') ~ (α950' -> α949'), [(α954' -> α957') - (α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')) - (α950' -> α949'), L: 0 [(α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')), (α951' -> (α954' -> α957')) <: (α949' -> (α950' -> α949'))]]]], [α949' - (α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')) - α951', L: 0 [(α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')), (α949' -> (α950' -> α949')) :> (α951' -> (α954' -> α957'))]], α951' <: ([α952'], [α953'],)]
//│ L: 2 [list['a960'] ~ ([α1085'], [α1086'],), list['a960'] <: α958', α958' <: α959', α959' <: α957', [α957' - (α954' -> α957') ~ (α950' -> α949') - α949', L: 1 [(α954' -> α957') ~ (α950' -> α949'), [(α954' -> α957') - (α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')) - (α950' -> α949'), L: 0 [(α951' -> (α954' -> α957')) ~ (α949' -> (α950' -> α949')), (α951' -> (α954' -> α957')) <: (α949' -> (α950' -> α949'))]]]], α949' <: ([α1085'], [α1086'],)]
//│ L: 2 [([[int]], [[list['a1083']]],) ~ (α961' -> α971'), ([[int]], [[list['a1083']]],) <: α949', [α949' - (α950' -> α949') ~ (α954' -> α957') - α957', L: 1 [(α950' -> α949') ~ (α954' -> α957'), [(α950' -> α949') - (α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')) - (α954' -> α957'), L: 0 [(α949' -> (α950' -> α949')) ~ (α951' -> (α954' -> α957')), (α949' -> (α950' -> α949')) :> (α951' -> (α954' -> α957'))]]]], α957' :> α959', α959' :> α958', α958' :> (α961' -> α971')]
//│ L: 1 [([α929'], [[[α791'']]],) ~ list[α864''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: list[α864'']]
//│ L: 1 [([α929'], [[[α791'']]],) ~ list[α861''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], α821'' <: α886'', [α886'' - ([[α886'']], [[α858'']],) ~ ([[list[α861'']]], [[α858'']],) - list[α861''], L: 0 [([[α886'']], [[α858'']],) ~ ([[list[α861'']]], [[α858'']],), ([[α886'']], [[α858'']],) <: α887'', α887'' <: α888'', α888'' :> ([[list[α861'']]], [[α858'']],)]]]
//│ L: 2 [list['a920'] ~ (α947' -> α948'), [list['a920'] - ([list['a920']] -> α926') ~ ([α779'] -> α929') - α779', L: 1 [([list['a920']] -> α926') ~ ([α779'] -> α929'), ([list['a920']] -> α926') :> α927', [α927' - ([α918'] -> α927') ~ (['a793'] -> α928') - α928', L: 0 [([α918'] -> α927') ~ (['a793'] -> α928'), ([α918'] -> α927') :> mulByDigit917', mulByDigit917' <: (['a793'] -> α928')]], α928' <: ([α779'] -> α929')]], α779' <: (α947' -> α948')]
//│ L: 1 [([α929'], [[[α791'']]],) ~ list[α796''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', [α820'' - ([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],) - α821'', L: 0 [([[α820'']], [[list[α822'']]],) ~ ([α821''], [α860''],), ([[α820'']], [[list[α822'']]],) <: α862'', α862'' <: α863'', α863'' <: ([α821''], [α860''],)]], [α821'' - ([α821''], [α860''],) ~ ([[α820'']], [[list[α822'']]],) - α820'', L: 0 [([α821''], [α860''],) ~ ([[α820'']], [[list[α822'']]],), ([α821''], [α860''],) :> α863'', α863'' :> α862'', α862'' :> ([[α820'']], [[list[α822'']]],)]], α820'' <: list[α796'']]
//│ L: 0 [([α929'], [[[α791'']]],) ~ list[α797''], ([α929'], [[[α791'']]],) <: α795'', α795'' <: α820'', α820'' <: list[α797'']]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ [ERROR] Type `_ -> _` does not match `_ * bool`
//│ 
//│         (_ -> _) <--- (?c) ~~~~ (?a) <--- (?b) <--- (_ * bool)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                 ^
//│ │ 
//│ ◉ (?c) is assumed for
//│    - l.3  let rec wwhile (f,b) =
//│                           ^
//│   ◉ (?c * _) comes from
//│      - l.3  let rec wwhile (f,b) =
//│                            ^^^^^
//│     ◉ ((?c * _) -> _) comes from
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                        ^^^^^^^
//│     │           match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ (?wwhile) is assumed for
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ ((?a * _) -> _) comes from
//│        - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                    ^^^^^^
//│   ◉ (?a * _) comes from
//│      - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                         ^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * bool) comes from
//│    - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│                                                       ^^^^^^^^^^^
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b
//│ U max: 10, total: 58
//│ UERR 1 errors
//│ L: 2 [([α1117'] -> α1122') ~ ([[[α1125']]], [[bool]],), ([α1117'] -> α1122') :> α1116', [α1116' - ([α1116'], [α1117'],) ~ ([[α1127']], [[α1114']],) - α1127', L: 1 [([α1116'], [α1117'],) ~ ([[α1127']], [[α1114']],), [([α1116'], [α1117'],) - (([α1116'], [α1117'],) -> α1121') ~ (([[α1127']], [[α1114']],) -> α1129') - ([[α1127']], [[α1114']],), L: 0 [(([α1116'], [α1117'],) -> α1121') ~ (([[α1127']], [[α1114']],) -> α1129'), (([α1116'], [α1117'],) -> α1121') <: wwhile1115', wwhile1115' <: (([[α1127']], [[α1114']],) -> α1129')]]]], α1127' :> α1128', α1128' :> ([[[α1125']]], [[bool]],)]


// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?b) <--- (?a) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?a) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (?d) <--- (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                                                    ^^^^^^^
//│   ◉ ((_ * _) list) comes from
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a list) comes from
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.26     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?b list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?b) is assumed for
//│   ◉ (?b -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?c -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?c -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.16       if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.16       if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.16       if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?c) <--- (?b) ~~~~ (?a) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.14     let f a x =
//│                       ^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     │  - l.14     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?a -> _) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?a -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?a -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 33, total: 505
//│ UERR 3 errors
//│ L: 2 [list['a1230''] ~ ([α1228''], [α1229''],), list['a1230''] <: α1231'', α1231'' :> α1227'', [α1227'' - (α1227'' -> α1225'') ~ (α1220'' -> α1219'') - α1220'', L: 1 [(α1227'' -> α1225'') ~ (α1220'' -> α1219''), [(α1227'' -> α1225'') - (α1221'' -> (α1227'' -> α1225'')) ~ (α1219'' -> (α1220'' -> α1219'')) - (α1220'' -> α1219''), L: 0 [(α1221'' -> (α1227'' -> α1225'')) ~ (α1219'' -> (α1220'' -> α1219'')), (α1221'' -> (α1227'' -> α1225'')) <: (α1219'' -> (α1220'' -> α1219''))]]]], [α1220'' - (α1220'' -> α1219'') ~ (α1227'' -> α1225'') - α1227'', L: 1 [(α1220'' -> α1219'') ~ (α1227'' -> α1225''), [(α1220'' -> α1219'') - (α1219'' -> (α1220'' -> α1219'')) ~ (α1221'' -> (α1227'' -> α1225'')) - (α1227'' -> α1225''), L: 0 [(α1219'' -> (α1220'' -> α1219'')) ~ (α1221'' -> (α1227'' -> α1225'')), (α1219'' -> (α1220'' -> α1219'')) :> (α1221'' -> (α1227'' -> α1225''))]]]], α1227'' <: ([α1228''], [α1229''],)]
//│ L: 0 [list['a1210'''] ~ ([α1213'''], [α1214'''],), list['a1210'''] <: α1209''', α1209''' :> α1205''', α1205''' <: ([α1213'''], [α1214'''],)]
//│ L: 2 [([α1217''], [α1218''],) ~ list['a1230''], [([α1217''], [α1218''],) - list[([α1217''], [α1218''],)] ~ list[α1233''] - α1233'', L: 0 [list[([α1217''], [α1218''],)] ~ list[α1233''], list[([α1217''], [α1218''],)] <: list[α1233'']]], [α1233'' - list[α1233''] ~ list[α1220''] - α1220'', L: 0 [list[α1233''] ~ list[α1220''], list[α1233''] <: list[α1220'']]], [α1220'' - (α1220'' -> α1219'') ~ (α1227'' -> α1225'') - α1227'', L: 1 [(α1220'' -> α1219'') ~ (α1227'' -> α1225''), [(α1220'' -> α1219'') - (α1219'' -> (α1220'' -> α1219'')) ~ (α1221'' -> (α1227'' -> α1225'')) - (α1227'' -> α1225''), L: 0 [(α1219'' -> (α1220'' -> α1219'')) ~ (α1221'' -> (α1227'' -> α1225'')), (α1219'' -> (α1220'' -> α1219'')) :> (α1221'' -> (α1227'' -> α1225''))]]]], α1227'' <: α1231'', α1231'' :> list['a1230'']]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.15     let base = 0 in
//│ │                        ^
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.14     let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.14     let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?b -> _ -> int) comes from
//│   │  - l.14     let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.17     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?a -> _ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│    - l.14     let f a x = (a + x) mod 10 in
//│                           ^^^^^^^^^^^^^^
//│    - lib. let mod: int -> int -> int
//│                                  ^^^
//│   ◉ (_ -> int) comes from
//│      - l.14     let f a x = (a + x) mod 10 in
//│                         ^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> int) comes from
//│     │  - l.14     let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.17     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 59, total: 520
//│ UERR 3 errors
//│ L: 0 [int ~ ([α1387''], [α1388''],), int <: α1380'', α1380'' <: ([α1387''], [α1388''],)]
//│ L: 2 [int ~ ([α1387''], [α1388''],), [int - (α1383'' -> [int]) ~ (α1381'' -> α1380'') - α1380'', L: 1 [(α1383'' -> [int]) ~ (α1381'' -> α1380''), [(α1383'' -> [int]) - (α1382'' -> (α1383'' -> [int])) ~ (α1380'' -> (α1381'' -> α1380'')) - (α1381'' -> α1380''), L: 0 [(α1382'' -> (α1383'' -> [int])) ~ (α1380'' -> (α1381'' -> α1380'')), (α1382'' -> (α1383'' -> [int])) <: (α1380'' -> (α1381'' -> α1380''))]]]], α1380'' <: ([α1387''], [α1388''],)]
//│ L: 1 [int ~ ([α1387''], [α1388''],), int :> α1382'', [α1382'' - (α1382'' -> (α1383'' -> [int])) ~ (α1380'' -> (α1381'' -> α1380'')) - α1380'', L: 0 [(α1382'' -> (α1383'' -> [int])) ~ (α1380'' -> (α1381'' -> α1380'')), (α1382'' -> (α1383'' -> [int])) <: (α1380'' -> (α1381'' -> α1380''))]], α1380'' <: ([α1387''], [α1388''],)]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ [ERROR] Type `_ * _` does not match `_ -> (_ * bool)`
//│ 
//│         (_ * _) <--- (?b) ~~~~ (_ -> (_ * bool))
//│ 
//│ ◉ (_ * _) comes from
//│ ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                             ^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│                    ^^^
//│   ◉ (_ -> ?b) comes from
//│   ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│   │                  ^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.-352let rec wwhile (f,b) =
//│                              ^
//│     ◉ (?a * _) comes from
//│        - l.-352let rec wwhile (f,b) =
//│                               ^^^^^
//│       ◉ ((?a * _) -> _) comes from
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                         ^^^^^^^
//│       │            match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ (?wwhile) is assumed for
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ ((_ -> _ -> (_ * bool) * _) -> _) comes from
//│          - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                      ^^^^^^
//│     ◉ (_ -> _ -> (_ * bool) * _) comes from
//│        - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                           ^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> (_ * bool)) comes from
//│      - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                          ^^^^^^^^
//│      - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ -> (_ * bool)) comes from
//│    - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^
//│ intboolf: ('a -> int) -> 'a -> (int, bool,)
//│ fixpoint: ('a, 'b,) -> 'b
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ U max: 10, total: 70
//│ UERR 1 errors
//│ L: 3 [([α1462'], [α1467'],) ~ (α1469' -> ([α1472'], [[bool]],)), ([α1462'], [α1467'],) :> α1466', [α1466' - ([α1461'] -> α1466') ~ (α1468' -> (α1469' -> ([α1472'], [[bool]],))) - (α1469' -> ([α1472'], [[bool]],)), L: 2 [([α1461'] -> α1466') ~ (α1468' -> (α1469' -> ([α1472'], [[bool]],))), ([α1461'] -> α1466') :> α1460', [α1460' - ([α1460'], [α1461'],) ~ ([[(α1468' -> (α1469' -> ([α1472'], [[bool]],)))]], [[α1458']],) - (α1468' -> (α1469' -> ([α1472'], [[bool]],))), L: 1 [([α1460'], [α1461'],) ~ ([[(α1468' -> (α1469' -> ([α1472'], [[bool]],)))]], [[α1458']],), [([α1460'], [α1461'],) - (([α1460'], [α1461'],) -> α1465') ~ (([[(α1468' -> (α1469' -> ([α1472'], [[bool]],)))]], [[α1458']],) -> α1473') - ([[(α1468' -> (α1469' -> ([α1472'], [[bool]],)))]], [[α1458']],), L: 0 [(([α1460'], [α1461'],) -> α1465') ~ (([[(α1468' -> (α1469' -> ([α1472'], [[bool]],)))]], [[α1458']],) -> α1473'), (([α1460'], [α1461'],) -> α1465') <: wwhile1459', wwhile1459' <: (([[(α1468' -> (α1469' -> ([α1472'], [[bool]],)))]], [[α1458']],) -> α1473')]]]]]]]



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a] -> 'b
//│   where
//│     'b = 'b -> 'b, ('c -> 'c) -> 'c -> 'c
//│     'a = 'a -> 'a, ('c -> 'c) -> 'c -> 'c
//│     'c = 'c -> 'c



// file 830
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ---> (?b) ~~~~ (?c) ~~~~ (?b) ~~~~ (?a) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│ │                                                    ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?c) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                         ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                      ^^^^^^^^^^^
//│   ◉ (_ list -> ?c) comes from
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                                                                     ^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (?sumList) is assumed for
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (_ -> ?b) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                   ^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ │                                               ^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                 ^^^^^^^^^^
//│ modulus: int -> int
//│ digitsOfInt: int -> list[int]
//│ lt10: int -> bool
//│ sumList: list[int] -> int
//│ additivePersistence: int -> int
//│ U max: 9, total: 137
//│ UERR 1 errors
//│ L: 1 [int ~ ([additivePersistence1526'] -> α1558'), int <: α1545', [α1545' - (α1543' -> α1545') ~ ([list['a1544']] -> α1546') - α1546', L: 0 [(α1543' -> α1545') ~ ([list['a1544']] -> α1546'), (α1543' -> α1545') <: sumList1542', sumList1542' <: ([list['a1544']] -> α1546')]], [α1546' - ([list['a1544']] -> α1546') ~ (α1543' -> α1545') - α1545', L: 0 [([list['a1544']] -> α1546') ~ (α1543' -> α1545'), ([list['a1544']] -> α1546') :> sumList1542', sumList1542' :> (α1543' -> α1545')]], [α1545' - (α1543' -> α1545') ~ ([α1547'] -> α1557') - α1557', L: 0 [(α1543' -> α1545') ~ ([α1547'] -> α1557'), (α1543' -> α1545') <: sumList1542', sumList1542' <: ([α1547'] -> α1557')]], α1557' <: ([additivePersistence1526'] -> α1558')]



// file 1770
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                           ^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                             ^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ~~~~ (?a) ---> (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│    - l.1  let rec filter l a =
//│                            ^^^
//│             match l with ...
//│             ^^^^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> _) comes from
//│   │  - l.1  let rec filter l a =
//│   │                        ^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                  ^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                               ^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                   ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                  ^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                               ^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?b) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                                         ^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?a) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                       ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                  ^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                               ^^^^^^^^^^^^^^^^^^^
//│ filter: list['a] -> 'b -> 'c
//│   where
//│     'c = list['a], list['b]
//│ removeDuplicates: list[list['a]] -> list['a]
//│ U max: 10, total: 170
//│ UERR 4 errors
//│ L: 1 [(α1587''' -> α1592''') ~ list[['a1582'']], [(α1587''' -> α1592''') - (α1584''' -> (α1587''' -> α1592''')) ~ (α1595''' -> α1596''') - α1596''', L: 0 [(α1584''' -> (α1587''' -> α1592''')) ~ (α1595''' -> α1596'''), (α1584''' -> (α1587''' -> α1592''')) <: filter1583''', filter1583''' <: (α1595''' -> α1596''')]], α1596''' <: list[['a1582'']]]
//│ L: 1 [([α1587'''] -> α1590''') ~ list[['a1582'']], ([α1587'''] -> α1590''') :> α1591''', [α1591''' - ([list['a1585''']] -> α1591''') ~ ([list['a1585''']] -> α1593''') - α1593''', L: 0 [([list['a1585''']] -> α1591''') ~ ([list['a1585''']] -> α1593'''), ([list['a1585''']] -> α1591''') :> filter1583''', filter1583''' <: ([list['a1585''']] -> α1593''')]], [α1593''' - ([list['a1585''']] -> α1593''') ~ (α1595''' -> α1596''') - α1596''', L: 0 [([list['a1585''']] -> α1593''') ~ (α1595''' -> α1596'''), ([list['a1585''']] -> α1593''') :> filter1583''', filter1583''' <: (α1595''' -> α1596''')]], α1596''' <: list[['a1582'']]]
//│ L: 1 [([α1587'''] -> α1589''') ~ list[['a1582'']], ([α1587'''] -> α1589''') :> α1593''', [α1593''' - ([list['a1585''']] -> α1593''') ~ ([list['a1585''']] -> α1591''') - α1591''', L: 0 [([list['a1585''']] -> α1593''') ~ ([list['a1585''']] -> α1591'''), ([list['a1585''']] -> α1593''') :> filter1583''', filter1583''' <: ([list['a1585''']] -> α1591''')]], [α1591''' - ([list['a1585''']] -> α1591''') ~ ([list['a1585''']] -> α1593''') - α1593''', L: 0 [([list['a1585''']] -> α1591''') ~ ([list['a1585''']] -> α1593'''), ([list['a1585''']] -> α1591''') :> filter1583''', filter1583''' <: ([list['a1585''']] -> α1593''')]], [α1593''' - ([list['a1585''']] -> α1593''') ~ (α1595''' -> α1596''') - α1596''', L: 0 [([list['a1585''']] -> α1593''') ~ (α1595''' -> α1596'''), ([list['a1585''']] -> α1593''') :> filter1583''', filter1583''' <: (α1595''' -> α1596''')]], α1596''' <: list[['a1582'']]]
//│ L: 0 [list['a1582''] ~ (['a1582''] -> α1595'''), list['a1582''] <: (['a1582''] -> α1595''')]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> 'b) -> 'a -> ('a -> 'b, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ [ERROR] Type `_ * _ * _` does not match `_ -> _`
//│ 
//│         (?a * _ * _) ~~~~ (?a) ---> (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (?a * _ * _) comes from
//│    - l.1  let rec assoc (d,k,l) =
//│                         ^^^^^^^
//│   ◉ ((?a * _ * _) -> ?b) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.1  let rec assoc (d,k,l) =
//│ │                        ^
//│ │  - l.3    | [] -> d
//│ │                   ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.2    match l with
//│             ^^^^^^^^^^^^
//│             | [] -> d ...
//│             ^^^^^^^^^^^^^
//│   ◉ ((?a * _ * _) -> ?b) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ │                                                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                               ^^^^^^^
//│ assoc: 'assoc
//│   where
//│     'assoc = (('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],), 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,), ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,)
//│     'b = ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],)
//│     'a = ('d, 'a -> ('b, 'c, 'e,),)
//│     'e = list[('d, 'a -> ('b, 'c, 'e,),)]
//│ U max: 10, total: 35
//│ UERR 1 errors
//│ L: 1 [([α1649'], [α1650'], [α1651'],) ~ ([α1650'] -> α1661'), [([α1649'], [α1650'], [α1651'],) - (([α1649'], [α1650'], [α1651'],) -> α1652') ~ ([α1649'] -> α1660') - α1649', L: 0 [(([α1649'], [α1650'], [α1651'],) -> α1652') ~ ([α1649'] -> α1660'), (([α1649'], [α1650'], [α1651'],) -> α1652') <: assoc1648', assoc1648' <: ([α1649'] -> α1660')]], α1649' <: α1652', [α1652' - (([α1649'], [α1650'], [α1651'],) -> α1652') ~ ([α1649'] -> α1660') - α1660', L: 0 [(([α1649'], [α1650'], [α1651'],) -> α1652') ~ ([α1649'] -> α1660'), (([α1649'], [α1650'], [α1651'],) -> α1652') <: assoc1648', assoc1648' <: ([α1649'] -> α1660')]], α1660' <: ([α1650'] -> α1661')]
