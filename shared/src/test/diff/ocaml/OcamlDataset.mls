:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (?a -> _ -> ?a) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   │ 
//│   ◉ (?b -> _ -> _) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                       ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.13     let f a x = padZero l1 l2 in
//│                     ^
//│   ◉ (?b -> _ -> _) comes from
//│   │  - l.13     let f a x = padZero l1 l2 in
//│   │                   ^^^^^^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?a -> _ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ list * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (_ list * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list * _) comes from
//│    - l.7    then (((clone 0 (-1 * diff)) @ l1), l2)
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _ list`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _ list)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _ list) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _) comes from
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                    ^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) ---> (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) comes from
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.6    if diff < 0
//│             ^^^^^^^^^^^
//│             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) comes from
//│     │  - l.13     let f a x = padZero l1 l2 in
//│     │                   ^^^^^^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ cloneHelper: 'a -> int -> list['a] -> list['a]
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a], list['a0]
//│ padZero: list['a] -> list['b] -> (list['a], list['b],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list['a] -> 'b -> list[int]
//│   where
//│     'b = list[int], list['c]
//│ U max: 33, total: 666
//│ UERR 6 errors
//│ L: 0 [list[([α239''], [α240''],)] ~ ([α254''], [α255''],), list[([α239''], [α240''],)] <: α245'', α245'' <: ([α254''], [α255''],)]
//│ L: 1 [list[([α239''], [α240''],)] ~ ([α254''], [α255''],), list[([α239''], [α240''],)] <: α245'', [α245'' - (α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])) - α247'', L: 0 [(α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])), (α245'' -> (α246'' -> α245'')) :> (α247'' -> (α248'' -> [α192'']))]], [α247'' - (α247'' -> (α248'' -> [α192''])) ~ (α245'' -> (α246'' -> α245'')) - α245'', L: 0 [(α247'' -> (α248'' -> [α192''])) ~ (α245'' -> (α246'' -> α245'')), (α247'' -> (α248'' -> [α192''])) <: (α245'' -> (α246'' -> α245''))]], α245'' <: ([α254''], [α255''],)]
//│ L: 2 [list[([α239''], [α240''],)] ~ ([[α185'']], [[α188'']],), list[([α239''], [α240''],)] <: α245'', [α245'' - (α246'' -> α245'') ~ (α248'' -> [α192'']) - α192'', L: 1 [(α246'' -> α245'') ~ (α248'' -> [α192'']), [(α246'' -> α245'') - (α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])) - (α248'' -> [α192'']), L: 0 [(α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])), (α245'' -> (α246'' -> α245'')) :> (α247'' -> (α248'' -> [α192'']))]]]], α192'' :> α191'', α191'' :> ([[α185'']], [[α188'']],)]
//│ L: 2 [list[([α239''], [α240''],)] ~ ([[list[α186'']]], [[α188'']],), list[([α239''], [α240''],)] <: α245'', [α245'' - (α246'' -> α245'') ~ (α248'' -> [α192'']) - α192'', L: 1 [(α246'' -> α245'') ~ (α248'' -> [α192'']), [(α246'' -> α245'') - (α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])) - (α248'' -> [α192'']), L: 0 [(α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])), (α245'' -> (α246'' -> α245'')) :> (α247'' -> (α248'' -> [α192'']))]]]], α192'' :> ([[list[α186'']]], [[α188'']],)]
//│ L: 2 [list[([α239''], [α240''],)] ~ ([α254''], [α255''],), list[([α239''], [α240''],)] <: α245'', [α245'' - (α246'' -> α245'') ~ (α248'' -> [α192'']) - α192'', L: 1 [(α246'' -> α245'') ~ (α248'' -> [α192'']), [(α246'' -> α245'') - (α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])) - (α248'' -> [α192'']), L: 0 [(α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])), (α245'' -> (α246'' -> α245'')) :> (α247'' -> (α248'' -> [α192'']))]]]], α192'' :> α191'', α191'' <: α192'', [α192'' - (α248'' -> [α192'']) ~ (α246'' -> α245'') - α245'', L: 1 [(α248'' -> [α192'']) ~ (α246'' -> α245''), [(α248'' -> [α192'']) - (α247'' -> (α248'' -> [α192''])) ~ (α245'' -> (α246'' -> α245'')) - (α246'' -> α245''), L: 0 [(α247'' -> (α248'' -> [α192''])) ~ (α245'' -> (α246'' -> α245'')), (α247'' -> (α248'' -> [α192''])) <: (α245'' -> (α246'' -> α245''))]]]], α245'' <: ([α254''], [α255''],)]
//│ L: 2 [list[([α239''], [α240''],)] ~ ([[α185'']], [[list[α189'']]],), list[([α239''], [α240''],)] <: α245'', [α245'' - (α246'' -> α245'') ~ (α248'' -> [α192'']) - α192'', L: 1 [(α246'' -> α245'') ~ (α248'' -> [α192'']), [(α246'' -> α245'') - (α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])) - (α248'' -> [α192'']), L: 0 [(α245'' -> (α246'' -> α245'')) ~ (α247'' -> (α248'' -> [α192''])), (α245'' -> (α246'' -> α245'')) :> (α247'' -> (α248'' -> [α192'']))]]]], α192'' :> α191'', α191'' :> ([[α185'']], [[list[α189'']]],)]

// file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ [ERROR] Type `int` does not match `float`
//│ 
//│         (int) ---> (float)
//│ 
//│ ◉ (int) comes from
//│ │  - l.16   | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ │                                                                           ^
//│ ▼ 
//│ ◉ (float) comes from
//│    - lib. let ( /. ): float -> float -> float
//│                                ^^^^^
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ eval: (expr, float, float,) -> float
//│ U max: 14, total: 193
//│ UERR 1 errors
//│ L: 0 [int ~ float, int <: float]

// FIXME file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) comes from
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) comes from
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed for
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?c -> ?d -> ?c) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) comes from
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 31
//│ UERR 1 errors
//│ L: 2 [int ~ list['a448'], int <: α449', [α449' - (α447' -> α449') ~ (α445' -> α444') - α444', L: 1 [(α447' -> α449') ~ (α445' -> α444'), [(α447' -> α449') - (α446' -> (α447' -> α449')) ~ (α444' -> (α445' -> α444')) - (α445' -> α444'), L: 0 [(α446' -> (α447' -> α449')) ~ (α444' -> (α445' -> α444')), (α446' -> (α447' -> α449')) <: (α444' -> (α445' -> α444'))]]]], α444' :> α442', [α442' - list[α442'] ~ list[α445'] - α445', L: 0 [list[α442'] ~ list[α445'], list[α442'] :> α437', α437' <: list[α445']]], [α445' - (α445' -> α444') ~ (α447' -> α449') - α447', L: 1 [(α445' -> α444') ~ (α447' -> α449'), [(α445' -> α444') - (α444' -> (α445' -> α444')) ~ (α446' -> (α447' -> α449')) - (α447' -> α449'), L: 0 [(α444' -> (α445' -> α444')) ~ (α446' -> (α447' -> α449')), (α444' -> (α445' -> α444')) :> (α446' -> (α447' -> α449'))]]]], α447' <: list['a448']]


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ [ERROR] Type `_ list` does not match `(_ -> _) -> _ list -> _ list`
//│ 
//│         (_ list) <--- (?a) ~~~~ ((_ -> _) -> _ list -> _ list)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - l.3    | [] -> ""
//│ │             ^^
//│ │  - l.2    match sl with
//│ │                 ^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.1  let rec sepConcat sep sl =
//│                                 ^^
//│   ◉ (?a -> _) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?a -> _) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?b) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> _) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ ((_ -> _) -> _ list -> _ list) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                                         ^^^^^^^^
//│    - lib. let List.map: ('a -> 'b) -> 'a list -> 'b list
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `string` does not match `(_ * _) -> _`
//│ 
//│         (string) <--- (?a) ~~~~ (?b) ---> (?c) ~~~~ (?d) ---> ((_ * _) -> _)
//│ 
//│ ◉ (string) comes from
//│ ▲  - lib. let (^): string -> string -> string
//│ │                  ^^^^^^
//│ │  - l.5        let f a x = a ^ (sep ^ x) in
//│ │                           ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.5        let f a x = a ^ (sep ^ x) in
//│                       ^
//│   ◉ (?a -> _ -> string) comes from
//│   │  - l.5        let f a x = a ^ (sep ^ x) in
//│   │                     ^^^^^^^^^^^^^^^^^^^
//│   │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│   │                                                           ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.6        let base = h in let l = t in List.fold_left f base l;;
//│ │                                            ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.2    match sl with
//│             ^^^^^^^^^^^^^
//│             | [] -> "" ...
//│             ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.1  let rec sepConcat sep sl =
//│                                   ^^^^
//│               match sl with ...
//│               ^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                           ^^^^^^^^
//│     │           match sl with ...
//│     │           ^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (?sepConcat) is assumed for
//│     │  - l.1  let rec sepConcat sep sl =
//│     │                 ^^^^^^^^^
//│     ▼ 
//│     ◉ (string -> ?d) comes from
//│        - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                              ^^^^^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│   │                                        ^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (((_ -> _) -> _ list -> _ list) -> ?e) comes from
//│      - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                            ^^^^^^^^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * _) -> _) comes from
//│    - l.7  let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│                                          ^^^^^^^^^^^^^^^^^^^^^^^
//│ sepConcat: string -> list[string] -> string
//│ stringOfList: 'a -> 'b -> string
//│ U max: 7, total: 76
//│ UERR 2 errors
//│ L: 2 [string ~ (([[α473']], [[α474']],) -> α492'), string :> α483', [α483' - (α483' -> (α481' -> [string])) ~ (α482' -> (α480' -> α482')) - α482', L: 0 [(α483' -> (α481' -> [string])) ~ (α482' -> (α480' -> α482')), (α483' -> (α481' -> [string])) <: (α482' -> (α480' -> α482'))]], α482' <: α484', [α484' - (α478' -> α484') ~ ([((α487' -> α488') -> (list[α487'] -> list[α488']))] -> α490') - α490', L: 1 [(α478' -> α484') ~ ([((α487' -> α488') -> (list[α487'] -> list[α488']))] -> α490'), [(α478' -> α484') - (α477' -> (α478' -> α484')) ~ (string -> α486') - α486', L: 0 [(α477' -> (α478' -> α484')) ~ (string -> α486'), (α477' -> (α478' -> α484')) <: sepConcat476', sepConcat476' <: (string -> α486')]], α486' <: ([((α487' -> α488') -> (list[α487'] -> list[α488']))] -> α490')]], α490' <: (([[α473']], [[α474']],) -> α492')]
//│ L: 2 [list['a479'] ~ ((α487' -> α488') -> (list[α487'] -> list[α488'])), list['a479'] :> α478', [α478' - (α478' -> α484') ~ ([((α487' -> α488') -> (list[α487'] -> list[α488']))] -> α490') - ((α487' -> α488') -> (list[α487'] -> list[α488'])), L: 1 [(α478' -> α484') ~ ([((α487' -> α488') -> (list[α487'] -> list[α488']))] -> α490'), [(α478' -> α484') - (α477' -> (α478' -> α484')) ~ (string -> α486') - α486', L: 0 [(α477' -> (α478' -> α484')) ~ (string -> α486'), (α477' -> (α478' -> α484')) <: sepConcat476', sepConcat476' <: (string -> α486')]], α486' <: ([((α487' -> α488') -> (list[α487'] -> list[α488']))] -> α490')]]]

// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ~~~~ (?digitsOfInt) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                                                  ^^^^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?a) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?b) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                                ^^
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                           ^^
//│   ◉ (?c -> _) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?digitsOfInt -> _) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?digitsOfInt) is assumed for
//│ ▲  - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│ │                 ^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.7  let rec digitsOfInt n = digitsOfIntHelper n;;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ~~~~ (?a) ---> (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                              ^
//│   ◉ (int -> ?a) comes from
//│   ▲  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^
//│   │  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?sumListHelper) is assumed for
//│   ▲  - l.1  let rec sumListHelper total xs =
//│   │                 ^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b -> _ -> ?c) comes from
//│      - l.1  let rec sumListHelper total xs =
//│                                   ^^^^^^^^^^
//│               match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.1  let rec sumListHelper total xs =
//│ │                               ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │                                 ^^^^^
//│ │  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│    - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ list -> ?d) comes from
//│   ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│   │                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?e) is assumed for
//│      - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (int -> ?e) comes from
//│     ▲  - l.2    match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│     │                                                     ^^^^^^^^^^^^^
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     │ 
//│     ◉ (?sumListHelper) is assumed for
//│     │  - l.1  let rec sumListHelper total xs =
//│     │                 ^^^^^^^^^^^^^
//│     ▼ 
//│     ◉ (int -> ?a) comes from
//│        - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                    ^^^^^^^^^^^^^
//│   ◉ (?a) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                              ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?f) comes from
//│      - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                  ^^^^^^^^^^^^^^^
//│ ◉ (?f) is assumed for
//│    - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│                                ^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?f) comes from
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.8  let rec sumList xs = sumListHelper 0 xs;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?g) comes from
//│      - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                             ^^^^^^^
//│ ◉ (?g) is assumed for
//│ │  - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│ │                                         ^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.9  let rec additivePersistence n = sumList digitsOfInt n;;
//│                                           ^^^^^^^^^^^^^^^^^^^
//│ sumListHelper: int -> list[int] -> int
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> list[int]
//│ sumList: list[int] -> int
//│ additivePersistence: 'a -> 'b
//│ U max: 28, total: 273
//│ UERR 2 errors
//│ L: 2 [int ~ ([α571'] -> α602'), [int - (int -> α581') ~ (α577' -> (α574' -> α575')) - α577', L: 0 [(int -> α581') ~ (α577' -> (α574' -> α575')), (int -> α581') :> sumListHelper582', sumListHelper582' :> (α577' -> (α574' -> α575'))]], α577' <: α575', α575' :> α578', [α578' - ([list['a579']] -> α578') ~ ([α573'] -> α576') - α576', L: 1 [([list['a579']] -> α578') ~ ([α573'] -> α576'), ([list['a579']] -> α578') :> α580', [α580' - ([int] -> α580') ~ (int -> α581') - α581', L: 0 [([int] -> α580') ~ (int -> α581'), ([int] -> α580') :> sumListHelper582', sumListHelper582' <: (int -> α581')]], α581' <: ([α573'] -> α576')]], [α576' - (α573' -> α576') ~ ([digitsOfInt583'] -> α600') - α600', L: 0 [(α573' -> α576') ~ ([digitsOfInt583'] -> α600'), (α573' -> α576') <: sumList572', sumList572' <: ([digitsOfInt583'] -> α600')]], α600' <: ([α571'] -> α602')]
//│ L: 2 [list['a579'] ~ (α584' -> α595'), [list['a579'] - ([list['a579']] -> α578') ~ ([α573'] -> α576') - α573', L: 1 [([list['a579']] -> α578') ~ ([α573'] -> α576'), ([list['a579']] -> α578') :> α580', [α580' - ([int] -> α580') ~ (int -> α581') - α581', L: 0 [([int] -> α580') ~ (int -> α581'), ([int] -> α580') :> sumListHelper582', sumListHelper582' <: (int -> α581')]], α581' <: ([α573'] -> α576')]], [α573' - (α573' -> α576') ~ ([digitsOfInt583'] -> α600') - digitsOfInt583', L: 0 [(α573' -> α576') ~ ([digitsOfInt583'] -> α600'), (α573' -> α576') <: sumList572', sumList572' <: ([digitsOfInt583'] -> α600')]], digitsOfInt583' :> (α584' -> α595')]

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.6    match explode x with
//│ │                 ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    match explode x with
//│                   ^^^^^^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.8        if (getHeads (explode x)) = []
//│ │                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.8        if (getHeads (explode x)) = []
//│                               ^^^^^^^
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.728:	  match explode x with
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.730:	      if (getHeads (explode x)) = []
//│ ╙──      	                    ^^^^^^^
//│ matchHeads: 'a -> bool
//│ U max: 20, total: 272
//│ UERR 2 errors
//│ L: 0 [err ~ ([α656'] -> α658'), err <: ([α656'] -> α658')]
//│ L: 0 [err ~ ([α656'] -> α679'), err <: ([α656'] -> α679')]

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ [ERROR] Type `err` does not match `_ list -> _`
//│ 
//│         (err) ---> (_ list -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                                                     ^^
//│ ▼ 
//│ ◉ (_ list -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                                                       ^^
//│ [ERROR] Type `err` does not match `_ -> _`
//│ 
//│         (err) ---> (_ -> _)
//│ 
//│ ◉ (err) comes from
//│ │  - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                      ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.3      if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                        ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: String.length
//│ ║  
//│ ║  l.775:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	             ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: s.
//│ ║  
//│ ║  l.775:	    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ ╙──      	                                            ^^
//│ explode: 'b -> list['a]
//│ U max: 7, total: 73
//│ UERR 2 errors
//│ L: 0 [err ~ ([α728'] -> α734''), err <: ([α728'] -> α734'')]
//│ L: 0 [err ~ ([list['a739'']] -> α743''), err <: ([list['a739'']] -> α743'')]

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.818:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.7    | [] -> 0
//│                     ^
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ digits: int -> list[int]
//│ additivePersistence: 'a -> 'b
//│   where
//│     'b = bool, int
//│ U max: 6, total: 137
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α838', α838' <: α824', α824' :> int]


// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) comes from
//│ │  - l.-580  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                           ^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.11       then buildSine build (rand, (d - 1))
//│                      ^^^^^^^^^^^^^^^
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) comes from
//│ │  - l.-580  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                             ^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) comes from
//│    - l.12       else buildCosine build (rand, (d - 1));;
//│                      ^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) -> _` does not match `expr`
//│ 
//│         ((_ * _) -> _) ---> (?build) ---> (?a) <--- (?build) ---> (?b) ---> (expr)
//│ 
//│ ◉ ((_ * _) -> _) comes from
//│ │  - l.5  let rec build (rand,depth) =
//│ │                       ^^^^^^^^^^^^^^
//│ │           let r = rand 0.4 in ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ ▼ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let buildCosine e = Cosine e;;
//│ │                         ^
//│ │  - l.12       else buildCosine build (rand, (d - 1));;
//│ │                                ^^^^^
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │ 
//│ ◉ (?build) is assumed for
//│ │  - l.5  let rec build (rand,depth) =
//│ │                 ^^^^^
//│ │  - l.11       then buildSine build (rand, (d - 1))
//│ │                              ^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                       ^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                                ^
//│ ▼ 
//│ ◉ (expr) comes from
//│    - l.-584  | Sine of expr
//│                        ^^^^
//│ buildCosine: expr -> expr
//│ buildSine: expr -> expr
//│ buildX: () -> expr
//│ buildY: () -> expr
//│ build: 'build
//│   where
//│     'build = (float -> int, int,) -> () -> expr, expr
//│ U max: 3, total: 31
//│ UERR 3 errors
//│ L: 0 [(([α846'], [α847'],) -> α850') ~ expr, (([α846'], [α847'],) -> α850') <: build845', build845' <: α867', α867' :> build845', build845' <: α861', α861' <: expr]
//│ L: 0 [expr ~ (([[α846']], [[int]],) -> α872'), expr <: (([[α846']], [[int]],) -> α872')]
//│ L: 0 [expr ~ (([[α846']], [[int]],) -> α866'), expr <: (([[α846']], [[int]],) -> α866')]

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ [ERROR] Type `_ -> _ list -> _ list` does not match `int`
//│ 
//│         (_ -> _ list -> _ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ -> _ list -> _ list) comes from
//│ │  - l.2  let x l = List.map string_of_int;;
//│ │               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                 ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                      ^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.3  let y = [1, 2, 3];;
//│ │                 ^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                  ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                     ^
//│ ▼ 
//│ ◉ (int) comes from
//│    - lib. let ( * ): int -> int -> int
//│                             ^^^
//│ remainder: int -> int -> int
//│ x: 'a -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ mulByDigit: 'b -> list['a] -> list[int]
//│ U max: 7, total: 85
//│ UERR 2 errors
//│ L: 0 [list['a913'] ~ int, list['a913'] <: α907', α907' <: int]
//│ L: 0 [(α909' -> [(list[α910'] -> list[α911'])]) ~ int, (α909' -> [(list[α910'] -> list[α911'])]) <: α906', α906' <: int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                           ^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│ │                                                                       ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (_ -> _ -> ?a) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?a) comes from
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│     ◉ (int -> ?d) comes from
//│     ▲  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│     │                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                       ^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?c) comes from
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                  ^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?c) comes from
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) comes from
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed for
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?d) comes from
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?d) is assumed for
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?e) comes from
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'b -> int -> 'c
//│   where
//│     'c = list['b], list['a]
//│ padLength: list['a] -> list['b] -> int
//│ padZero: list[list[int]] -> list['a] -> list[list[int]]
//│ U max: 11, total: 195
//│ UERR 2 errors
//│ L: 2 [list['a993'] ~ ([α960'] -> α1010'), list['a993'] <: α994', [α994' - (α996' -> α994') ~ ([int] -> α995') - α995', L: 1 [(α996' -> α994') ~ ([int] -> α995'), [(α996' -> α994') - (α991' -> (α996' -> α994')) ~ ([α991'] -> α997') - α997', L: 0 [(α991' -> (α996' -> α994')) ~ ([α991'] -> α997'), (α991' -> (α996' -> α994')) <: clone990', clone990' <: ([α991'] -> α997')]], α997' <: ([int] -> α995')]], [α995' - ([int] -> α995') ~ (α996' -> α994') - α994', L: 1 [([int] -> α995') ~ (α996' -> α994'), ([int] -> α995') :> α997', [α997' - ([α991'] -> α997') ~ (int -> α1000') - α1000', L: 0 [([α991'] -> α997') ~ (int -> α1000'), ([α991'] -> α997') :> clone990', clone990' <: (int -> α1000')]], [α1000' - (int -> α1000') ~ (α991' -> (α996' -> α994')) - (α996' -> α994'), L: 0 [(int -> α1000') ~ (α991' -> (α996' -> α994')), (int -> α1000') :> clone990', clone990' :> (α991' -> (α996' -> α994'))]]]], [α994' - (α996' -> α994') ~ ([int] -> α995') - α995', L: 1 [(α996' -> α994') ~ ([int] -> α995'), [(α996' -> α994') - (α991' -> (α996' -> α994')) ~ (int -> α1000') - α1000', L: 0 [(α991' -> (α996' -> α994')) ~ (int -> α1000'), (α991' -> (α996' -> α994')) <: clone990', clone990' <: (int -> α1000')]], [α1000' - (int -> α1000') ~ ([α991'] -> α997') - α997', L: 0 [(int -> α1000') ~ ([α991'] -> α997'), (int -> α1000') :> clone990', clone990' <: ([α991'] -> α997')]], α997' <: ([int] -> α995')]], [α995' - ([int] -> α995') ~ ([[int]] -> α1008') - α1008', L: 1 [([int] -> α995') ~ ([[int]] -> α1008'), ([int] -> α995') :> α997', [α997' - ([α991'] -> α997') ~ (int -> α1000') - α1000', L: 0 [([α991'] -> α997') ~ (int -> α1000'), ([α991'] -> α997') :> clone990', clone990' <: (int -> α1000')]], α1000' <: ([[int]] -> α1008')]], α1008' <: ([α960'] -> α1010')]
//│ L: 2 [list['a992'] ~ ([α960'] -> α1010'), list['a992'] <: α994', [α994' - (α996' -> α994') ~ ([int] -> α995') - α995', L: 1 [(α996' -> α994') ~ ([int] -> α995'), [(α996' -> α994') - (α991' -> (α996' -> α994')) ~ ([α991'] -> α997') - α997', L: 0 [(α991' -> (α996' -> α994')) ~ ([α991'] -> α997'), (α991' -> (α996' -> α994')) <: clone990', clone990' <: ([α991'] -> α997')]], α997' <: ([int] -> α995')]], [α995' - ([int] -> α995') ~ (α996' -> α994') - α994', L: 1 [([int] -> α995') ~ (α996' -> α994'), ([int] -> α995') :> α997', [α997' - ([α991'] -> α997') ~ (int -> α1000') - α1000', L: 0 [([α991'] -> α997') ~ (int -> α1000'), ([α991'] -> α997') :> clone990', clone990' <: (int -> α1000')]], [α1000' - (int -> α1000') ~ (α991' -> (α996' -> α994')) - (α996' -> α994'), L: 0 [(int -> α1000') ~ (α991' -> (α996' -> α994')), (int -> α1000') :> clone990', clone990' :> (α991' -> (α996' -> α994'))]]]], [α994' - (α996' -> α994') ~ ([int] -> α995') - α995', L: 1 [(α996' -> α994') ~ ([int] -> α995'), [(α996' -> α994') - (α991' -> (α996' -> α994')) ~ (int -> α1000') - α1000', L: 0 [(α991' -> (α996' -> α994')) ~ (int -> α1000'), (α991' -> (α996' -> α994')) <: clone990', clone990' <: (int -> α1000')]], [α1000' - (int -> α1000') ~ ([α991'] -> α997') - α997', L: 0 [(int -> α1000') ~ ([α991'] -> α997'), (int -> α1000') :> clone990', clone990' <: ([α991'] -> α997')]], α997' <: ([int] -> α995')]], [α995' - ([int] -> α995') ~ ([[int]] -> α1008') - α1008', L: 1 [([int] -> α995') ~ ([[int]] -> α1008'), ([int] -> α995') :> α997', [α997' - ([α991'] -> α997') ~ (int -> α1000') - α1000', L: 0 [([α991'] -> α997') ~ (int -> α1000'), ([α991'] -> α997') :> clone990', clone990' <: (int -> α1000')]], α1000' <: ([[int]] -> α1008')]], α1008' <: ([α960'] -> α1010')]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (list[int], list[int],) -> list[int]



// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ │                                            ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1361    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ -> _`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ -> _)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1364let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ list`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ list)
//│ 
//│ ◉ (int * _ list) comes from
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?a -> _ -> ?a) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?b) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│    - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                                        ^
//│   ◉ (_ list -> _) comes from
//│   ▲  - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│   │                                         ^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed for
//│      - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                             ^^^^^^^^^^^^
//│     ◉ (_ -> ?a) comes from
//│     ▲  - l.-395  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│     │                                         ^^^^^^^^^^
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) <--- (?a) ~~~~ (?b) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ ▲  - lib. let List.rev: 'a list -> 'a list
//│ │                       ^^^^^^^
//│ │  - l.-397  match List.rev l with
//│ │                           ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.-398let rec mulByDigit i l =
//│                                 ^
//│   ◉ (?a -> _) comes from
//│      - l.-398let rec mulByDigit i l =
//│                                   ^^^
//│                match List.rev l with ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?a -> _) comes from
//│     │  - l.-398let rec mulByDigit i l =
//│     │                             ^^^^^
//│     │            match List.rev l with ...
//│     │            ^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (?mulByDigit) is assumed for
//│     │  - l.-398let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) comes from
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed for
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) comes from
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) comes from
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                         ^^^^
//│ │             let add (l1,l2) = ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?e) is assumed for
//│   ◉ (?e -> _ -> ?e) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?e) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?e) is assumed for
//│   ◉ (?e -> _ -> ?e) comes from
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) comes from
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed for
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?c) <--- (?b) <--- (?a) <--- (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) comes from
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (_ -> ?d) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?d -> _ -> ?d) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) comes from
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?c) comes from
//│      - l.5    let f a x =
//│                       ^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) comes from
//│    - l.-1364let bigAdd l1 l2 =
//│                           ^^^^
//│               let add (l1,l2) = ...
//│               ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1361    let base = List.combine l1 l2 in
//│ │                                       ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) comes from
//│      - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│    - l.-1368  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                                          ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.-1364let bigAdd l1 l2 =
//│ │                      ^^
//│ │  - l.-1358  removeZero (add (padZero l1 l2));;
//│ │                                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?b * _ list) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed for
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) comes from
//│      - l.-1363  let add (l1,l2) =
//│                         ^^^^^^^
//│ ◉ (?e) is assumed for
//│ │  - l.-1363  let add (l1,l2) =
//│ │                      ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ ▼ 
//│ ◉ (?f) is assumed for
//│    - l.-1371let padZero l1 l2 =
//│                         ^^
//│   ◉ (?f * _) comes from
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                    ^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed for
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed for
//│      - l.-1369  if diff < 0
//│                 ^^^^^^^^^^^
//│                 then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) comes from
//│       │  - l.-1362    let f a x = padZero l1 l2 in
//│       │                     ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) comes from
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│   ◉ (?i) is assumed for
//│   │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) comes from
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                       ^^^^^^^
//│ ◉ (?j) is assumed for
//│    - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                      ^
//│   ◉ (?j * _) comes from
//│   ▲  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│   │                   ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed for
//│      - l.-1359    let (_,res) = List.fold_left f base args in res in
//│                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?i) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                           ^^^^^^^^
//│       ◉ (?i -> _ -> ?i) comes from
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-1359    let (_,res) = List.fold_left f base args in res in
//│       │                                            ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) comes from
//│          - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?h) comes from
//│        - l.-1362    let f a x = padZero l1 l2 in
//│                             ^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                        ^^^^^^^^
//│ ◉ (?f) is assumed for
//│ ▲  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1362    let f a x = padZero l1 l2 in
//│ │                                   ^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.-1363  let add (l1,l2) =
//│                        ^^
//│   ◉ (?e * _) comes from
//│   ▲  - l.-1363  let add (l1,l2) =
//│   │                     ^^^^^^^
//│   │  - l.-1358  removeZero (add (padZero l1 l2));;
//│   │                             ^^^^^^^^^^^^^^^
//│   │  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed for
//│   ▲  - l.-1369  if diff < 0
//│   │             ^^^^^^^^^^^
//│   │             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) comes from
//│      - l.-1367  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.-1371let padZero l1 l2 =
//│ │                       ^^
//│ │  - l.-1370  let diff = (List.length l1) - (List.length l2) in
//│ │                                     ^^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ helper: int -> int
//│ tenEx: int -> list[int] -> list[int]
//│ bigMul: 'b -> list[int] -> list[int]
//│   where
//│     'b = list[int] -> list[('c, list['a],)], list['d]
//│ U max: 13, total: 367
//│ UERR 22 errors
//│ L: 1 [([α1272'], [[[α1126'']]],) ~ list[α1131''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], [α1157'' - ([α1157''], [α1197''],) ~ ([[α1156'']], [[list[α1158'']]],) - α1156'', L: 0 [([α1157''], [α1197''],) ~ ([[α1156'']], [[list[α1158'']]],), ([α1157''], [α1197''],) :> α1200'', α1200'' :> α1199'', α1199'' :> ([[α1156'']], [[list[α1158'']]],)]], α1156'' <: list[α1131'']]
//│ L: 2 [([int], [[list['a1437']]],) ~ list['a1309'], ([int], [[list['a1437']]],) <: α1298', [α1298' - (α1299' -> α1298') ~ (α1303' -> α1306') - α1306', L: 1 [(α1299' -> α1298') ~ (α1303' -> α1306'), [(α1299' -> α1298') - (α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')) - (α1303' -> α1306'), L: 0 [(α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')), (α1298' -> (α1299' -> α1298')) :> (α1300' -> (α1303' -> α1306'))]]]], α1306' :> α1308', α1308' :> α1307', α1307' :> list['a1309']]
//│ L: 2 [(α1310' -> α1320') ~ ([α1301'], [α1302'],), (α1310' -> α1320') <: α1307', α1307' <: α1308', α1308' <: α1306', [α1306' - (α1303' -> α1306') ~ (α1299' -> α1298') - α1298', L: 1 [(α1303' -> α1306') ~ (α1299' -> α1298'), [(α1303' -> α1306') - (α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')) - (α1299' -> α1298'), L: 0 [(α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')), (α1300' -> (α1303' -> α1306')) <: (α1298' -> (α1299' -> α1298'))]]]], [α1298' - (α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')) - α1300', L: 0 [(α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')), (α1298' -> (α1299' -> α1298')) :> (α1300' -> (α1303' -> α1306'))]], α1300' <: ([α1301'], [α1302'],)]
//│ L: 2 [(α1310' -> α1320') ~ ([α1441'], [α1442'],), (α1310' -> α1320') <: α1307', α1307' <: α1308', α1308' <: α1306', [α1306' - (α1303' -> α1306') ~ (α1299' -> α1298') - α1298', L: 1 [(α1303' -> α1306') ~ (α1299' -> α1298'), [(α1303' -> α1306') - (α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')) - (α1299' -> α1298'), L: 0 [(α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')), (α1300' -> (α1303' -> α1306')) <: (α1298' -> (α1299' -> α1298'))]]]], α1298' <: ([α1441'], [α1442'],)]
//│ L: 0 [(α1255'' -> α1193'') ~ list['a1129''], (α1255'' -> α1193'') <: α1127'', α1127'' :> list['a1129'']]
//│ L: 2 [list['a1309'] ~ ([α1441'], [α1442'],), list['a1309'] <: α1307', α1307' <: α1308', α1308' <: α1306', [α1306' - (α1303' -> α1306') ~ (α1299' -> α1298') - α1298', L: 1 [(α1303' -> α1306') ~ (α1299' -> α1298'), [(α1303' -> α1306') - (α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')) - (α1299' -> α1298'), L: 0 [(α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')), (α1300' -> (α1303' -> α1306')) <: (α1298' -> (α1299' -> α1298'))]]]], α1298' <: ([α1441'], [α1442'],)]
//│ L: 1 [([α1272'], [[[α1126'']]],) ~ list[α1132''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], [α1157'' - ([α1157''], [α1197''],) ~ ([[list[α1132'']]], [[α1183'']],) - list[α1132''], L: 0 [([α1157''], [α1197''],) ~ ([[list[α1132'']]], [[α1183'']],), ([α1157''], [α1197''],) :> α1200'', α1200'' :> ([[list[α1132'']]], [[α1183'']],)]]]
//│ L: 3 [([α1272'], [[[α1126'']]],) ~ list[α1201''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: α1224'', [α1224'' - ([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],) - α1196'', L: 2 [([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],), ([[α1224'']], [[α1195'']],) <: α1225'', α1225'' <: α1226'', [α1226'' - (α1229'' -> [α1226'']) ~ (α1230'' -> α1227'') - α1227'', L: 1 [(α1229'' -> [α1226'']) ~ (α1230'' -> α1227''), [(α1229'' -> [α1226'']) - (α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')) - (α1230'' -> α1227''), L: 0 [(α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')), (α1228'' -> (α1229'' -> [α1226''])) <: (α1227'' -> (α1230'' -> α1227''))]]]], α1227'' <: ([α1196''], [α1194''],)]], [α1196'' - ([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],) - α1224'', L: 2 [([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],), ([α1196''], [α1194''],) :> α1227'', [α1227'' - (α1230'' -> α1227'') ~ (α1229'' -> [α1226'']) - α1226'', L: 1 [(α1230'' -> α1227'') ~ (α1229'' -> [α1226'']), [(α1230'' -> α1227'') - (α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])) - (α1229'' -> [α1226'']), L: 0 [(α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])), (α1227'' -> (α1230'' -> α1227'')) :> (α1228'' -> (α1229'' -> [α1226'']))]]]], α1226'' :> α1225'', α1225'' :> ([[α1224'']], [[α1195'']],)]], α1224'' :> α1157'', α1157'' <: list[α1201'']]
//│ L: 3 [([α1272'], [[[α1126'']]],) ~ list[α1132''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: α1224'', [α1224'' - ([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],) - α1196'', L: 2 [([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],), ([[α1224'']], [[α1195'']],) <: α1225'', α1225'' <: α1226'', [α1226'' - (α1229'' -> [α1226'']) ~ (α1230'' -> α1227'') - α1227'', L: 1 [(α1229'' -> [α1226'']) ~ (α1230'' -> α1227''), [(α1229'' -> [α1226'']) - (α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')) - (α1230'' -> α1227''), L: 0 [(α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')), (α1228'' -> (α1229'' -> [α1226''])) <: (α1227'' -> (α1230'' -> α1227''))]]]], α1227'' <: ([α1196''], [α1194''],)]], [α1196'' - ([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],) - α1224'', L: 2 [([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],), ([α1196''], [α1194''],) :> α1227'', [α1227'' - (α1230'' -> α1227'') ~ (α1229'' -> [α1226'']) - α1226'', L: 1 [(α1230'' -> α1227'') ~ (α1229'' -> [α1226'']), [(α1230'' -> α1227'') - (α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])) - (α1229'' -> [α1226'']), L: 0 [(α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])), (α1227'' -> (α1230'' -> α1227'')) :> (α1228'' -> (α1229'' -> [α1226'']))]]]], α1226'' :> α1225'', α1225'' :> ([[α1224'']], [[α1195'']],)]], α1224'' :> α1157'', [α1157'' - ([α1157''], [α1197''],) ~ ([[list[α1132'']]], [[α1183'']],) - list[α1132''], L: 0 [([α1157''], [α1197''],) ~ ([[list[α1132'']]], [[α1183'']],), ([α1157''], [α1197''],) :> α1200'', α1200'' :> ([[list[α1132'']]], [[α1183'']],)]]]
//│ L: 1 [([α1272'], [[[α1126'']]],) ~ list[α1198''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: α1224'', [α1224'' - ([[α1224'']], [[α1195'']],) ~ ([[list[α1198'']]], [[α1195'']],) - list[α1198''], L: 0 [([[α1224'']], [[α1195'']],) ~ ([[list[α1198'']]], [[α1195'']],), ([[α1224'']], [[α1195'']],) <: α1225'', α1225'' <: α1226'', α1226'' :> ([[list[α1198'']]], [[α1195'']],)]]]
//│ L: 3 [([α1272'], [[[α1126'']]],) ~ list[α1155''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: α1224'', [α1224'' - ([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],) - α1196'', L: 2 [([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],), ([[α1224'']], [[α1195'']],) <: α1225'', α1225'' <: α1226'', [α1226'' - (α1229'' -> [α1226'']) ~ (α1230'' -> α1227'') - α1227'', L: 1 [(α1229'' -> [α1226'']) ~ (α1230'' -> α1227''), [(α1229'' -> [α1226'']) - (α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')) - (α1230'' -> α1227''), L: 0 [(α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')), (α1228'' -> (α1229'' -> [α1226''])) <: (α1227'' -> (α1230'' -> α1227''))]]]], α1227'' <: ([α1196''], [α1194''],)]], [α1196'' - ([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],) - α1224'', L: 2 [([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],), ([α1196''], [α1194''],) :> α1227'', [α1227'' - (α1230'' -> α1227'') ~ (α1229'' -> [α1226'']) - α1226'', L: 1 [(α1230'' -> α1227'') ~ (α1229'' -> [α1226'']), [(α1230'' -> α1227'') - (α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])) - (α1229'' -> [α1226'']), L: 0 [(α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])), (α1227'' -> (α1230'' -> α1227'')) :> (α1228'' -> (α1229'' -> [α1226'']))]]]], α1226'' :> α1225'', α1225'' :> ([[α1224'']], [[α1195'']],)]], α1224'' <: list[α1155'']]
//│ L: 3 [([α1272'], [[[α1126'']]],) ~ list[α1198''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: α1224'', [α1224'' - ([[α1224'']], [[α1195'']],) ~ ([[list[α1198'']]], [[α1195'']],) - list[α1198''], L: 2 [([[α1224'']], [[α1195'']],) ~ ([[list[α1198'']]], [[α1195'']],), ([[α1224'']], [[α1195'']],) <: α1225'', α1225'' <: α1226'', [α1226'' - (α1229'' -> [α1226'']) ~ (α1230'' -> α1227'') - α1227'', L: 1 [(α1229'' -> [α1226'']) ~ (α1230'' -> α1227''), [(α1229'' -> [α1226'']) - (α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')) - (α1230'' -> α1227''), L: 0 [(α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')), (α1228'' -> (α1229'' -> [α1226''])) <: (α1227'' -> (α1230'' -> α1227''))]]]], [α1227'' - (α1230'' -> α1227'') ~ (α1229'' -> [α1226'']) - α1226'', L: 1 [(α1230'' -> α1227'') ~ (α1229'' -> [α1226'']), [(α1230'' -> α1227'') - (α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])) - (α1229'' -> [α1226'']), L: 0 [(α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])), (α1227'' -> (α1230'' -> α1227'')) :> (α1228'' -> (α1229'' -> [α1226'']))]]]], α1226'' :> ([[list[α1198'']]], [[α1195'']],)]]]
//│ L: 2 [list['a1259'] ~ (α1295' -> α1297'), [list['a1259'] - ([list['a1259']] -> α1267') ~ ([α1114'] -> α1272') - α1114', L: 1 [([list['a1259']] -> α1267') ~ ([α1114'] -> α1272'), ([list['a1259']] -> α1267') :> α1268', [α1268' - ([α1257'] -> α1268') ~ (['a1128'] -> α1270') - α1270', L: 0 [([α1257'] -> α1268') ~ (['a1128'] -> α1270'), ([α1257'] -> α1268') :> mulByDigit1256', mulByDigit1256' <: (['a1128'] -> α1270')]], α1270' <: ([α1114'] -> α1272')]], α1114' <: (α1295' -> α1297')]
//│ L: 2 [list[α1260'] ~ (α1295' -> α1297'), list[α1260'] :> α1258', [α1258' - (α1258' -> α1261') ~ ([α1114'] -> α1272') - α1114', L: 1 [(α1258' -> α1261') ~ ([α1114'] -> α1272'), [(α1258' -> α1261') - (α1257' -> (α1258' -> α1261')) ~ (['a1128'] -> α1270') - α1270', L: 0 [(α1257' -> (α1258' -> α1261')) ~ (['a1128'] -> α1270'), (α1257' -> (α1258' -> α1261')) <: mulByDigit1256', mulByDigit1256' <: (['a1128'] -> α1270')]], α1270' <: ([α1114'] -> α1272')]], α1114' <: (α1295' -> α1297')]
//│ L: 2 [([int], [[list['a1437']]],) ~ (α1310' -> α1320'), ([int], [[list['a1437']]],) <: α1298', [α1298' - (α1299' -> α1298') ~ (α1303' -> α1306') - α1306', L: 1 [(α1299' -> α1298') ~ (α1303' -> α1306'), [(α1299' -> α1298') - (α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')) - (α1303' -> α1306'), L: 0 [(α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')), (α1298' -> (α1299' -> α1298')) :> (α1300' -> (α1303' -> α1306'))]]]], α1306' :> α1308', α1308' :> α1307', α1307' :> (α1310' -> α1320')]
//│ L: 1 [([α1272'], [[[α1126'']]],) ~ list[α1201''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: list[α1201'']]
//│ L: 0 [([α1272'], [[[α1126'']]],) ~ list[α1131''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', α1156'' <: list[α1131'']]
//│ L: 2 [list['a1309'] ~ ([α1301'], [α1302'],), list['a1309'] <: α1307', α1307' <: α1308', α1308' <: α1306', [α1306' - (α1303' -> α1306') ~ (α1299' -> α1298') - α1298', L: 1 [(α1303' -> α1306') ~ (α1299' -> α1298'), [(α1303' -> α1306') - (α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')) - (α1299' -> α1298'), L: 0 [(α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')), (α1300' -> (α1303' -> α1306')) <: (α1298' -> (α1299' -> α1298'))]]]], [α1298' - (α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')) - α1300', L: 0 [(α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')), (α1298' -> (α1299' -> α1298')) :> (α1300' -> (α1303' -> α1306'))]], α1300' <: ([α1301'], [α1302'],)]
//│ L: 0 [([α1272'], [[[α1126'']]],) ~ list[α1132''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', α1156'' <: list[α1132'']]
//│ L: 2 [list['a1309'] ~ (α1310' -> α1320'), list['a1309'] <: α1307', α1307' <: α1308', α1308' <: α1306', [α1306' - (α1303' -> α1306') ~ (α1299' -> α1298') - α1298', L: 1 [(α1303' -> α1306') ~ (α1299' -> α1298'), [(α1303' -> α1306') - (α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')) - (α1299' -> α1298'), L: 0 [(α1300' -> (α1303' -> α1306')) ~ (α1298' -> (α1299' -> α1298')), (α1300' -> (α1303' -> α1306')) <: (α1298' -> (α1299' -> α1298'))]]]], [α1298' - (α1299' -> α1298') ~ (α1303' -> α1306') - α1306', L: 1 [(α1299' -> α1298') ~ (α1303' -> α1306'), [(α1299' -> α1298') - (α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')) - (α1303' -> α1306'), L: 0 [(α1298' -> (α1299' -> α1298')) ~ (α1300' -> (α1303' -> α1306')), (α1298' -> (α1299' -> α1298')) :> (α1300' -> (α1303' -> α1306'))]]]], α1306' :> α1308', α1308' :> α1307', α1307' :> (α1310' -> α1320')]
//│ L: 1 [([α1272'], [[[α1126'']]],) ~ list[α1155''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: α1224'', α1224'' <: list[α1155'']]
//│ L: 3 [([α1272'], [[[α1126'']]],) ~ list[α1131''], ([α1272'], [[[α1126'']]],) <: α1130'', α1130'' <: α1156'', [α1156'' - ([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],) - α1157'', L: 0 [([[α1156'']], [[list[α1158'']]],) ~ ([α1157''], [α1197''],), ([[α1156'']], [[list[α1158'']]],) <: α1199'', α1199'' <: α1200'', α1200'' <: ([α1157''], [α1197''],)]], α1157'' <: α1224'', [α1224'' - ([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],) - α1196'', L: 2 [([[α1224'']], [[α1195'']],) ~ ([α1196''], [α1194''],), ([[α1224'']], [[α1195'']],) <: α1225'', α1225'' <: α1226'', [α1226'' - (α1229'' -> [α1226'']) ~ (α1230'' -> α1227'') - α1227'', L: 1 [(α1229'' -> [α1226'']) ~ (α1230'' -> α1227''), [(α1229'' -> [α1226'']) - (α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')) - (α1230'' -> α1227''), L: 0 [(α1228'' -> (α1229'' -> [α1226''])) ~ (α1227'' -> (α1230'' -> α1227'')), (α1228'' -> (α1229'' -> [α1226''])) <: (α1227'' -> (α1230'' -> α1227''))]]]], α1227'' <: ([α1196''], [α1194''],)]], [α1196'' - ([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],) - α1224'', L: 2 [([α1196''], [α1194''],) ~ ([[α1224'']], [[α1195'']],), ([α1196''], [α1194''],) :> α1227'', [α1227'' - (α1230'' -> α1227'') ~ (α1229'' -> [α1226'']) - α1226'', L: 1 [(α1230'' -> α1227'') ~ (α1229'' -> [α1226'']), [(α1230'' -> α1227'') - (α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])) - (α1229'' -> [α1226'']), L: 0 [(α1227'' -> (α1230'' -> α1227'')) ~ (α1228'' -> (α1229'' -> [α1226''])), (α1227'' -> (α1230'' -> α1227'')) :> (α1228'' -> (α1229'' -> [α1226'']))]]]], α1226'' :> α1225'', α1225'' :> ([[α1224'']], [[α1195'']],)]], α1224'' :> α1157'', [α1157'' - ([α1157''], [α1197''],) ~ ([[α1156'']], [[list[α1158'']]],) - α1156'', L: 0 [([α1157''], [α1197''],) ~ ([[α1156'']], [[list[α1158'']]],), ([α1157''], [α1197''],) :> α1200'', α1200'' :> α1199'', α1199'' :> ([[α1156'']], [[list[α1158'']]],)]], α1156'' <: list[α1131'']]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ [ERROR] Type `_ -> _` does not match `_ * bool`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) <--- (?c) <--- (_ * bool)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                 ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.3  let rec wwhile (f,b) =
//│                           ^
//│   ◉ (?a * _) comes from
//│      - l.3  let rec wwhile (f,b) =
//│                            ^^^^^
//│     ◉ ((?a * _) -> _) comes from
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                        ^^^^^^^
//│     │           match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│     │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ (?wwhile) is assumed for
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ ((?b * _) -> _) comes from
//│        - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                    ^^^^^^
//│   ◉ (?b * _) comes from
//│      - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                         ^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed for
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * bool) comes from
//│    - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│                                                       ^^^^^^^^^^^
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b
//│ U max: 10, total: 58
//│ UERR 1 errors
//│ L: 2 [([α1480'] -> α1485') ~ ([[[α1488']]], [[bool]],), ([α1480'] -> α1485') :> α1479', [α1479' - ([α1479'], [α1480'],) ~ ([[α1490']], [[α1477']],) - α1490', L: 1 [([α1479'], [α1480'],) ~ ([[α1490']], [[α1477']],), [([α1479'], [α1480'],) - (([α1479'], [α1480'],) -> α1484') ~ (([[α1490']], [[α1477']],) -> α1494') - ([[α1490']], [[α1477']],), L: 0 [(([α1479'], [α1480'],) -> α1484') ~ (([[α1490']], [[α1477']],) -> α1494'), (([α1479'], [α1480'],) -> α1484') <: wwhile1478', wwhile1478' <: (([[α1490']], [[α1477']],) -> α1494')]]]], α1490' :> α1491', α1491' :> ([[[α1488']]], [[bool]],)]

// FIXME: no common provs
// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (?d) <--- (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                                                    ^^^^^^^
//│   ◉ ((_ * _) list) comes from
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a list) comes from
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.26     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?b list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?b) is assumed for
//│   ◉ (?b -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?c -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?c -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.16       if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.16       if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.16       if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed for
//│    - l.14     let f a x =
//│                       ^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> _) comes from
//│     │  - l.14     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?c -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│   ◉ (?c -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?c -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) comes from
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> _) comes from
//│      - l.14     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 35, total: 551
//│ UERR 3 errors
//│ L: 2 [list['a1638''] ~ ([α1636''], [α1637''],), list['a1638''] <: α1639'', α1639'' :> α1635'', [α1635'' - (α1635'' -> α1640'') ~ (α1629'' -> α1628'') - α1629'', L: 1 [(α1635'' -> α1640'') ~ (α1629'' -> α1628''), [(α1635'' -> α1640'') - (α1630'' -> (α1635'' -> α1640'')) ~ (α1628'' -> (α1629'' -> α1628'')) - (α1629'' -> α1628''), L: 0 [(α1630'' -> (α1635'' -> α1640'')) ~ (α1628'' -> (α1629'' -> α1628'')), (α1630'' -> (α1635'' -> α1640'')) <: (α1628'' -> (α1629'' -> α1628''))]]]], [α1629'' - (α1629'' -> α1628'') ~ (α1635'' -> α1640'') - α1635'', L: 1 [(α1629'' -> α1628'') ~ (α1635'' -> α1640''), [(α1629'' -> α1628'') - (α1628'' -> (α1629'' -> α1628'')) ~ (α1630'' -> (α1635'' -> α1640'')) - (α1635'' -> α1640''), L: 0 [(α1628'' -> (α1629'' -> α1628'')) ~ (α1630'' -> (α1635'' -> α1640'')), (α1628'' -> (α1629'' -> α1628'')) :> (α1630'' -> (α1635'' -> α1640''))]]]], α1635'' <: ([α1636''], [α1637''],)]
//│ L: 0 [list['a1603'''] ~ ([α1609'''], [α1610'''],), list['a1603'''] <: α1601''', α1601''' :> α1597''', α1597''' <: ([α1609'''], [α1610'''],)]
//│ L: 2 [([α1623''], [α1624''],) ~ list['a1638''], [([α1623''], [α1624''],) - list[([α1623''], [α1624''],)] ~ list[α1646''] - α1646'', L: 0 [list[([α1623''], [α1624''],)] ~ list[α1646''], list[([α1623''], [α1624''],)] <: list[α1646'']]], [α1646'' - list[α1646''] ~ list[α1629''] - α1629'', L: 0 [list[α1646''] ~ list[α1629''], list[α1646''] <: list[α1629'']]], [α1629'' - (α1629'' -> α1628'') ~ (α1635'' -> α1640'') - α1635'', L: 1 [(α1629'' -> α1628'') ~ (α1635'' -> α1640''), [(α1629'' -> α1628'') - (α1628'' -> (α1629'' -> α1628'')) ~ (α1630'' -> (α1635'' -> α1640'')) - (α1635'' -> α1640''), L: 0 [(α1628'' -> (α1629'' -> α1628'')) ~ (α1630'' -> (α1635'' -> α1640'')), (α1628'' -> (α1629'' -> α1628'')) :> (α1630'' -> (α1635'' -> α1640''))]]]], α1635'' <: α1639'', α1639'' :> list['a1638'']]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.15     let base = 0 in
//│ │                        ^
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?a) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.14     let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.14     let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?a -> _ -> int) comes from
//│   │  - l.14     let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.17     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ (int) comes from
//│    - l.14     let f a x = (a + x) mod 10 in
//│                           ^^^^^^^^^^^^^^
//│    - lib. let mod: int -> int -> int
//│                                  ^^^
//│   ◉ (_ -> int) comes from
//│      - l.14     let f a x = (a + x) mod 10 in
//│                         ^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> int) comes from
//│     │  - l.14     let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.17     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 63, total: 556
//│ UERR 3 errors
//│ L: 2 [int ~ ([α1861''], [α1862''],), [int - (α1854'' -> [int]) ~ (α1852'' -> α1851'') - α1851'', L: 1 [(α1854'' -> [int]) ~ (α1852'' -> α1851''), [(α1854'' -> [int]) - (α1853'' -> (α1854'' -> [int])) ~ (α1851'' -> (α1852'' -> α1851'')) - (α1852'' -> α1851''), L: 0 [(α1853'' -> (α1854'' -> [int])) ~ (α1851'' -> (α1852'' -> α1851'')), (α1853'' -> (α1854'' -> [int])) <: (α1851'' -> (α1852'' -> α1851''))]]]], α1851'' <: ([α1861''], [α1862''],)]
//│ L: 1 [int ~ ([α1861''], [α1862''],), int :> α1853'', [α1853'' - (α1853'' -> (α1854'' -> [int])) ~ (α1851'' -> (α1852'' -> α1851'')) - α1851'', L: 0 [(α1853'' -> (α1854'' -> [int])) ~ (α1851'' -> (α1852'' -> α1851'')), (α1853'' -> (α1854'' -> [int])) <: (α1851'' -> (α1852'' -> α1851''))]], α1851'' <: ([α1861''], [α1862''],)]
//│ L: 0 [int ~ ([α1861''], [α1862''],), int <: α1851'', α1851'' <: ([α1861''], [α1862''],)]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ [ERROR] Type `_ * _` does not match `_ -> (_ * bool)`
//│ 
//│         (_ * _) <--- (?a) ~~~~ (_ -> (_ * bool))
//│ 
//│ ◉ (_ * _) comes from
//│ ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                             ^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│                    ^^^
//│   ◉ (_ -> ?a) comes from
//│   ▲  - l.-351  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed for
//│      - l.-352let rec wwhile (f,b) =
//│                              ^
//│     ◉ (?b * _) comes from
//│        - l.-352let rec wwhile (f,b) =
//│                               ^^^^^
//│       ◉ ((?b * _) -> _) comes from
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                         ^^^^^^^
//│       │            match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│       │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ (?wwhile) is assumed for
//│       │  - l.-352let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ ((_ -> _ -> (_ * bool) * _) -> _) comes from
//│          - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                      ^^^^^^
//│     ◉ (_ -> _ -> (_ * bool) * _) comes from
//│        - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                           ^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> (_ * bool)) comes from
//│      - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                          ^^^^^^^^
//│      - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ -> (_ * bool)) comes from
//│    - l.1  let intboolf f x = ((f x), ((f x) < 1));;
//│                          ^^^^^^^^^^^^^^^^^^^^^^^^
//│ intboolf: ('a -> int) -> 'a -> (int, bool,)
//│ fixpoint: ('a, 'b,) -> 'b
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ U max: 10, total: 70
//│ UERR 1 errors
//│ L: 3 [([α1947'], [α1952'],) ~ (α1954' -> ([α1957'], [[bool]],)), ([α1947'], [α1952'],) :> α1951', [α1951' - ([α1946'] -> α1951') ~ (α1953' -> (α1954' -> ([α1957'], [[bool]],))) - (α1954' -> ([α1957'], [[bool]],)), L: 2 [([α1946'] -> α1951') ~ (α1953' -> (α1954' -> ([α1957'], [[bool]],))), ([α1946'] -> α1951') :> α1945', [α1945' - ([α1945'], [α1946'],) ~ ([[(α1953' -> (α1954' -> ([α1957'], [[bool]],)))]], [[α1943']],) - (α1953' -> (α1954' -> ([α1957'], [[bool]],))), L: 1 [([α1945'], [α1946'],) ~ ([[(α1953' -> (α1954' -> ([α1957'], [[bool]],)))]], [[α1943']],), [([α1945'], [α1946'],) - (([α1945'], [α1946'],) -> α1950') ~ (([[(α1953' -> (α1954' -> ([α1957'], [[bool]],)))]], [[α1943']],) -> α1959') - ([[(α1953' -> (α1954' -> ([α1957'], [[bool]],)))]], [[α1943']],), L: 0 [(([α1945'], [α1946'],) -> α1950') ~ (([[(α1953' -> (α1954' -> ([α1957'], [[bool]],)))]], [[α1943']],) -> α1959'), (([α1945'], [α1946'],) -> α1950') <: wwhile1944', wwhile1944' <: (([[(α1953' -> (α1954' -> ([α1957'], [[bool]],)))]], [[α1943']],) -> α1959')]]]]]]]



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a] -> 'b
//│   where
//│     'b = 'b -> 'b, ('c -> 'c) -> 'c -> 'c
//│     'a = 'a -> 'a, ('c -> 'c) -> 'c -> 'c
//│     'c = 'c -> 'c



// file 830
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (int) comes from
//│ │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│ │                                                    ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                         ^^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                      ^^^^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                                                                     ^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (?sumList) is assumed for
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (_ -> ?a) comes from
//│      - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (_ -> ?a) comes from
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (?sumList) is assumed for
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                   ^^^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ │                                               ^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                 ^^^^^^^^^^
//│ modulus: int -> int
//│ digitsOfInt: int -> list[int]
//│ lt10: int -> bool
//│ sumList: list[int] -> int
//│ additivePersistence: int -> int
//│ U max: 9, total: 157
//│ UERR 1 errors
//│ L: 1 [int ~ ([additivePersistence2036'] -> α2076'), int <: α2059', [α2059' - (α2057' -> α2059') ~ ([list['a2058']] -> α2060') - α2060', L: 0 [(α2057' -> α2059') ~ ([list['a2058']] -> α2060'), (α2057' -> α2059') <: sumList2056', sumList2056' <: ([list['a2058']] -> α2060')]], [α2060' - ([list['a2058']] -> α2060') ~ (α2057' -> α2059') - α2059', L: 0 [([list['a2058']] -> α2060') ~ (α2057' -> α2059'), ([list['a2058']] -> α2060') :> sumList2056', sumList2056' :> (α2057' -> α2059')]], [α2059' - (α2057' -> α2059') ~ ([α2061'] -> α2074') - α2074', L: 0 [(α2057' -> α2059') ~ ([α2061'] -> α2074'), (α2057' -> α2059') <: sumList2056', sumList2056' <: ([α2061'] -> α2074')]], α2074' <: ([additivePersistence2036'] -> α2076')]


// FIXME investigate
// file 1770 (TODO fix nested flows)
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (_ -> _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                           ^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                             ^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ~~~~ (?a) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│    - l.1  let rec filter l a =
//│                            ^^^
//│             match l with ...
//│             ^^^^^^^^^^^^^^^^
//│   ◉ (_ -> _ -> _) comes from
//│   │  - l.1  let rec filter l a =
//│   │                        ^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?a) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?a) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                   ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?c) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) comes from
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                                         ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                       ^^^^^^
//│ ◉ (?b) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?b) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?a) comes from
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│ ◉ (?a) is assumed for
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?a) comes from
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed for
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│ ◉ (?c) is assumed for
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                    ^^^^^^^^^^^^^^
//│   ◉ (_ * ?c) comes from
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) comes from
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ ◉ (_ list) comes from
//│ filter: list['a] -> 'b -> list['b]
//│ removeDuplicates: list[list['a]] -> list['a]
//│ U max: 18, total: 218
//│ UERR 4 errors
//│ L: 1 [([α2118'''] -> α2117''') ~ list['a2110''], ([α2118'''] -> α2117''') :> α2122''', [α2122''' - ([list['a2113''']] -> α2122''') ~ ([list['a2113''']] -> α2120''') - α2120''', L: 0 [([list['a2113''']] -> α2122''') ~ ([list['a2113''']] -> α2120'''), ([list['a2113''']] -> α2122''') :> filter2111''', filter2111''' <: ([list['a2113''']] -> α2120''')]], [α2120''' - ([list['a2113''']] -> α2120''') ~ (α2125''' -> α2127''') - α2127''', L: 0 [([list['a2113''']] -> α2120''') ~ (α2125''' -> α2127'''), ([list['a2113''']] -> α2120''') :> filter2111''', filter2111''' <: (α2125''' -> α2127''')]], [α2127''' - ([['a2109'']], [α2127'''],) ~ ('a2110'', list['a2110''],) - list['a2110''], L: 0 [([['a2109'']], [α2127'''],) ~ ('a2110'', list['a2110''],), ([['a2109'']], [α2127'''],) <: ('a2110'', list['a2110''],)]]]
//│ L: 1 [([α2118'''] -> α2116''') ~ list['a2110''], ([α2118'''] -> α2116''') :> α2120''', [α2120''' - ([list['a2113''']] -> α2120''') ~ ([list['a2113''']] -> α2122''') - α2122''', L: 0 [([list['a2113''']] -> α2120''') ~ ([list['a2113''']] -> α2122'''), ([list['a2113''']] -> α2120''') :> filter2111''', filter2111''' <: ([list['a2113''']] -> α2122''')]], [α2122''' - ([list['a2113''']] -> α2122''') ~ ([list['a2113''']] -> α2120''') - α2120''', L: 0 [([list['a2113''']] -> α2122''') ~ ([list['a2113''']] -> α2120'''), ([list['a2113''']] -> α2122''') :> filter2111''', filter2111''' <: ([list['a2113''']] -> α2120''')]], [α2120''' - ([list['a2113''']] -> α2120''') ~ (α2125''' -> α2127''') - α2127''', L: 0 [([list['a2113''']] -> α2120''') ~ (α2125''' -> α2127'''), ([list['a2113''']] -> α2120''') :> filter2111''', filter2111''' <: (α2125''' -> α2127''')]], [α2127''' - ([['a2109'']], [α2127'''],) ~ ('a2110'', list['a2110''],) - list['a2110''], L: 0 [([['a2109'']], [α2127'''],) ~ ('a2110'', list['a2110''],), ([['a2109'']], [α2127'''],) <: ('a2110'', list['a2110''],)]]]
//│ L: 0 [list['a2109''] ~ (['a2109''] -> α2125'''), list['a2109''] <: (['a2109''] -> α2125''')]
//│ L: 1 [(α2118''' -> α2121''') ~ list['a2110''], [(α2118''' -> α2121''') - (α2112''' -> (α2118''' -> α2121''')) ~ (α2125''' -> α2127''') - α2127''', L: 0 [(α2112''' -> (α2118''' -> α2121''')) ~ (α2125''' -> α2127'''), (α2112''' -> (α2118''' -> α2121''')) <: filter2111''', filter2111''' <: (α2125''' -> α2127''')]], [α2127''' - ([['a2109'']], [α2127'''],) ~ ('a2110'', list['a2110''],) - list['a2110''], L: 0 [([['a2109'']], [α2127'''],) ~ ('a2110'', list['a2110''],), ([['a2109'']], [α2127'''],) <: ('a2110'', list['a2110''],)]]]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> 'b) -> 'a -> ('a -> 'b, bool,)
//│ wwhile: 'wwhile
//│   where
//│     'wwhile = ('a -> ('a, bool,), 'a,) -> 'b, ('a -> ('a, bool,), 'b,) -> 'b
//│ fixpoint: ('a, 'b,) -> 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ [ERROR] Type `_ * _ * _` does not match `_ -> _`
//│ 
//│         (?a * _ * _) ~~~~ (?a) ---> (?b) ~~~~ (?c) ---> (_ -> _)
//│ 
//│ ◉ (?a * _ * _) comes from
//│    - l.1  let rec assoc (d,k,l) =
//│                         ^^^^^^^
//│   ◉ ((?a * _ * _) -> ?b) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.1  let rec assoc (d,k,l) =
//│ │                        ^
//│ │  - l.3    | [] -> d
//│ │                   ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.2    match l with
//│             ^^^^^^^^^^^^
//│             | [] -> d ...
//│             ^^^^^^^^^^^^^
//│   ◉ ((?a * _ * _) -> ?b) comes from
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                       ^^^^^^^^^
//│   │           match l with ...
//│   │           ^^^^^^^^^^^^^^^^
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?assoc) is assumed for
//│   │  - l.1  let rec assoc (d,k,l) =
//│   │                 ^^^^^
//│   ▼ 
//│   ◉ (?a -> ?c) comes from
//│      - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                                 ^^^^^
//│ ◉ (?c) is assumed for
//│ │  - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ │                                                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) comes from
//│    - l.4    | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│                                                               ^^^^^^^
//│ assoc: 'assoc
//│   where
//│     'assoc = (('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],), 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,), ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],) -> ('b, 'c, 'e,)
//│     'b = ('b, 'c, list[('d, 'a -> ('b, 'c, 'e,),)],)
//│     'a = ('d, 'a -> ('b, 'c, 'e,),)
//│     'e = list[('d, 'a -> ('b, 'c, 'e,),)]
//│ U max: 10, total: 35
//│ UERR 1 errors
//│ L: 1 [([α2207'], [α2208'], [α2209'],) ~ ([α2208'] -> α2224'), [([α2207'], [α2208'], [α2209'],) - (([α2207'], [α2208'], [α2209'],) -> α2210') ~ ([α2207'] -> α2222') - α2207', L: 0 [(([α2207'], [α2208'], [α2209'],) -> α2210') ~ ([α2207'] -> α2222'), (([α2207'], [α2208'], [α2209'],) -> α2210') <: assoc2206', assoc2206' <: ([α2207'] -> α2222')]], α2207' <: α2210', [α2210' - (([α2207'], [α2208'], [α2209'],) -> α2210') ~ ([α2207'] -> α2222') - α2222', L: 0 [(([α2207'], [α2208'], [α2209'],) -> α2210') ~ ([α2207'] -> α2222'), (([α2207'], [α2208'], [α2209'],) -> α2210') <: assoc2206', assoc2206' <: ([α2207'] -> α2222')]], α2222' <: ([α2208'] -> α2224')]
