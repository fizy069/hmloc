:AllowTypeErrors

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List.length l1) - (List.length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List.combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│   ◉ (?a -> _ -> ?a) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   │ 
//│   ◉ (?b -> _ -> _) is here
//│      - l.13     let f a x = padZero l1 l2 in
//│                       ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> _ -> _) is here
//│   │  - l.13     let f a x = padZero l1 l2 in
//│   │                   ^^^^^^^^^^^^^^^^^^^
//│   │  - l.16     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?a -> _ -> ?a) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ list * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (_ list * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list * _) is here
//│    - l.7    then (((clone 0 (-1 * diff)) @ l1), l2)
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _ list`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _ list)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _ list) is here
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * _) is here
//│    - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                    ^^^^^^^^
//│ [ERROR] Type `(_ * _) list` does not match `_ * _`
//│ 
//│         ((_ * _) list) ---> (?a) ~~~~ (?b) <--- (?c) ---> (?b) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ ((_ * _) list) is here
//│ │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│ │                                                  ^^^^^^^^^^^^^
//│ │  - l.14     let base = List.combine l1 l2 in
//│ │                        ^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                                              ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.13     let f a x = padZero l1 l2 in
//│                         ^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    if diff < 0
//│ │           ^^^^^^^^^^^
//│ │           then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ │  - l.8    else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.6    if diff < 0
//│             ^^^^^^^^^^^
//│             then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?b) is here
//│     │  - l.13     let f a x = padZero l1 l2 in
//│     │                   ^^^^^^^^^^^^^^^^^^^
//│     │  - l.16     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.16     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.16     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ cloneHelper: 'a -> int -> ('b & 'c & list['a]) -> 'b
//│   where
//│     'b :> list['a] | 'c
//│        <: 'c
//│     'c :> 'b | list['a]
//│        <: 'b
//│ cloneHelper: 'a -> int -> list['a] -> 'b
//│ clone: 'a -> int -> (list[nothing] | list['a])
//│ clone: 'clone
//│ padZero: (list['a] & list[?]) -> (list['b] & list[?]) -> (? | list['a], ? | list['b],)
//│ padZero: list['a] -> list['b] -> (list['a], list['b],)
//│ removeZero: ('b & 'c & 'd & list['a]) -> 'c
//│   where
//│     'b :> 'c | 'd | list[nothing] | list['a]
//│        <: 'c & 'd
//│     'c :> list[nothing] | 'b | 'd | list['a]
//│        <: 'b & 'd
//│     'd :> 'c | list[nothing] | 'b | list['a]
//│        <: 'b & 'c
//│ removeZero: list[int] -> list[int]
//│ bigAdd: list[?] -> (list['a] & 'b & 'c & 'd & list[?] & list['a & 'e] & list['a & 'e & 'f]) -> ('c | 'd | 'b | list[int | 'f] | list[int | 'f | 'e] | list[int | 'f | 'e | 'a] | list[nothing])
//│   where
//│     'b :> list[int | 'f] | list[int | 'f | 'e] | 'c | list[nothing] | 'd | list[int | 'f | 'e | 'a]
//│        <: 'd & 'c
//│     'c :> list[int | 'f] | list[int | 'f | 'e] | list[nothing] | 'd | 'b | list[int | 'f | 'e | 'a]
//│        <: 'd & 'b
//│     'd :> list[int | 'f] | list[int | 'f | 'e] | 'c | 'b | list[nothing] | list[int | 'f | 'e | 'a]
//│        <: 'c & 'b
//│ bigAdd: list['a] -> 'b -> list[int]
//│   where
//│     'b = list[int], list['c]
//│ U max: 32, total: 401
//│ UERR 6 errors
//│ L: 1 [list[([α335''], [α336''],)] ~ ([α352''], [α353''],), list[([α335''], [α336''],)] <: α343'', [α343'' - (α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])) - α345'', L: 0 [(α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])), (α343'' -> (α344'' -> α343'')) :> (α345'' -> (α346'' -> [α329'']))]], [α345'' - (α345'' -> (α346'' -> [α329''])) ~ (α343'' -> (α344'' -> α343'')) - α343'', L: 0 [(α345'' -> (α346'' -> [α329''])) ~ (α343'' -> (α344'' -> α343'')), (α345'' -> (α346'' -> [α329''])) <: (α343'' -> (α344'' -> α343''))]], α343'' <: ([α352''], [α353''],)]
//│ L: 2 [list[([α335''], [α336''],)] ~ ([[list[α281'']]], [[α304'']],), list[([α335''], [α336''],)] <: α343'', [α343'' - (α344'' -> α343'') ~ (α346'' -> [α329'']) - α329'', L: 1 [(α344'' -> α343'') ~ (α346'' -> [α329'']), [(α344'' -> α343'') - (α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])) - (α346'' -> [α329'']), L: 0 [(α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])), (α343'' -> (α344'' -> α343'')) :> (α345'' -> (α346'' -> [α329'']))]]]], α329'' :> ([[list[α281'']]], [[α304'']],)]
//│ L: 0 [list[([α335''], [α336''],)] ~ ([α352''], [α353''],), list[([α335''], [α336''],)] <: α343'', α343'' <: ([α352''], [α353''],)]
//│ L: 2 [list[([α335''], [α336''],)] ~ ([[α280'']], [[list[α305'']]],), list[([α335''], [α336''],)] <: α343'', [α343'' - (α344'' -> α343'') ~ (α346'' -> [α329'']) - α329'', L: 1 [(α344'' -> α343'') ~ (α346'' -> [α329'']), [(α344'' -> α343'') - (α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])) - (α346'' -> [α329'']), L: 0 [(α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])), (α343'' -> (α344'' -> α343'')) :> (α345'' -> (α346'' -> [α329'']))]]]], α329'' :> α328'', α328'' :> ([[α280'']], [[list[α305'']]],)]
//│ L: 2 [list[([α335''], [α336''],)] ~ ([[α280'']], [[α304'']],), list[([α335''], [α336''],)] <: α343'', [α343'' - (α344'' -> α343'') ~ (α346'' -> [α329'']) - α329'', L: 1 [(α344'' -> α343'') ~ (α346'' -> [α329'']), [(α344'' -> α343'') - (α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])) - (α346'' -> [α329'']), L: 0 [(α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])), (α343'' -> (α344'' -> α343'')) :> (α345'' -> (α346'' -> [α329'']))]]]], α329'' :> α328'', α328'' :> ([[α280'']], [[α304'']],)]
//│ L: 2 [list[([α335''], [α336''],)] ~ ([α352''], [α353''],), list[([α335''], [α336''],)] <: α343'', [α343'' - (α344'' -> α343'') ~ (α346'' -> [α329'']) - α329'', L: 1 [(α344'' -> α343'') ~ (α346'' -> [α329'']), [(α344'' -> α343'') - (α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])) - (α346'' -> [α329'']), L: 0 [(α343'' -> (α344'' -> α343'')) ~ (α345'' -> (α346'' -> [α329''])), (α343'' -> (α344'' -> α343'')) :> (α345'' -> (α346'' -> [α329'']))]]]], α329'' :> α328'', α328'' <: α329'', [α329'' - (α346'' -> [α329'']) ~ (α344'' -> α343'') - α343'', L: 1 [(α346'' -> [α329'']) ~ (α344'' -> α343''), [(α346'' -> [α329'']) - (α345'' -> (α346'' -> [α329''])) ~ (α343'' -> (α344'' -> α343'')) - (α344'' -> α343''), L: 0 [(α345'' -> (α346'' -> [α329''])) ~ (α343'' -> (α344'' -> α343'')), (α345'' -> (α346'' -> [α329''])) <: (α343'' -> (α344'' -> α343''))]]]], α343'' <: ([α352''], [α353''],)]

// file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ [ERROR] Type `int` does not match `float`
//│ 
//│         (int) ---> (float)
//│ 
//│ ◉ (int) is here
//│ │  - l.16   | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ │                                                                           ^
//│ ▼ 
//│ ◉ (float) is here
//│    - lib. let ( /. ): float -> float -> float
//│                                ^^^^^
//│ VarX: expr
//│ VarX: expr
//│ VarY: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ pi: float
//│ eval: (nothing, nothing, nothing,) -> 'a
//│   where
//│     'a :> float
//│ eval: (expr, float, float,) -> float
//│ U max: 14, total: 180
//│ UERR 1 errors
//│ L: 0 [int ~ float, int <: float]

// FIXME file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (int) is here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) is here
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) is here
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed here
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (?c -> ?d -> ?c) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) is here
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: (list[list[?]] & list['a]) -> (int | 'a)
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 31
//│ UERR 1 errors
//│ L: 2 [int ~ list['a639'], int <: α640', [α640' - (α638' -> α640') ~ (α636' -> α635') - α635', L: 1 [(α638' -> α640') ~ (α636' -> α635'), [(α638' -> α640') - (α637' -> (α638' -> α640')) ~ (α635' -> (α636' -> α635')) - (α636' -> α635'), L: 0 [(α637' -> (α638' -> α640')) ~ (α635' -> (α636' -> α635')), (α637' -> (α638' -> α640')) <: (α635' -> (α636' -> α635'))]]]], α635' :> α632', [α632' - list[α632'] ~ list[α636'] - α636', L: 0 [list[α632'] ~ list[α636'], list[α632'] :> α627', α627' <: list[α636']]], [α636' - (α636' -> α635') ~ (α638' -> α640') - α638', L: 1 [(α636' -> α635') ~ (α638' -> α640'), [(α636' -> α635') - (α635' -> (α636' -> α635')) ~ (α637' -> (α638' -> α640')) - (α638' -> α640'), L: 0 [(α635' -> (α636' -> α635')) ~ (α637' -> (α638' -> α640')), (α635' -> (α636' -> α635')) :> (α637' -> (α638' -> α640'))]]]], α638' <: list['a639']]


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]");;
//│ sepConcat: string -> list[string] -> string
//│ sepConcat: 'sepConcat
//│ stringOfList: anything -> anything -> string
//│ stringOfList: 'a -> 'b -> string

// FIXME string indexing - Array types not supported
// file 2376
let getHead h = match h with | [] -> [] | h::t -> h;;
let getTail t = match t with | [] -> [] | h::t -> t;;
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let rec matchHeads x y =
  match x with
  | [] -> true
  | h::t ->
      if (getHead x) = (getHead y) then matchHeads t (getTail y) else false;;
let explode s =
  let rec go i =
    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
  go 0;;
let palindrome w =
  match explode w with
  | [] -> true
  | h::t -> matchHeads (explode w) (listReverse (explode w));;
//│ /!!!\ Uncaught error: scala.MatchError: undefined (of class mlscript.TyperDatatypes$TypeRef)


// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [mod n 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ sumListHelper: ('a & 'b & int) -> list[int] -> 'a
//│   where
//│     'a :> int | 'b
//│        <: 'b
//│     'b :> 'a | int
//│        <: 'a
//│ sumListHelper: int -> list[int] -> 'a
//│ digitsOfIntHelper: int -> (list[int] | list[nothing])
//│ digitsOfIntHelper: int -> list[int]
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ digitsOfInt: 'digitsOfInt
//│ sumList: list[int] -> int
//│ sumList: 'sumList
//│ additivePersistence: anything -> nothing
//│ additivePersistence: 'additivePersistence

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.6    match explode x with
//│ │                 ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.6    match explode x with
//│                   ^^^^^^^
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.8        if (getHeads (explode x)) = []
//│ │                             ^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.8        if (getHeads (explode x)) = []
//│                               ^^^^^^^
//│ listReverse: list['a] -> (list['a] | list[nothing])
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> (list['a] | list[nothing])
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> (list['a] | list[nothing])
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.486:	  match explode x with
//│ ╙──      	        ^^^^^^^
//│ ╔══[ERROR] identifier not found: explode
//│ ║  
//│ ║  l.488:	      if (getHeads (explode x)) = []
//│ ╙──      	                    ^^^^^^^
//│ matchHeads: error -> bool
//│ matchHeads: list['a] -> bool
//│ U max: 20, total: 203
//│ UERR 2 errors
//│ L: 0 [error<> ~ ([α1050'] -> α1052'), error<> <: ([α1050'] -> α1052')]
//│ L: 0 [error<> ~ ([α1050'] -> α1073'), error<> <: ([α1050'] -> α1073')]

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ /!!!\ Uncaught error: scala.MatchError: undefined (of class mlscript.TyperDatatypes$TypeRef)

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.546:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [mod n 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ [ERROR] Type `error` does not match `_ -> _`
//│ 
//│         (error) ---> (_ -> _)
//│ 
//│ ◉ (error) is here
//│ │  - l.-20    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│ │                      ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.-20    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
//│                        ^^^^^^^^^^^^^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                                                       ^^^^^
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.6    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.7    | [] -> 0
//│                     ^
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ digitsOfInt: int -> list[int]
//│ addNumbs: list[int] -> int
//│ addNumbs: list[int] -> int
//│ digits: int -> (list[int] | list[nothing])
//│ digits: int -> list[int]
//│ additivePersistence: int -> (bool | int)
//│ additivePersistence: 'additivePersistence
//│ U max: 6, total: 98
//│ UERR 2 errors
//│ L: 0 [bool ~ int, bool <: α1231', α1231' <: α1217', α1217' :> int]
//│ L: 0 [error<> ~ ([α1129'] -> α1135''), error<> <: ([α1129'] -> α1135'')]


// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) is here
//│ │  - l.-333  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2  let buildSine e = Sine e;;
//│ │                           ^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) is here
//│    - l.11       then buildSine build (rand, (d - 1))
//│                      ^^^^^^^^^^^^^^^
//│ [ERROR] Type `expr` does not match `(_ * int) -> _`
//│ 
//│         (expr) ---> ((_ * int) -> _)
//│ 
//│ ◉ (expr) is here
//│ │  - l.-333  | Thresh of expr* expr* expr* expr;;
//│ │              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let buildCosine e = Cosine e;;
//│ │                             ^^^^^^^^
//│ ▼ 
//│ ◉ ((_ * int) -> _) is here
//│    - l.12       else buildCosine build (rand, (d - 1));;
//│                      ^^^^^^^^^^^^^^^^^
//│ buildCosine: expr -> expr
//│ buildCosine: expr -> expr
//│ buildSine: expr -> expr
//│ buildSine: expr -> expr
//│ buildX: () -> expr
//│ buildX: () -> expr
//│ buildY: () -> expr
//│ buildY: () -> expr
//│ build: (nothing, nothing,) -> () -> expr
//│ build: expr
//│ U max: 3, total: 27
//│ UERR 2 errors
//│ L: 0 [expr ~ (([[α1244']], [[int]],) -> α1271'), expr <: (([[α1244']], [[int]],) -> α1271')]
//│ L: 0 [expr ~ (([[α1244']], [[int]],) -> α1265'), expr <: (([[α1244']], [[int]],) -> α1265')]

// TODO file 1337 in separate file to avoid collisions

// file 2752 mod
let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
let x l = List.map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List.rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ [ERROR] Type `_ -> _ list -> _ list` does not match `int`
//│ 
//│         (_ -> _ list -> _ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ -> _ list -> _ list) is here
//│ │  - l.2  let x l = List.map string_of_int;;
//│ │               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                       ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                 ^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let ( * ): int -> int -> int
//│                      ^^^
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ---> (?a) ---> (int)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.3  let y = [1, 2, 3];;
//│ │                 ^^^^^^^^^
//│ │  - l.7    | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ │                                  ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                         ^
//│ │  - l.1  let remainder x y = if (x * y) > 10 then mod (x * y) 10 else 0;;
//│ │                                     ^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let ( * ): int -> int -> int
//│                             ^^^
//│ remainder: int -> int -> int
//│ remainder: int -> int -> int
//│ x: anything -> list[int] -> list[string]
//│ x: 'a -> list[int] -> list[string]
//│ y: list[(int, int, int,)]
//│ y: list[(int, int, int,)]
//│ mulByDigit: anything -> list[?] -> (list[int] | list[nothing])
//│ mulByDigit: 'b -> list['a] -> list[int]
//│ U max: 7, total: 56
//│ UERR 2 errors
//│ L: 0 [list['a1328'] ~ int, list['a1328'] <: α1322', α1322' <: int]
//│ L: 0 [(α1324' -> [(list[α1325'] -> list[α1326'])]) ~ int, (α1324' -> [(list[α1325'] -> list[α1326'])]) <: α1321', α1321' <: int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List.length l1) - (List.length l2));;
let padZero l1 l2 =
  if (List.length l1) < (List.length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ~~~~ (?b) ---> (_ -> _)
//│ 
//│   ◉ (_ * _ list) is here
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                           ^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ * ?a) is here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                               ^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (int -> ?a) is here
//│   ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│   │                                                 ^^^^^^^
//│   │ 
//│   ◉ (?b) is assumed here
//│      - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│                                                     ^^^^^^^
//│     ◉ (_ -> ?b) is here
//│     ▲  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                                                 ^^^^^
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     │ 
//│     ◉ (?clone) is assumed here
//│     │  - l.1  let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
//│     │                 ^^^^^
//│     ▼ 
//│     ◉ (int -> ?c) is here
//│        - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                       ^^^^^
//│   ◉ (?c) is assumed here
//│   │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (int -> ?d) is here
//│      - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                     ^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│ │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.6    else (clone 0 (padLength l1 l2)) l2;;
//│                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> (list[nothing] | list['a])
//│ clone: 'a -> int -> list['a]
//│ padLength: list[?] -> list[?] -> int
//│ padLength: list['a] -> list['b] -> int
//│ padZero: (list[?] & list['a]) -> list[?] -> list[list[nothing] | list[int] | 'a]
//│ padZero: list[list[int]] -> list['a] -> list[list[int]]
//│ U max: 9, total: 126
//│ UERR 1 errors
//│ L: 2 [list['a1428'] ~ ([α1396'] -> α1446'), [list['a1428'] - ('a1428', list['a1428'],) ~ ([[α1427']], [α1431'],) - α1431', L: 0 [('a1428', list['a1428'],) ~ ([[α1427']], [α1431'],), ('a1428', list['a1428'],) :> ([[α1427']], [α1431'],)]], [α1431' - ([int] -> α1431') ~ ([[int]] -> α1444') - α1444', L: 1 [([int] -> α1431') ~ ([[int]] -> α1444'), ([int] -> α1431') :> α1434', [α1434' - ([α1427'] -> α1434') ~ (int -> α1436') - α1436', L: 0 [([α1427'] -> α1434') ~ (int -> α1436'), ([α1427'] -> α1434') :> clone1426', clone1426' <: (int -> α1436')]], α1436' <: ([[int]] -> α1444')]], α1444' <: ([α1396'] -> α1446')]

// file 2736 [TODO different part of file has errors]
let rec addHelper (t,u) =
 match List.rev t with
 | [] -> []
 | h::t ->
    match List.rev u with
     | [] -> []
     | h'::t' ->
         if (h + h') > 10
         then (addHelper (t, t')) @ [(1 + h') + h]
         else (addHelper (t, t')) @ [h' + h];;
//│ addHelper: (nothing, nothing,) -> (list[int] | list[nothing])
//│ addHelper: (list[int], list[int],) -> list[int]



// file 1948
let rec helper x = if x = 0 then 1 else 10 * (helper (x - 1));;
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                        ^^^^
//│ │            let add (l1,l2) = ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-807  then (((clone 0 (-1 * diff)) @ l1), l2)
//│ │                                           ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let (@): 'a list -> 'a list -> 'a list
//│                               ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-809  let diff = (List.length l1) - (List.length l2) in
//│ │                                    ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-800    let base = List.combine l1 l2 in
//│ │                                      ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-809  let diff = (List.length l1) - (List.length l2) in
//│ │                                    ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-802  let add (l1,l2) =
//│   │                    ^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-807  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?f * _) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                   ^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-807  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-802  let add (l1,l2) =
//│   │                    ^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) is here
//│      - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-809  let diff = (List.length l1) - (List.length l2) in
//│ │                                    ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ -> _`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ -> _)
//│ 
//│ ◉ (int * _ list) is here
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) is here
//│    - l.-803let bigAdd l1 l2 =
//│                          ^^^^
//│              let add (l1,l2) = ...
//│              ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `int * _ list` does not match `_ list`
//│ 
//│         (int * _ list) ---> (?a) ~~~~ (?b) <--- (?c) <--- (?d) <--- (_ list)
//│ 
//│ ◉ (int * _ list) is here
//│ │  - l.9    let base = (0, []) in
//│ │                      ^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                                                ^^^^
//│     ◉ (?a -> _ -> ?a) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?b) is here
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                     ^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                        ^^^^
//│ │            let add (l1,l2) = ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ~~~~ (?a) ---> (_ -> _)
//│ 
//│   ◉ (_ list -> _) is here
//│   ▲  - l.-135  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│   │                                         ^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a) is assumed here
//│      - l.-135  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│                                             ^^^^^^^^^^^^
//│     ◉ (_ -> ?a) is here
//│     ▲  - l.-135  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│     │                                         ^^^^^^^^^^
//│     │  - l.-138let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     │ 
//│     ◉ (?mulByDigit) is assumed here
//│     │  - l.-138let rec mulByDigit i l =
//│     │                  ^^^^^^^^^^
//│     ▼ 
//│     ◉ (_ -> ?b) is here
//│        - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                               ^^^^^^^^^^
//│   ◉ (?b) is assumed here
//│   │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│   │                                                         ^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c -> _) is here
//│      - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│                                                             ^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.4  let bigMul l1 l2 =
//│ │                    ^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.10   let args = l1 (tenEx 0 l2) in
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│ │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│                 ^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ * _`
//│ 
//│         (_ -> _) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ -> _) is here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                        ^^^^
//│ │            let add (l1,l2) = ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?e -> _ -> ?e) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?e -> _ -> ?e) is here
//│   ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│   │                               ^^^^^^^^^^^^^^
//│   │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│   │                                            ^
//│   │ 
//│   ◉ (?d -> _ -> ?c) is here
//│      - l.5    let f a x =
//│                     ^^^^^
//│                 let (x1,x2) = x in ...
//│                 ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?d) is assumed here
//│ │  - l.5    let f a x =
//│ │                 ^
//│ │  - l.7      let (carry,res) = a in
//│ │                               ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.7      let (carry,res) = a in
//│                   ^^^^^^^^^^^
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (?a) ---> (?b) ---> (?c) ~~~~ (?d) ~~~~ (?c) <--- (?b) <--- (?a) <--- (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                   ^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│    - l.6      let (x1,x2) = x in
//│               ^^^^^^^^^^^^^^^^^^
//│               let (carry,res) = a in ...
//│               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> _ -> ?c) is here
//│     │  - l.5    let f a x =
//│     │                 ^^^^^
//│     │             let (x1,x2) = x in ...
//│     │             ^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     ▼ 
//│     ◉ (?d -> _ -> ?d) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (?d -> _ -> ?d) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.11   let (carry,res) = List.fold_left f base args in [carry] @ res;;
//│     │                                            ^
//│     │ 
//│     ◉ (_ -> _ -> ?c) is here
//│        - l.5    let f a x =
//│                       ^^^^^
//│                   let (x1,x2) = x in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.6      let (x1,x2) = x in
//│ │             ^^^^^^^^^^^^^^^^^^
//│ │             let (carry,res) = a in ...
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.7      let (carry,res) = a in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^
//│ │             match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ -> _) is here
//│    - l.-803let bigAdd l1 l2 =
//│                          ^^^^
//│              let add (l1,l2) = ...
//│              ^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?f * _) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                   ^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-808  if diff < 0
//│                ^^^^^^^^^^^
//│                then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-801    let f a x = padZero l1 l2 in
//│       │                    ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-801    let f a x = padZero l1 l2 in
//│                            ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-807  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?f * _) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                   ^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-808  if diff < 0
//│                ^^^^^^^^^^^
//│                then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-801    let f a x = padZero l1 l2 in
//│       │                    ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                      ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                  ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-801    let f a x = padZero l1 l2 in
//│                            ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                       ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-809  let diff = (List.length l1) - (List.length l2) in
//│ │                                    ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?f * _) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                   ^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-808  if diff < 0
//│                ^^^^^^^^^^^
//│                then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-801    let f a x = padZero l1 l2 in
//│       │                    ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                      ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                  ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-801    let f a x = padZero l1 l2 in
//│                            ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                       ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │ 
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-800    let base = List.combine l1 l2 in
//│ │                                      ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                             ^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?f * _) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                   ^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-808  if diff < 0
//│                ^^^^^^^^^^^
//│                then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-801    let f a x = padZero l1 l2 in
//│       │                    ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                      ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                  ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-801    let f a x = padZero l1 l2 in
//│                            ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                       ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.-802  let add (l1,l2) =
//│                       ^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-802  let add (l1,l2) =
//│   │                    ^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (_ list * _) is here
//│      - l.-807  then (((clone 0 (-1 * diff)) @ l1), l2)
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ---> (?a) ---> (?b) ~~~~ (?c) ---> (?d) ~~~~ (?e) ~~~~ (?d) <--- (?c) ~~~~ (?b) ---> (_ list)
//│ 
//│ ◉ (_ * _) is here
//│ │  - l.8      match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.-803let bigAdd l1 l2 =
//│ │                     ^^
//│ │  - l.-797  removeZero (add (padZero l1 l2));;
//│ │                                     ^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?b * _ list) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?d) is assumed here
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?e * _) is here
//│      - l.-802  let add (l1,l2) =
//│                        ^^^^^^^
//│ ◉ (?e) is assumed here
//│ │  - l.-802  let add (l1,l2) =
//│ │                     ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ ▼ 
//│ ◉ (?f) is assumed here
//│    - l.-810let padZero l1 l2 =
//│                        ^^
//│   ◉ (?f * _) is here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                                                                   ^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?g) is assumed here
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?h) is assumed here
//│      - l.-808  if diff < 0
//│                ^^^^^^^^^^^
//│                then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (_ -> _ -> ?h) is here
//│       │  - l.-801    let f a x = padZero l1 l2 in
//│       │                    ^^^^^^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       ▼ 
//│       ◉ (?i -> _ -> ?i) is here
//│          - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                       ^^^^^^^^^^^^^^
//│   ◉ (?i) is assumed here
//│   │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?j * _) is here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                      ^^^^^^^
//│   ◉ (?j * _) is here
//│   ▲  - l.-798    let (_,res) = List.fold_left f base args in res in
//│   │                  ^^^^^^^
//│   │ 
//│   ◉ (?i) is assumed here
//│      - l.-798    let (_,res) = List.fold_left f base args in res in
//│                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│       ◉ (?i -> _ -> ?i) is here
//│       ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│       │                               ^^^^^^^^^^^^^^
//│       │  - l.-798    let (_,res) = List.fold_left f base args in res in
//│       │                                           ^
//│       │ 
//│       ◉ (_ -> _ -> ?h) is here
//│          - l.-801    let f a x = padZero l1 l2 in
//│                            ^^^^^^^^^^^^^^^^^^^
//│   ◉ (?h) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?g) is assumed here
//│   ▲  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?f * _) is here
//│      - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                                                       ^^^^^^^^
//│ ◉ (?f) is assumed here
//│ ▲  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-801    let f a x = padZero l1 l2 in
//│ │                                  ^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.-802  let add (l1,l2) =
//│                       ^^
//│   ◉ (?e * _) is here
//│   ▲  - l.-802  let add (l1,l2) =
//│   │                    ^^^^^^^
//│   │  - l.-797  removeZero (add (padZero l1 l2));;
//│   │                            ^^^^^^^^^^^^^^^
//│   │  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?d) is assumed here
//│   ▲  - l.-808  if diff < 0
//│   │            ^^^^^^^^^^^
//│   │            then (((clone 0 (-1 * diff)) @ l1), l2) ...
//│   │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│   │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?b * _ list) is here
//│      - l.-806  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
//│                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.-810let padZero l1 l2 =
//│ │                      ^^
//│ │  - l.-809  let diff = (List.length l1) - (List.length l2) in
//│ │                                    ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - lib. let List.length: 'a list -> int
//│                            ^^^^^^^
//│ helper: int -> int
//│ helper: int -> int
//│ tenEx: int -> list[int] -> (list[int] | list[nothing])
//│ tenEx: int -> list[int] -> list[int]
//│ bigMul: ((list[int] | list[nothing]) -> list[(nothing, nothing,)] & list[?]) -> list[int] -> list[int]
//│ bigMul: 'b -> list[int] -> list[int]
//│   where
//│     'c = list['a]
//│     'b = list[int] -> list[('d, list['a],)], list['a0]
//│ U max: 13, total: 266
//│ UERR 21 errors
//│ L: 3 [([α1763''], [[[α1616'']]],) ~ list[α1647''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: α1672'', [α1672'' - ([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],) - α1650'', L: 2 [([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],), ([[α1672'']], [[α1730'']],) <: α1742'', α1742'' <: α1744'', [α1744'' - (α1745'' -> [α1744'']) ~ (α1746'' -> α1735'') - α1735'', L: 1 [(α1745'' -> [α1744'']) ~ (α1746'' -> α1735''), [(α1745'' -> [α1744'']) - (α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')) - (α1746'' -> α1735''), L: 0 [(α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')), (α1743'' -> (α1745'' -> [α1744''])) <: (α1735'' -> (α1746'' -> α1735''))]]]], α1735'' <: ([α1650''], [α1729''],)]], [α1650'' - ([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],) - α1672'', L: 2 [([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],), ([α1650''], [α1729''],) :> α1735'', [α1735'' - (α1746'' -> α1735'') ~ (α1745'' -> [α1744'']) - α1744'', L: 1 [(α1746'' -> α1735'') ~ (α1745'' -> [α1744'']), [(α1746'' -> α1735'') - (α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])) - (α1745'' -> [α1744'']), L: 0 [(α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])), (α1735'' -> (α1746'' -> α1735'')) :> (α1743'' -> (α1745'' -> [α1744'']))]]]], α1744'' :> α1742'', α1742'' :> ([[α1672'']], [[α1730'']],)]], α1672'' :> α1648'', α1648'' <: list[α1647'']]
//│ L: 1 [([α1763''], [[[α1616'']]],) ~ list[α1651''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: α1672'', [α1672'' - ([[α1672'']], [[α1730'']],) ~ ([[list[α1651'']]], [[α1730'']],) - list[α1651''], L: 0 [([[α1672'']], [[α1730'']],) ~ ([[list[α1651'']]], [[α1730'']],), ([[α1672'']], [[α1730'']],) <: α1742'', α1742'' <: α1744'', α1744'' :> ([[list[α1651'']]], [[α1730'']],)]]]
//│ L: 0 [(α1726'' -> α1727'') ~ list['a1619''], (α1726'' -> α1727'') <: α1617'', α1617'' :> list['a1619'']]
//│ L: 3 [([α1763''], [[[α1616'']]],) ~ list[α1645''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: α1672'', [α1672'' - ([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],) - α1650'', L: 2 [([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],), ([[α1672'']], [[α1730'']],) <: α1742'', α1742'' <: α1744'', [α1744'' - (α1745'' -> [α1744'']) ~ (α1746'' -> α1735'') - α1735'', L: 1 [(α1745'' -> [α1744'']) ~ (α1746'' -> α1735''), [(α1745'' -> [α1744'']) - (α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')) - (α1746'' -> α1735''), L: 0 [(α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')), (α1743'' -> (α1745'' -> [α1744''])) <: (α1735'' -> (α1746'' -> α1735''))]]]], α1735'' <: ([α1650''], [α1729''],)]], [α1650'' - ([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],) - α1672'', L: 2 [([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],), ([α1650''], [α1729''],) :> α1735'', [α1735'' - (α1746'' -> α1735'') ~ (α1745'' -> [α1744'']) - α1744'', L: 1 [(α1746'' -> α1735'') ~ (α1745'' -> [α1744'']), [(α1746'' -> α1735'') - (α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])) - (α1745'' -> [α1744'']), L: 0 [(α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])), (α1735'' -> (α1746'' -> α1735'')) :> (α1743'' -> (α1745'' -> [α1744'']))]]]], α1744'' :> α1742'', α1742'' :> ([[α1672'']], [[α1730'']],)]], α1672'' <: list[α1645'']]
//│ L: 2 [(α1824' -> α1825') ~ ([α1802'], [α1803'],), (α1824' -> α1825') <: α1823', α1823' <: α1822', α1822' <: α1821', [α1821' - (α1804' -> α1821') ~ (α1800' -> α1799') - α1799', L: 1 [(α1804' -> α1821') ~ (α1800' -> α1799'), [(α1804' -> α1821') - (α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')) - (α1800' -> α1799'), L: 0 [(α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')), (α1801' -> (α1804' -> α1821')) <: (α1799' -> (α1800' -> α1799'))]]]], [α1799' - (α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')) - α1801', L: 0 [(α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')), (α1799' -> (α1800' -> α1799')) :> (α1801' -> (α1804' -> α1821'))]], α1801' <: ([α1802'], [α1803'],)]
//│ L: 0 [([α1763''], [[[α1616'']]],) ~ list[α1673''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', α1649'' <: list[α1673'']]
//│ L: 2 [([int], [[list['a1953']]],) ~ (α1824' -> α1825'), ([int], [[list['a1953']]],) <: α1799', [α1799' - (α1800' -> α1799') ~ (α1804' -> α1821') - α1821', L: 1 [(α1800' -> α1799') ~ (α1804' -> α1821'), [(α1800' -> α1799') - (α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')) - (α1804' -> α1821'), L: 0 [(α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')), (α1799' -> (α1800' -> α1799')) :> (α1801' -> (α1804' -> α1821'))]]]], α1821' :> α1822', α1822' :> α1823', α1823' :> (α1824' -> α1825')]
//│ L: 0 [([α1763''], [[[α1616'']]],) ~ list[α1622''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', α1649'' <: list[α1622'']]
//│ L: 2 [list['a1750'] ~ (α1788' -> α1791'), [list['a1750'] - ([list['a1750']] -> α1758'') ~ ([α1604'] -> α1763'') - α1604', L: 1 [([list['a1750']] -> α1758'') ~ ([α1604'] -> α1763''), ([list['a1750']] -> α1758'') :> α1759'', [α1759'' - ([α1748''] -> α1759'') ~ (['a1618''] -> α1761'') - α1761'', L: 0 [([α1748''] -> α1759'') ~ (['a1618''] -> α1761''), ([α1748''] -> α1759'') :> mulByDigit1747'', mulByDigit1747'' <: (['a1618''] -> α1761'')]], α1761'' <: ([α1604'] -> α1763'')]], α1604' <: (α1788' -> α1791')]
//│ L: 3 [([α1763''], [[[α1616'']]],) ~ list[α1651''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: α1672'', [α1672'' - ([[α1672'']], [[α1730'']],) ~ ([[list[α1651'']]], [[α1730'']],) - list[α1651''], L: 2 [([[α1672'']], [[α1730'']],) ~ ([[list[α1651'']]], [[α1730'']],), ([[α1672'']], [[α1730'']],) <: α1742'', α1742'' <: α1744'', [α1744'' - (α1745'' -> [α1744'']) ~ (α1746'' -> α1735'') - α1735'', L: 1 [(α1745'' -> [α1744'']) ~ (α1746'' -> α1735''), [(α1745'' -> [α1744'']) - (α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')) - (α1746'' -> α1735''), L: 0 [(α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')), (α1743'' -> (α1745'' -> [α1744''])) <: (α1735'' -> (α1746'' -> α1735''))]]]], [α1735'' - (α1746'' -> α1735'') ~ (α1745'' -> [α1744'']) - α1744'', L: 1 [(α1746'' -> α1735'') ~ (α1745'' -> [α1744'']), [(α1746'' -> α1735'') - (α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])) - (α1745'' -> [α1744'']), L: 0 [(α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])), (α1735'' -> (α1746'' -> α1735'')) :> (α1743'' -> (α1745'' -> [α1744'']))]]]], α1744'' :> ([[list[α1651'']]], [[α1730'']],)]]]
//│ L: 2 [list['a1951'] ~ ([α1957'], [α1958'],), list['a1951'] <: α1823', α1823' <: α1822', α1822' <: α1821', [α1821' - (α1804' -> α1821') ~ (α1800' -> α1799') - α1799', L: 1 [(α1804' -> α1821') ~ (α1800' -> α1799'), [(α1804' -> α1821') - (α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')) - (α1800' -> α1799'), L: 0 [(α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')), (α1801' -> (α1804' -> α1821')) <: (α1799' -> (α1800' -> α1799'))]]]], α1799' <: ([α1957'], [α1958'],)]
//│ L: 1 [([α1763''], [[[α1616'']]],) ~ list[α1673''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], [α1648'' - ([α1648''], [α1731''],) ~ ([[α1649'']], [[list[α1675'']]],) - α1649'', L: 0 [([α1648''], [α1731''],) ~ ([[α1649'']], [[list[α1675'']]],), ([α1648''], [α1731''],) :> α1737'', α1737'' :> α1738'', α1738'' :> ([[α1649'']], [[list[α1675'']]],)]], α1649'' <: list[α1673'']]
//│ L: 2 [([int], [[list['a1953']]],) ~ list['a1951'], ([int], [[list['a1953']]],) <: α1799', [α1799' - (α1800' -> α1799') ~ (α1804' -> α1821') - α1821', L: 1 [(α1800' -> α1799') ~ (α1804' -> α1821'), [(α1800' -> α1799') - (α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')) - (α1804' -> α1821'), L: 0 [(α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')), (α1799' -> (α1800' -> α1799')) :> (α1801' -> (α1804' -> α1821'))]]]], α1821' :> α1822', α1822' :> α1823', α1823' :> list['a1951']]
//│ L: 1 [([α1763''], [[[α1616'']]],) ~ list[α1622''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], [α1648'' - ([α1648''], [α1731''],) ~ ([[list[α1622'']]], [[α1725'']],) - list[α1622''], L: 0 [([α1648''], [α1731''],) ~ ([[list[α1622'']]], [[α1725'']],), ([α1648''], [α1731''],) :> α1737'', α1737'' :> ([[list[α1622'']]], [[α1725'']],)]]]
//│ L: 2 [list['a1951'] ~ ([α1802'], [α1803'],), list['a1951'] <: α1823', α1823' <: α1822', α1822' <: α1821', [α1821' - (α1804' -> α1821') ~ (α1800' -> α1799') - α1799', L: 1 [(α1804' -> α1821') ~ (α1800' -> α1799'), [(α1804' -> α1821') - (α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')) - (α1800' -> α1799'), L: 0 [(α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')), (α1801' -> (α1804' -> α1821')) <: (α1799' -> (α1800' -> α1799'))]]]], [α1799' - (α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')) - α1801', L: 0 [(α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')), (α1799' -> (α1800' -> α1799')) :> (α1801' -> (α1804' -> α1821'))]], α1801' <: ([α1802'], [α1803'],)]
//│ L: 3 [([α1763''], [[[α1616'']]],) ~ list[α1622''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: α1672'', [α1672'' - ([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],) - α1650'', L: 2 [([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],), ([[α1672'']], [[α1730'']],) <: α1742'', α1742'' <: α1744'', [α1744'' - (α1745'' -> [α1744'']) ~ (α1746'' -> α1735'') - α1735'', L: 1 [(α1745'' -> [α1744'']) ~ (α1746'' -> α1735''), [(α1745'' -> [α1744'']) - (α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')) - (α1746'' -> α1735''), L: 0 [(α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')), (α1743'' -> (α1745'' -> [α1744''])) <: (α1735'' -> (α1746'' -> α1735''))]]]], α1735'' <: ([α1650''], [α1729''],)]], [α1650'' - ([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],) - α1672'', L: 2 [([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],), ([α1650''], [α1729''],) :> α1735'', [α1735'' - (α1746'' -> α1735'') ~ (α1745'' -> [α1744'']) - α1744'', L: 1 [(α1746'' -> α1735'') ~ (α1745'' -> [α1744'']), [(α1746'' -> α1735'') - (α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])) - (α1745'' -> [α1744'']), L: 0 [(α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])), (α1735'' -> (α1746'' -> α1735'')) :> (α1743'' -> (α1745'' -> [α1744'']))]]]], α1744'' :> α1742'', α1742'' :> ([[α1672'']], [[α1730'']],)]], α1672'' :> α1648'', [α1648'' - ([α1648''], [α1731''],) ~ ([[list[α1622'']]], [[α1725'']],) - list[α1622''], L: 0 [([α1648''], [α1731''],) ~ ([[list[α1622'']]], [[α1725'']],), ([α1648''], [α1731''],) :> α1737'', α1737'' :> ([[list[α1622'']]], [[α1725'']],)]]]
//│ L: 3 [([α1763''], [[[α1616'']]],) ~ list[α1673''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: α1672'', [α1672'' - ([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],) - α1650'', L: 2 [([[α1672'']], [[α1730'']],) ~ ([α1650''], [α1729''],), ([[α1672'']], [[α1730'']],) <: α1742'', α1742'' <: α1744'', [α1744'' - (α1745'' -> [α1744'']) ~ (α1746'' -> α1735'') - α1735'', L: 1 [(α1745'' -> [α1744'']) ~ (α1746'' -> α1735''), [(α1745'' -> [α1744'']) - (α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')) - (α1746'' -> α1735''), L: 0 [(α1743'' -> (α1745'' -> [α1744''])) ~ (α1735'' -> (α1746'' -> α1735'')), (α1743'' -> (α1745'' -> [α1744''])) <: (α1735'' -> (α1746'' -> α1735''))]]]], α1735'' <: ([α1650''], [α1729''],)]], [α1650'' - ([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],) - α1672'', L: 2 [([α1650''], [α1729''],) ~ ([[α1672'']], [[α1730'']],), ([α1650''], [α1729''],) :> α1735'', [α1735'' - (α1746'' -> α1735'') ~ (α1745'' -> [α1744'']) - α1744'', L: 1 [(α1746'' -> α1735'') ~ (α1745'' -> [α1744'']), [(α1746'' -> α1735'') - (α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])) - (α1745'' -> [α1744'']), L: 0 [(α1735'' -> (α1746'' -> α1735'')) ~ (α1743'' -> (α1745'' -> [α1744''])), (α1735'' -> (α1746'' -> α1735'')) :> (α1743'' -> (α1745'' -> [α1744'']))]]]], α1744'' :> α1742'', α1742'' :> ([[α1672'']], [[α1730'']],)]], α1672'' :> α1648'', [α1648'' - ([α1648''], [α1731''],) ~ ([[α1649'']], [[list[α1675'']]],) - α1649'', L: 0 [([α1648''], [α1731''],) ~ ([[α1649'']], [[list[α1675'']]],), ([α1648''], [α1731''],) :> α1737'', α1737'' :> α1738'', α1738'' :> ([[α1649'']], [[list[α1675'']]],)]], α1649'' <: list[α1673'']]
//│ L: 1 [([α1763''], [[[α1616'']]],) ~ list[α1645''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: α1672'', α1672'' <: list[α1645'']]
//│ L: 1 [([α1763''], [[[α1616'']]],) ~ list[α1647''], ([α1763''], [[[α1616'']]],) <: α1620'', α1620'' <: α1649'', [α1649'' - ([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],) - α1648'', L: 0 [([[α1649'']], [[list[α1675'']]],) ~ ([α1648''], [α1731''],), ([[α1649'']], [[list[α1675'']]],) <: α1738'', α1738'' <: α1737'', α1737'' <: ([α1648''], [α1731''],)]], α1648'' <: list[α1647'']]
//│ L: 2 [list['a1951'] ~ (α1824' -> α1825'), list['a1951'] <: α1823', α1823' <: α1822', α1822' <: α1821', [α1821' - (α1804' -> α1821') ~ (α1800' -> α1799') - α1799', L: 1 [(α1804' -> α1821') ~ (α1800' -> α1799'), [(α1804' -> α1821') - (α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')) - (α1800' -> α1799'), L: 0 [(α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')), (α1801' -> (α1804' -> α1821')) <: (α1799' -> (α1800' -> α1799'))]]]], [α1799' - (α1800' -> α1799') ~ (α1804' -> α1821') - α1821', L: 1 [(α1800' -> α1799') ~ (α1804' -> α1821'), [(α1800' -> α1799') - (α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')) - (α1804' -> α1821'), L: 0 [(α1799' -> (α1800' -> α1799')) ~ (α1801' -> (α1804' -> α1821')), (α1799' -> (α1800' -> α1799')) :> (α1801' -> (α1804' -> α1821'))]]]], α1821' :> α1822', α1822' :> α1823', α1823' :> (α1824' -> α1825')]
//│ L: 2 [(α1824' -> α1825') ~ ([α1957'], [α1958'],), (α1824' -> α1825') <: α1823', α1823' <: α1822', α1822' <: α1821', [α1821' - (α1804' -> α1821') ~ (α1800' -> α1799') - α1799', L: 1 [(α1804' -> α1821') ~ (α1800' -> α1799'), [(α1804' -> α1821') - (α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')) - (α1800' -> α1799'), L: 0 [(α1801' -> (α1804' -> α1821')) ~ (α1799' -> (α1800' -> α1799')), (α1801' -> (α1804' -> α1821')) <: (α1799' -> (α1800' -> α1799'))]]]], α1799' <: ([α1957'], [α1958'],)]

// file 335
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ [ERROR] Type `_ -> _` does not match `_ * bool`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) <--- (?c) <--- (_ * bool)
//│ 
//│ ◉ (_ -> _) is here
//│ ▲  - l.4    match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                 ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.3  let rec wwhile (f,b) =
//│                           ^
//│     ◉ ((?a * _) -> _) is here
//│     ▲  - l.4    match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│     │                                                       ^^^^^^
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     │ 
//│     ◉ (?wwhile) is assumed here
//│     │  - l.3  let rec wwhile (f,b) =
//│     │                 ^^^^^^
//│     ▼ 
//│     ◉ ((?b * _) -> _) is here
//│        - l.5  let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│                                    ^^^^^^
//│ ◉ (?b) is assumed here
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ │                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ * bool) is here
//│    - l.2    match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│                                                       ^^^^^^^^^^^
//│ fixpointHelper: ('a, nothing,) -> ('a, bool,)
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: (nothing, ?,) -> 'a
//│ wwhile: ('a -> ('b, bool,), 'b,) -> 'c
//│ fixpoint: (nothing, nothing,) -> nothing
//│ fixpoint: ('a, 'b,) -> 'b
//│ U max: 7, total: 35
//│ UERR 1 errors
//│ L: 2 [([α2041'] -> α2046') ~ ([[[α2049']]], [[bool]],), ([α2041'] -> α2046') :> α2040', [α2040' - ([[α2040']], [[[α2042']]],) ~ ([[α2051']], [[α2038']],) - α2051', L: 1 [([[α2040']], [[[α2042']]],) ~ ([[α2051']], [[α2038']],), [([[α2040']], [[[α2042']]],) - (([[α2040']], [[[α2042']]],) -> α2045') ~ (([[α2051']], [[α2038']],) -> α2055') - ([[α2051']], [[α2038']],), L: 0 [(([[α2040']], [[[α2042']]],) -> α2045') ~ (([[α2051']], [[α2038']],) -> α2055'), (([[α2040']], [[[α2042']]],) -> α2045') :> wwhile2039', wwhile2039' <: (([[α2051']], [[α2038']],) -> α2055')]]]], α2051' :> α2052', α2052' :> ([[[α2049']]], [[bool]],)]

// FIXME: no common provs
// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed here
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~~ (?a) ~~~~ (?b) ~~~~ (?c) ---> (?d) <--- (_ list)
//│ 
//│   ◉ ((_ * _) list) is here
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?a list) is here
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│   ◉ (?a list) is here
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.25     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.26     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?b list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (_ -> ?b -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?c -> _) is here
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.16       if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.16       if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) is here
//│    - l.16       if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ~~~~ (?c) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.16       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.16       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?b) is assumed here
//│    - l.14     let f a x =
//│                       ^
//│     ◉ (_ -> ?b -> _) is here
//│     │  - l.14     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│     ◉ (_ -> ?c -> _) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.26     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?b -> _) is here
//│        - l.14     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.14     let f a x =
//│ │                     ^
//│ │  - l.19         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.19         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ clone: 'a -> int -> list['a]
//│ padZero: (list['a] & list[?]) -> (list['b] & list[?]) -> (list['a] | ?, ? | list['b],)
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: ('b & 'c & list[int & 'a]) -> 'b
//│   where
//│     'b :> list[nothing] | list['a] | 'c
//│        <: 'c
//│     'c :> 'b | list[nothing] | list['a]
//│        <: 'b
//│ removeZero: list[int] -> list[int]
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> (list[int] | list[nothing])
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 22, total: 446
//│ UERR 3 errors
//│ L: 0 [list['a2217'''] ~ ([α2223'''], [α2224'''],), list['a2217'''] <: α2215''', α2215''' :> α2211''', α2211''' <: ([α2223'''], [α2224'''],)]
//│ L: 2 [([α2237''], [α2238''],) ~ list['a2255''], [([α2237''], [α2238''],) - list[([α2237''], [α2238''],)] ~ list[α2262''] - α2262'', L: 0 [list[([α2237''], [α2238''],)] ~ list[α2262''], list[([α2237''], [α2238''],)] <: list[α2262'']]], [α2262'' - list[α2262''] ~ list[α2245''] - α2245'', L: 0 [list[α2262''] ~ list[α2245''], list[α2262''] <: list[α2245'']]], [α2245'' - (α2245'' -> α2244'') ~ (α2251'' -> α2256'') - α2251'', L: 1 [(α2245'' -> α2244'') ~ (α2251'' -> α2256''), [(α2245'' -> α2244'') - (α2244'' -> (α2245'' -> α2244'')) ~ (α2246'' -> (α2251'' -> α2256'')) - (α2251'' -> α2256''), L: 0 [(α2244'' -> (α2245'' -> α2244'')) ~ (α2246'' -> (α2251'' -> α2256'')), (α2244'' -> (α2245'' -> α2244'')) :> (α2246'' -> (α2251'' -> α2256''))]]]], α2251'' <: α2254'', α2254'' :> list['a2255'']]
//│ L: 2 [list['a2255''] ~ ([α2252''], [α2253''],), list['a2255''] <: α2254'', α2254'' :> α2251'', [α2251'' - (α2251'' -> α2256'') ~ (α2245'' -> α2244'') - α2245'', L: 1 [(α2251'' -> α2256'') ~ (α2245'' -> α2244''), [(α2251'' -> α2256'') - (α2246'' -> (α2251'' -> α2256'')) ~ (α2244'' -> (α2245'' -> α2244'')) - (α2245'' -> α2244''), L: 0 [(α2246'' -> (α2251'' -> α2256'')) ~ (α2244'' -> (α2245'' -> α2244'')), (α2246'' -> (α2251'' -> α2256'')) <: (α2244'' -> (α2245'' -> α2244''))]]]], [α2245'' - (α2245'' -> α2244'') ~ (α2251'' -> α2256'') - α2251'', L: 1 [(α2245'' -> α2244'') ~ (α2251'' -> α2256''), [(α2245'' -> α2244'') - (α2244'' -> (α2245'' -> α2244'')) ~ (α2246'' -> (α2251'' -> α2256'')) - (α2251'' -> α2256''), L: 0 [(α2244'' -> (α2245'' -> α2244'')) ~ (α2246'' -> (α2251'' -> α2256'')), (α2244'' -> (α2245'' -> α2244'')) :> (α2246'' -> (α2251'' -> α2256''))]]]], α2251'' <: ([α2252''], [α2253''],)]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List.length l1) > (List.length l2)
  then (l1, ((clone 0 ((List.length l1) - (List.length l2))) @ l2))
  else
    if (List.length l1) < (List.length l2)
    then (((clone 0 ((List.length l2) - (List.length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List.map addTuple (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ---> (?a) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ │  - l.15     let base = 0 in
//│ │                        ^
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) <--- (?a) ~~~~ (?b) ---> (_ * _)
//│ 
//│ ◉ (int) is here
//│ ▲  - lib. let (+): int -> int -> int
//│ │                  ^^^
//│ │  - l.14     let f a x = (a + x) mod 10 in
//│ │                          ^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.14     let f a x = (a + x) mod 10 in
//│                     ^
//│   ◉ (?a -> _ -> int) is here
//│   │  - l.14     let f a x = (a + x) mod 10 in
//│   │                   ^^^^^^^^^^^^^^^^^^^^
//│   │  - l.17     let (_,res) = List.fold_left f base args in res in
//│   │                                          ^
//│   ▼ 
//│   ◉ (?b -> _ -> ?b) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                   ^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ [ERROR] Type `int` does not match `_ * _`
//│ 
//│         (int) ~~~~ (?a) ---> (_ * _)
//│ 
//│     ◉ (_ -> _ -> int) is here
//│     │  - l.14     let f a x = (a + x) mod 10 in
//│     │                   ^^^^^^^^^^^^^^^^^^^^
//│     │  - l.17     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (?a -> _ -> ?a) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.17     let (_,res) = List.fold_left f base args in res in
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ * _) is here
//│    - l.17     let (_,res) = List.fold_left f base args in res in
//│                   ^^^^^^^
//│ clone: 'a -> int -> (list['a] | list[nothing])
//│ clone: 'a -> int -> list['a]
//│ addTuple: (nothing, nothing,) -> int
//│ addTuple: (int, int,) -> int
//│ padZero: (list['a] & list[?]) -> (list[?] & list['b]) -> (? | list['a], ? | list['b],)
//│ padZero: list[int] -> list[int] -> (list[int], list[int],)
//│ removeZero: list['a] -> (list[nothing] | list['a])
//│ removeZero: list[int] -> list[int]
//│ bigAdd: (list[int] & list[?]) -> (list[int] & list[?]) -> list[nothing]
//│ bigAdd: list[int] -> list[int] -> list[int]
//│ U max: 64, total: 475
//│ UERR 3 errors
//│ L: 2 [int ~ ([α2558''], [α2559''],), [int - (α2551'' -> [int]) ~ (α2549'' -> α2548'') - α2548'', L: 1 [(α2551'' -> [int]) ~ (α2549'' -> α2548''), [(α2551'' -> [int]) - (α2550'' -> (α2551'' -> [int])) ~ (α2548'' -> (α2549'' -> α2548'')) - (α2549'' -> α2548''), L: 0 [(α2550'' -> (α2551'' -> [int])) ~ (α2548'' -> (α2549'' -> α2548'')), (α2550'' -> (α2551'' -> [int])) <: (α2548'' -> (α2549'' -> α2548''))]]]], α2548'' <: ([α2558''], [α2559''],)]
//│ L: 1 [int ~ ([α2558''], [α2559''],), int :> α2550'', [α2550'' - (α2550'' -> (α2551'' -> [int])) ~ (α2548'' -> (α2549'' -> α2548'')) - α2548'', L: 0 [(α2550'' -> (α2551'' -> [int])) ~ (α2548'' -> (α2549'' -> α2548'')), (α2550'' -> (α2551'' -> [int])) <: (α2548'' -> (α2549'' -> α2548''))]], α2548'' <: ([α2558''], [α2559''],)]
//│ L: 0 [int ~ ([α2558''], [α2559''],), int <: α2548'', α2548'' <: ([α2558''], [α2559''],)]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ [ERROR] Type `_ * _` does not match `_ -> (_ * bool)`
//│ 
//│         (_ * _) <--- (?a) ~~~~ (_ -> (_ * bool))
//│ 
//│ ◉ (_ * _) is here
//│ ▲  - l.-317  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ │                             ^^^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.-317  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│                    ^^^
//│   ◉ (_ -> ?a) is here
//│   ▲  - l.-317  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│   │                  ^
//│   │ 
//│   ◉ (?b) is assumed here
//│      - l.-318let rec wwhile (f,b) =
//│                              ^
//│       ◉ ((?b * _) -> _) is here
//│       ▲  - l.-317  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│       │                                                        ^^^^^^
//│       │  - l.-318let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       │ 
//│       ◉ (?wwhile) is assumed here
//│       │  - l.-318let rec wwhile (f,b) =
//│       │                  ^^^^^^
//│       ▼ 
//│       ◉ ((_ -> _ -> (_ * bool) * _) -> _) is here
//│          - l.2  let fixpoint (f,b) = wwhile (intboolf, b);;
//│                                      ^^^^^^
//│ intboolf: ('a -> 'b) -> 'a -> ('b, bool,)
//│ intboolf: ('a -> int) -> 'a -> (int, bool,)
//│ fixpoint: (nothing, nothing,) -> nothing
//│ fixpoint: ('a, 'b,) -> 'b
//│ wwhile: (nothing, ?,) -> 'a
//│ wwhile: ('a -> ('b, bool,), 'b,) -> 'c
//│ U max: 6, total: 41
//│ UERR 1 errors
//│ L: 3 [([α2681'], [α2686'],) ~ (α2688' -> ([α2691'], [[bool]],)), ([α2681'], [α2686'],) :> α2685', [α2685' - ([α2680'] -> α2685') ~ (α2687' -> (α2688' -> ([α2691'], [[bool]],))) - (α2688' -> ([α2691'], [[bool]],)), L: 2 [([α2680'] -> α2685') ~ (α2687' -> (α2688' -> ([α2691'], [[bool]],))), ([α2680'] -> α2685') :> α2679', [α2679' - ([[α2679']], [[[α2681']]],) ~ ([[(α2687' -> (α2688' -> ([α2691'], [[bool]],)))]], [[α2677']],) - (α2687' -> (α2688' -> ([α2691'], [[bool]],))), L: 1 [([[α2679']], [[[α2681']]],) ~ ([[(α2687' -> (α2688' -> ([α2691'], [[bool]],)))]], [[α2677']],), [([[α2679']], [[[α2681']]],) - (([[α2679']], [[[α2681']]],) -> α2684') ~ (([[(α2687' -> (α2688' -> ([α2691'], [[bool]],)))]], [[α2677']],) -> α2693') - ([[(α2687' -> (α2688' -> ([α2691'], [[bool]],)))]], [[α2677']],), L: 0 [(([[α2679']], [[[α2681']]],) -> α2684') ~ (([[(α2687' -> (α2688' -> ([α2691'], [[bool]],)))]], [[α2677']],) -> α2693'), (([[α2679']], [[[α2681']]],) -> α2684') :> wwhile2678', wwhile2678' <: (([[(α2687' -> (α2688' -> ([α2691'], [[bool]],)))]], [[α2677']],) -> α2693')]]]]]]]



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List.fold_left f base fs;;
//│ identity: 'a -> 'a
//│ identity: 'a -> 'a
//│ pipe: list['a & 'b & 'c & 'd & 'e] -> 'a
//│   where
//│     'a :> 'e | 'd | ('a & 'b & 'c & 'd) -> ('e | 'd) | 'c
//│        <: 'b
//│     'b <: 'e -> 'c
//│     'c :> 'e | 'd
//│        <: 'b & 'a
//│ pipe: list['a] -> 'b
//│   where
//│     'b = 'b -> 'b, ('c -> 'c) -> 'c -> 'c
//│     'a = 'a -> 'a, ('c -> 'c) -> 'c -> 'c
//│     'c = 'c -> 'c



// file 830
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ [ERROR] Type `int` does not match `_ -> _`
//│ 
//│         (int) <--- (?a) ~~~~ (?b) ---> (_ -> _)
//│ 
//│ ◉ (int) is here
//│ ▲  - lib. let (+): int -> int -> int
//│ │                         ^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│                                                                      ^^^^^^^^^^^
//│   ◉ (_ list -> ?a) is here
//│   ▲  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                                                                     ^^^^^^^
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   │ 
//│   ◉ (?sumList) is assumed here
//│   │  - l.7  let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
//│   │                 ^^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?b) is here
//│      - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                   ^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ │                                               ^^^^^^^^^^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.13      | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│                                                 ^^^^^^^^^^
//│ modulus: int -> int
//│ modulus: int -> int
//│ digitsOfInt: int -> (list[int] | list[nothing])
//│ digitsOfInt: int -> list[int]
//│ lt10: anything -> bool
//│ lt10: int -> bool
//│ sumList: list[int] -> int
//│ sumList: list[int] -> int
//│ additivePersistence: (int & 'a) -> 'a
//│ additivePersistence: 'additivePersistence
//│ U max: 5, total: 91
//│ UERR 1 errors
//│ L: 1 [int ~ ([additivePersistence2833'] -> α2873'), int :> α2857', [α2857' - ([list['a2855']] -> α2857') ~ ([α2858'] -> α2871') - α2871', L: 0 [([list['a2855']] -> α2857') ~ ([α2858'] -> α2871'), ([list['a2855']] -> α2857') :> sumList2853', sumList2853' <: ([α2858'] -> α2871')]], α2871' <: ([additivePersistence2833'] -> α2873')]


// FIXME investigate
// file 1770 (TODO fix nested flows)
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List.rev (helper ([], l));;
//│ [ERROR] Type `_ list` does not match `_ -> _`
//│ 
//│         (_ list) ---> (_ -> _)
//│ 
//│ ◉ (_ list) is here
//│ │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ │                                           ^
//│ ▼ 
//│ ◉ (_ -> _) is here
//│    - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                             ^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                   ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                     ^^^^^^^^
//│   ◉ (_ list -> ?a) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) is here
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│   ◉ (_ list -> ?b) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│   ◉ (_ * ?c) is here
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ -> _` does not match `_ list`
//│ 
//│         (_ -> _) <--- (?a) ~~~~ (?b) ~~~~ (?a) ~~~~ (?c) ~~~~ (_ list)
//│ 
//│ ◉ (_ -> _) is here
//│ ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ │                                                         ^^^^^^^^
//│ │ 
//│ ◉ (?a) is assumed here
//│    - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                           ^^^^^^^^
//│   ◉ (_ list -> ?a) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?b) is here
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                       ^^^^^^
//│   ◉ (_ list -> ?b) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                   ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ list -> ?a) is here
//│      - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│                                                             ^^^^^^
//│   ◉ (_ list -> ?a) is here
//│   ▲  - l.4    | h::t -> if a = h then filter t a else h :: (filter t a);;
//│   │                                                         ^^^^^^
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?filter) is assumed here
//│   │  - l.1  let rec filter l a =
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (_ -> ?c) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                       ^^^^^^
//│   ◉ (_ * ?c) is here
//│   │  - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│   │                             ^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (_ * _ list) is here
//│      - l.11         let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│                                 ^^^^^^^^^^^^^^^^^^^
//│ filter: list['a] -> anything -> (list[nothing] | list['a])
//│ filter: list['a] -> 'b -> list['b]
//│ removeDuplicates: list[list['a]] -> list['a]
//│ removeDuplicates: list[list['a]] -> list['b]
//│ U max: 8, total: 123
//│ UERR 3 errors
//│ L: 0 [list['a2927''] ~ (['a2927''] -> α2943'''), list['a2927''] <: (['a2927''] -> α2943''')]
//│ L: 1 [([α2938'''] -> α2934''') ~ list['a2928''], ([α2938'''] -> α2934''') :> α2940''', [α2940''' - ([list['a2931''']] -> α2940''') ~ ([list['a2931''']] -> α2941''') - α2941''', L: 0 [([list['a2931''']] -> α2940''') ~ ([list['a2931''']] -> α2941'''), ([list['a2931''']] -> α2940''') :> filter2929''', filter2929''' <: ([list['a2931''']] -> α2941''')]], [α2941''' - ([list['a2931''']] -> α2941''') ~ ([list['a2931''']] -> α2940''') - α2940''', L: 0 [([list['a2931''']] -> α2941''') ~ ([list['a2931''']] -> α2940'''), ([list['a2931''']] -> α2941''') :> filter2929''', filter2929''' <: ([list['a2931''']] -> α2940''')]], [α2940''' - ([list['a2931''']] -> α2940''') ~ (α2943''' -> α2945''') - α2945''', L: 0 [([list['a2931''']] -> α2940''') ~ (α2943''' -> α2945'''), ([list['a2931''']] -> α2940''') :> filter2929''', filter2929''' <: (α2943''' -> α2945''')]], [α2945''' - ([['a2927'']], [α2945'''],) ~ ('a2928'', list['a2928''],) - list['a2928''], L: 0 [([['a2927'']], [α2945'''],) ~ ('a2928'', list['a2928''],), ([['a2927'']], [α2945'''],) <: ('a2928'', list['a2928''],)]]]
//│ L: 1 [([α2938'''] -> α2937''') ~ list['a2928''], ([α2938'''] -> α2937''') :> α2941''', [α2941''' - ([list['a2931''']] -> α2941''') ~ ([list['a2931''']] -> α2940''') - α2940''', L: 0 [([list['a2931''']] -> α2941''') ~ ([list['a2931''']] -> α2940'''), ([list['a2931''']] -> α2941''') :> filter2929''', filter2929''' <: ([list['a2931''']] -> α2940''')]], [α2940''' - ([list['a2931''']] -> α2940''') ~ (α2943''' -> α2945''') - α2945''', L: 0 [([list['a2931''']] -> α2940''') ~ (α2943''' -> α2945'''), ([list['a2931''']] -> α2940''') :> filter2929''', filter2929''' <: (α2943''' -> α2945''')]], [α2945''' - ([['a2927'']], [α2945'''],) ~ ('a2928'', list['a2928''],) - list['a2928''], L: 0 [([['a2927'']], [α2945'''],) ~ ('a2928'', list['a2928''],), ([['a2927'']], [α2945'''],) <: ('a2928'', list['a2928''],)]]]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> anything & 'b) -> 'a -> ('b, bool,)
//│ fu: ('a -> 'b) -> 'a -> ('a -> 'b, bool,)
//│ wwhile: (nothing, ?,) -> 'a
//│ wwhile: ('a -> ('b, bool,), 'b,) -> 'c
//│ fixpoint: (nothing, nothing,) -> 'a
//│ fixpoint: ('a, 'b,) -> 'b

// file 2338
:unify
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ assoc: ('a, 'b, nothing,) -> 'c
//│   where
//│     'a <: 'd & ('a, 'b, nothing,) & 'c
//│     'd <: 'b -> list[nothing] -> 'e
//│     'e <: 'd & 'c & 'f & 'g
//│     'c :> 'f | 'g | 'e | 'a
//│        <: 'd
//│     'f :> 'g | 'e
//│        <: 'd & 'c
//│     'g :> 'e
//│        <: 'd & 'c & 'f
//│ assoc: 'b -> 'c -> list[('d, 'a -> 'e,)] -> 'f
//│   where
//│     'g = 'c -> list[('d, 'a -> 'e,)] -> 'f
//│     'h = list[('d, 'a -> 'e,)] -> 'f
//│     'i = 'a -> 'e
//│     'a = ('d, 'a -> 'e,)
