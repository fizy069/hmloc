:OcamlParser
:OcamlLoadLibrary

// file 246
let rec cloneHelper x n l =
  if n <= 0 then l else cloneHelper x (n - 1) (x :: l);;
let rec clone x n = if n < 1 then [] else cloneHelper x n [];;
let padZero l1 l2 =
  let diff = (List_length l1) - (List_length l2) in
  if diff < 0
  then (((clone 0 (-1 * diff)) @ l1), l2)
  else if diff > 0 then (l1, ((clone 0 diff) @ l2)) else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | hd::tl -> if hd = 0 then removeZero tl else l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = padZero l1 l2 in
    let base = List_combine l1 l2 in
    let args = failwith "to be implemented" in
    let (_,res) = List_fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ cloneHelper: 'a -> int -> list['a] -> list['a]
//│ clone: 'a -> int -> list['a]
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)
//│ removeZero: list['a] -> list['a]
//│ ╔══[ERROR] Type mismatch in if-else block:
//│ ║  l.20: 	    let (_,res) = List_fold_left f base args in res in
//│ ║        	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(?a, ?b,) list` is not a 2-element tuple
//│ ║  l.42: 	let List_combine: 'a list -> 'b list -> ('a * 'b) list
//│ ║        	                                         ^^^^^^^
//│ ╟── but it flows into reference with expected type `(?c, ?d)`
//│ ║  l.20: 	    let (_,res) = List_fold_left f base args in res in
//│ ║        	                                   ^^^^
//│ ╟── Note: constraint arises from match `condition`:
//│ ║  l.20: 	    let (_,res) = List_fold_left f base args in res in
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from case `expression`:
//│ ║  l.20: 	    let (_,res) = List_fold_left f base args in res in
//│ ╙──      	        ^^^^^^^
//│ bigAdd: list[?] -> list[?] -> list[int]

// file 67 mod
type expr =
    VarX
  | VarY
  | Sine of expr
  | Cosine of expr
  | Average of expr* expr
  | Times of expr* expr
  | Thresh of expr* expr* expr* expr;;
let pi = 4.0 *. (atan 1.0);;
let rec eval (e,x,y) =
  match e with
  | VarX  -> x
  | VarY  -> y
  | Sine e' -> sin (pi *. (eval (e', x, y)))
  | Cosine e' -> cos (pi *. (eval (e', x, y)))
  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))
  | Thresh (e1,e2,e3,e4) ->
      if (eval (e1, x, y)) < (eval (e2, x, y))
      then eval (e3, x, y)
      else eval (e4, x, y);;
//│ Defined type alias expr
//│ Defined class VarX
//│ Defined class VarY
//│ Defined class Sine
//│ Defined class Cosine
//│ Defined class Average
//│ Defined class Times
//│ Defined class Thresh
//│ VarX: expr
//│ VarY: expr
//│ Sine: expr -> expr
//│ Cosine: expr -> expr
//│ Average: (expr, expr,) -> expr
//│ Times: (expr, expr,) -> expr
//│ Thresh: (expr, expr, expr, expr,) -> expr
//│ pi: float
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.59: 	  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ ║        	                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `float`
//│ ║  l.59: 	  | Average (e1,e2) -> ((eval (e, x, y)) +. (eval (e2, x, y))) /. 2
//│ ║        	                                                                  ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.47: 	let ( /. ): float -> float -> float
//│ ╙──      	                     ^^^^^
//│ ╔══[ERROR] [level 0] Cannot unify int and float because lb(Int <: Float)
//│ ╙── (lb(Int <: Float),true)   int ---> float 
//│ eval: (expr, float, float,) -> float

// file 1087 mod
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List_hd xs in List_fold_left f base xs;;
//│ sqsum: list[list[?] | 'a] -> (int | 'a)


// file 26 mod
let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List_fold_left f base l;;
let stringOfList f l = "[" ^ ((sepConcat "; " List_map (f, l)) ^ "]");;
//│ sepConcat: string -> list[string] -> string
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.108: 	let stringOfList f l = "[" ^ ((sepConcat "; " List_map (f, l)) ^ "]");;
//│ ║         	                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `(?b -> ?c) -> list[?b] -> list[?c]` is not an instance of `?a list`
//│ ║  l.38: 	let List_map: ('a -> 'b) -> 'a list -> 'b list
//│ ║        	               ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a list`
//│ ║  l.108: 	let stringOfList f l = "[" ^ ((sepConcat "; " List_map (f, l)) ^ "]");;
//│ ║         	                                              ^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.102: 	let rec sepConcat sep sl =
//│ ║         	                      ^^
//│ ╟── from case `expression`:
//│ ║  l.104: 	  | [] -> ""
//│ ╙──       	    ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.108: 	let stringOfList f l = "[" ^ ((sepConcat "; " List_map (f, l)) ^ "]");;
//│ ║         	                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `string` is not a function
//│ ║  l.13: 	let (^): string -> string -> string
//│ ║        	                             ^^^^^^
//│ ╟── but it flows into application with expected type `(?a, ?b,) -> ?c`
//│ ║  l.108: 	let stringOfList f l = "[" ^ ((sepConcat "; " List_map (f, l)) ^ "]");;
//│ ╙──       	                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ stringOfList: anything -> anything -> string

// file 2376
let getHead h = match h with | [] -> [] | h::t -> h;;
let getTail t = match t with | [] -> [] | h::t -> t;;
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let rec matchHeads x y =
  match x with
  | [] -> true
  | h::t ->
      if (getHead x) = (getHead y) then matchHeads t (getTail y) else false;;
let explode s =
  let rec go i =
    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
  go 0;;
let palindrome w =
  match explode w with
  | [] -> true
  | h::t -> matchHeads (explode w) (listReverse (explode w));;
//│ getHead: list['a] -> (list[nothing] | 'a)
//│ getTail: list['a] -> list['a]
//│ listReverse: list['a] -> list['a]
//│ matchHeads: list[?] -> list[?] -> bool
//│ ╔══[ERROR] [level 1] Cannot unify ?a Array and string because ub(α565' <: Array‹α575''›),ub(α565' <: String)
//│ ╟── (ub(α565' <: Array‹α575''›),false), (ub(α565' <: String),true)   ?a Array <--- ?b ---> string 
//│ ╟── ?a Array is the type of array access
//│ ║  l.148: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                                           ^^^^^^
//│ ╟── ?b is the type of reference; ?a Array flows from here
//│ ║  l.148: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                                            ^
//│ ╟── string is the type of reference; ?b flows into it
//│ ║  l.148: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ║         	                           ^
//│ ╟── string is here
//│ ║  l.14: 	let String_length: string -> int
//│ ╙──      	                   ^^^^^^
//│ explode: nothing -> list[undefined]
//│ palindrome: nothing -> bool


// file 1563
let rec sumListHelper total xs =
  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
let rec digitsOfIntHelper n =
  if n < 1
  then []
  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [n mod 10] else [n];;
let rec digitsOfInt n = digitsOfIntHelper n;;
let rec sumList xs = sumListHelper 0 xs;;
let rec additivePersistence n = sumList digitsOfInt n;;
//│ sumListHelper: int -> list[int] -> int
//│ ╔══[ERROR] [level 1] Cannot unify (int -> int -> int) -> ?a and int because ub(α681' <: ([(Int -> (Int -> Int))] -> α697')),ub(α681' <: Int)
//│ ╟── (ub(α681' <: ([(Int -> (Int -> Int))] -> α697')),false), (ub(α681' <: Int),true)   (int -> int -> int) -> ?a <--- ?b ---> int 
//│ ╟── ?b is the type of reference; (int -> int -> int) -> ?a flows from here
//│ ║  l.182: 	  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [n mod 10] else [n];;
//│ ║         	                                                       ^
//│ ╟── int is the type of reference; ?b flows into it
//│ ║  l.182: 	  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [n mod 10] else [n];;
//│ ║         	                                           ^
//│ ╟── int is here
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.179: 	let rec digitsOfIntHelper n =
//│ ║         	                          ^^^
//│ ║  l.180: 	  if n < 1
//│ ║         	^^^^^^^^^^
//│ ║  l.181: 	  then []
//│ ║         	^^^^^^^^^
//│ ║  l.182: 	  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [n mod 10] else [n];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.182: 	  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [n mod 10] else [n];;
//│ ║         	                                          ^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.179: 	let rec digitsOfIntHelper n =
//│ ║         	                          ^
//│ ╟── from reference:
//│ ║  l.182: 	  else if n >= 10 then (digitsOfIntHelper (n / 10)) @ [n mod 10] else [n];;
//│ ╙──       	                                                       ^
//│ digitsOfIntHelper: nothing -> list[int]
//│ digitsOfInt: nothing -> list[int]
//│ sumList: list[int] -> int
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.185: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ║         	                                ^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?b -> ?c` is not an instance of `?a list`
//│ ║  l.183: 	let rec digitsOfInt n = digitsOfIntHelper n;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a list`
//│ ║  l.185: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ║         	                                        ^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.184: 	let rec sumList xs = sumListHelper 0 xs;;
//│ ║         	                ^^
//│ ╟── from case `expression`:
//│ ║  l.178: 	  match xs with | [] -> total | hd::tail -> sumListHelper (total + hd) tail;;
//│ ╙──       	                  ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.185: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ║         	                                ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not a function
//│ ║  l.184: 	let rec sumList xs = sumListHelper 0 xs;;
//│ ║         	                                   ^
//│ ╟── but it flows into application with expected type `?a -> ?b`
//│ ║  l.185: 	let rec additivePersistence n = sumList digitsOfInt n;;
//│ ╙──       	                                ^^^^^^^^^^^^^^^^^^^
//│ additivePersistence: anything -> nothing

// file 8776
// TODO list indexing here. skip this example?
let rec listReverse l =
  match l with | [] -> [] | h::t -> (listReverse t) @ [h];;
let getHeads y = match listReverse y with | [] -> [] | h::t -> [h];;
let loseTail z = match listReverse z with | [] -> [] | h::t -> t;;
let rec matchHeads x =
  match explode x with
  | h::t ->
      if (getHeads (explode x)) = []
      then true
      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ listReverse: list['a] -> list['a]
//│ getHeads: list['a] -> list['a]
//│ loseTail: list['a] -> list['a]
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^^^
//│ ║  l.255: 	  match explode x with
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.256: 	  | h::t ->
//│ ║         	^^^^^^^^^^^
//│ ║  l.257: 	      if (getHeads (explode x)) = []
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.258: 	      then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` does not match type `?b Array`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into application with expected type `?b Array`
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	                                                 ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^
//│ ╟── from array access:
//│ ║  l.148: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^^^
//│ ║  l.255: 	  match explode x with
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.256: 	  | h::t ->
//│ ║         	^^^^^^^^^^^
//│ ║  l.257: 	      if (getHeads (explode x)) = []
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.258: 	      then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `string`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into application with expected type `string`
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	                                                 ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^
//│ ╟── from type reference:
//│ ║  l.14: 	let String_length: string -> int
//│ ╙──      	                   ^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^^^
//│ ║  l.255: 	  match explode x with
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.256: 	  | h::t ->
//│ ║         	^^^^^^^^^^^
//│ ║  l.257: 	      if (getHeads (explode x)) = []
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.258: 	      then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` does not match type `?b Array`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into application with expected type `?b Array`
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	                                                 ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^
//│ ╟── from array access:
//│ ║  l.148: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^^^
//│ ║  l.255: 	  match explode x with
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.256: 	  | h::t ->
//│ ║         	^^^^^^^^^^^
//│ ║  l.257: 	      if (getHeads (explode x)) = []
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.258: 	      then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` does not match type `?b Array`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                            ^^
//│ ╟── but it flows into application with expected type `?b Array`
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	                                                 ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^
//│ ╟── from array access:
//│ ║  l.148: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^^^
//│ ║  l.255: 	  match explode x with
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.256: 	  | h::t ->
//│ ║         	^^^^^^^^^^^
//│ ║  l.257: 	      if (getHeads (explode x)) = []
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.258: 	      then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `string`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                            ^^
//│ ╟── but it flows into application with expected type `string`
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	                                                 ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^
//│ ╟── from type reference:
//│ ║  l.14: 	let String_length: string -> int
//│ ╙──      	                   ^^^^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^^^
//│ ║  l.255: 	  match explode x with
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.256: 	  | h::t ->
//│ ║         	^^^^^^^^^^^
//│ ║  l.257: 	      if (getHeads (explode x)) = []
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.258: 	      then true
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` does not match type `?b Array`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                            ^^
//│ ╟── but it flows into application with expected type `?b Array`
//│ ║  l.259: 	      else if [h] = (getHeads t) then matchHeads (loseTail t) else false;;
//│ ║         	                                                 ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.254: 	let rec matchHeads x =
//│ ║         	                   ^
//│ ╟── from array access:
//│ ║  l.148: 	    if i >= (String_length s) then [] else (s[i]) :: (go (i + 1)) in
//│ ╙──       	                                           ^^^^^^
//│ matchHeads: nothing -> bool

// TODO: parse correctly
let explode s =
  let rec go i =
    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in
  go 0;;
//│ /!\ Parse error: Expected (Index ~ filter | Index ~ "("):3:47, found "[i]) :: (g" at l.418:47:     if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in

// file 89
// TODO: parse properly
let rec digitsOfInt n =
  let return = [n mod 10] in
  if (n / 10) <> 0
  then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)
  else return;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t)
let rec digitalRoot n =
  let digits = digitsOfInt n in
  let s = sumList digits in
  if (n / 10) <> 0
  then (print_int n; print_endline " "; digitalRoot)
  else digits;;
//│ /!\ Parse error: Expected ")":4:29, found "; (digitsO" at l.427:29:   then ((n mod 10) :: return; (digitsOfInt (n / 10)) @ return)

// file 2361
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;
let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t);;
let digits n = digitsOfInt (abs n);;
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ╔══[ERROR] [level 1] Cannot unify (int -> int -> int) -> ?a and int because ub(α926' <: ([(Int -> (Int -> Int))] -> α938')),ub(α926' <: Int)
//│ ╟── (ub(α926' <: ([(Int -> (Int -> Int))] -> α938')),false), (ub(α926' <: Int),true)   (int -> int -> int) -> ?a <--- ?b ---> int 
//│ ╟── ?b is the type of reference; (int -> int -> int) -> ?a flows from here
//│ ║  l.440: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;
//│ ║         	                                                   ^
//│ ╟── int is the type of reference; ?b flows into it
//│ ║  l.440: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;
//│ ║         	                                       ^
//│ ╟── int is here
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.439: 	let rec digitsOfInt n =
//│ ║         	                    ^^^
//│ ║  l.440: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.19: 	let ( / ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.440: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;
//│ ║         	                                      ^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.439: 	let rec digitsOfInt n =
//│ ║         	                    ^
//│ ╟── from reference:
//│ ║  l.440: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;
//│ ╙──       	                                                   ^
//│ digitsOfInt: nothing -> list[nothing]
//│ addNumbs: list[int] -> int
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.442: 	let digits n = digitsOfInt (abs n);;
//│ ║         	               ^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.21: 	let abs: int -> int
//│ ║        	                ^^^
//│ ╟── but it flows into application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.442: 	let digits n = digitsOfInt (abs n);;
//│ ║         	                           ^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.439: 	let rec digitsOfInt n =
//│ ║         	                    ^
//│ ╟── from reference:
//│ ║  l.440: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10];;
//│ ╙──       	                                                   ^
//│ digits: int -> list[nothing]
//│ ╔══[ERROR] [level 1] Cannot unify int and bool because lb(Int <: α990'),lb([[[Bool]]] <: α990')
//│ ╟── (lb(Int <: α990'),true), (lb([[[Bool]]] <: α990'),false)   int ---> ?a <--- bool 
//│ ╟── int is the type of integer literal
//│ ║  l.445: 	  | [] -> 0
//│ ║         	          ^
//│ ╟── ?a is the type of match expression; int flows here
//│ ║  l.444: 	  match digits n with
//│ ║         	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.445: 	  | [] -> 0
//│ ║         	^^^^^^^^^^^
//│ ║  l.446: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── bool is the type of if-then-else `expression`; ?a flows here
//│ ║  l.446: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── bool is the type of `else` branch
//│ ║  l.446: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true;;
//│ ╙──       	                                                         ^^^^
//│ additivePersistence: int -> (bool | int)

// TODO
// file 358 mod
// type expr used from previous
let buildCosine e = Cosine e;;
let buildSine e = Sine e;;
let buildX () = VarX;;
let buildY () = VarY;;
let rec build (rand,depth) =
  let r = rand 0.4 in
  match depth with
  | 0 -> if (r mod 2) = 0 then buildX else buildY
  | d ->
      if r = 0
      then buildSine build (rand, (d - 1))
      else buildCosine build (rand, (d - 1));;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: could not find type definition d

// TODO file 1337 in separate file to avoid collisions

// file 2752
let remainder x y = if (x * y) > 10 then (x * y) mod 10 else 0;;
let x l = List_map string_of_int;;
let y = [1, 2, 3];;
let rec mulByDigit i l =
  match List_rev l with
  | [] -> []
  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.533: 	let remainder x y = if (x * y) > 10 then (x * y) mod 10 else 0;;
//│ ║         	                                         ^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.18: 	let ( * ): int -> int -> int
//│ ║        	                         ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.533: 	let remainder x y = if (x * y) > 10 then (x * y) mod 10 else 0;;
//│ ╙──       	                                         ^^^^^^^
//│ ╔══[ERROR] [level 0] Cannot unify int and (int -> int -> int) -> ?a because lb([[[Int]]] <: ([(Int -> (Int -> Int))] -> α1030'))
//│ ╙── (lb([[[Int]]] <: ([(Int -> (Int -> Int))] -> α1030')),true)   int ---> (int -> int -> int) -> ?a 
//│ remainder: int -> int -> int
//│ x: anything -> list[int] -> list[string]
//│ y: list[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.539: 	  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ║         	             ^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of `int`
//│ ║  l.534: 	let x l = List_map string_of_int;;
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.539: 	  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ║         	                       ^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.533: 	let remainder x y = if (x * y) > 10 then (x * y) mod 10 else 0;;
//│ ║         	              ^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( * ): int -> int -> int
//│ ╙──      	           ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.539: 	  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ║         	             ^^^^^^^^^^^^^
//│ ╟── type `?a list` is not an instance of `int`
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.539: 	  | h::t -> [remainder x y] @ (mulByDigit i t);;
//│ ║         	                         ^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.533: 	let remainder x y = if (x * y) > 10 then (x * y) mod 10 else 0;;
//│ ║         	                ^
//│ ╟── from type reference:
//│ ║  l.18: 	let ( * ): int -> int -> int
//│ ╙──      	                  ^^^
//│ mulByDigit: anything -> list[?] -> list[int]


// file 344 mod
let rec clone x n = if n > 0 then x :: (clone x (n - 1)) else [];;
let padLength l1 l2 = abs ((List_length l1) - (List_length l2));;
let padZero l1 l2 =
  if (List_length l1) < (List_length l2)
  then (clone 0 (padLength l1 l2)) :: l1
  else (clone 0 (padLength l1 l2)) l2;;
//│ clone: 'a -> int -> list['a]
//│ padLength: list[?] -> list[?] -> int
//│ ╔══[ERROR] Type mismatch in `else` branch:
//│ ║  l.593: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not a function
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into application with expected type `?b -> ?c`
//│ ║  l.593: 	  else (clone 0 (padLength l1 l2)) l2;;
//│ ╙──       	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ padZero: list[?] -> list[?] -> list[list[int]]

// file 2736
// TODO parse properly
let rec addHelper (t,u) =
// match List_rev t with
//  | [] -> []
//  | h::t ->
//     match List_rev u with
//      | [] -> []
//      | h'::t' ->
//          if (h + h') > 10
//          then (addHelper (t, t')) @ [(1 + h') + h]
//          else (addHelper (t, t')) @ [h' + h];;
//│ /!\ Parse error: Expected (Index ~ let | Index ~ letPatMat | Index ~ fun | Index ~ ite | Index ~ ocamlWithAsc | Index ~ _match):1:26, found ";// match " at l.609:26: let rec addHelper (t,u) =

// file 1948
// TODO parse properly
let rec tenEx x y =
  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
let bigMul l1 l2 =
  let f a x =
    let (x1,x2) = x in
    let (carry,res) = a in
    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
  let base = (0, []) in
  let args = l1 (tenEx 0 l2) in
  let (carry,res) = List_fold_left f base args in [carry] @ res;;
//│ ╔══[ERROR] identifier not found: helper
//│ ║  l.624: 	  match y with | [] -> [] | h::t -> (tenEx (x + 1) t) @ [(helper x) * h];;
//│ ╙──       	                                                          ^^^^^^
//│ ╔══[ERROR] [level 0] Cannot unify error and ?a -> ?b because lb(error<> <: ([α1202'] -> α1216'))
//│ ╙── (lb(error<> <: ([α1202'] -> α1216')),true)   error ---> ?a -> ?b 
//│ tenEx: nothing -> list[int] -> list[int]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.629: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(?a, ?b)` is not an instance of `?c list`
//│ ║  l.629: 	    match x2 with | [] -> [] | h::t -> bigAdd ((mulByDigit h l1), res) in
//│ ║         	                                              ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.15: 	let bigAdd l1 l2 =
//│ ║        	           ^^
//│ ╟── from applied type reference:
//│ ║  l.42: 	let List_combine: 'a list -> 'b list -> ('a * 'b) list
//│ ╙──      	                  ^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.632: 	  let (carry,res) = List_fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not a 2-element tuple
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.626: 	  let f a x =
//│ ║         	        ^
//│ ╟── from case `expression`:
//│ ║  l.628: 	    let (carry,res) = a in
//│ ╙──       	        ^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in if-else block:
//│ ║  l.632: 	  let (carry,res) = List_fold_left f base args in [carry] @ res;;
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `?a list` is not a 2-element tuple
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── but it flows into application with expected type `(?b, ?c)`
//│ ║  l.632: 	  let (carry,res) = List_fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from match `condition`:
//│ ║  l.632: 	  let (carry,res) = List_fold_left f base args in [carry] @ res;;
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from case `expression`:
//│ ║  l.632: 	  let (carry,res) = List_fold_left f base args in [carry] @ res;;
//│ ╙──       	      ^^^^^^^^^^^
//│ bigMul: (list[?] & list[int] -> list[(anything, list[?],)]) -> list[int] -> list[int]

// file 335
// TODO fix type system
let fixpointHelper f =
  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
let rec wwhile (f,b) =
  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ fixpointHelper: ('a, bool,) -> ('a, bool,)
//│ wwhile: ('a -> ('a & 'b, bool,), 'a,) -> 'b
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.686: 	let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(?a, bool)` is not a function
//│ ║  l.683: 	  match f with | (num,expr) -> if expr then (num, true) else (num, false);;
//│ ║         	                                                             ^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?b -> ?c`
//│ ║  l.686: 	let fixpoint (f,b) = wwhile ((fixpointHelper f), b);;
//│ ║         	                             ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from variable:
//│ ║  l.684: 	let rec wwhile (f,b) =
//│ ║         	                ^
//│ ╟── from reference:
//│ ║  l.685: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ╙──       	        ^
//│ fixpoint: ((anything, bool,), anything,) -> nothing

// file 3 mod
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let padZero l1 l2 =
  let numZeros = (List_length l1) - (List_length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2));;
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List_rev (List_combine l1 l2) in
    let (_,res) = List_fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ clone: 'a -> int -> list['a]
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)
//│ removeZero: (list[int & 'a] & 'b) -> (list['a] | 'b)
//│ ╔══[ERROR] [level 2] Cannot unify ?a list and (?b, ?c) because lb(list[α1527'''] <: α1525'''),ub(α1521''' <: α1525'''),ub(α1521''' <: (α1532''', α1533''',))
//│ ╟── (lb(list[α1527'''] <: α1525'''),true), (ub(α1521''' <: α1525'''),false), (ub(α1521''' <: (α1532''', α1533''',)),true)   ?a list ---> ?d <--- ?e ---> (?b, ?c) 
//│ ╟── ?a list is here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── ?d is the type of reference; ?a list flows here
//│ ║  l.722: 	      if x = []
//│ ║         	             ^^
//│ ╟── ?d is the type of reference; it flows from ?e
//│ ║  l.722: 	      if x = []
//│ ║         	         ^
//│ ╟── (?b, ?c) is the type of reference; ?e flows into it
//│ ║  l.725: 	        (let (toSum1,toSum2) = x in
//│ ║         	                               ^
//│ ╟── (?b, ?c) is the type of case `expression`
//│ ║  l.725: 	        (let (toSum1,toSum2) = x in
//│ ╙──       	             ^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.727: 	         let valueToAddToArray = intermediateValue mod 10 in
//│ ║         	                                 ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── but it flows into reference with expected type `(int -> int -> int) -> ?a`
//│ ║  l.727: 	         let valueToAddToArray = intermediateValue mod 10 in
//│ ╙──       	                                 ^^^^^^^^^^^^^^^^^
//│ bigAdd: list[?] -> list[?] -> list[int]

// file 1935
let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1));;
let addTuple (l1,l2) = l1 + l2;;
let padZero l1 l2 =
  if (List_length l1) > (List_length l2)
  then (l1, ((clone 0 ((List_length l1) - (List_length l2))) @ l2))
  else
    if (List_length l1) < (List_length l2)
    then (((clone 0 ((List_length l2) - (List_length l1))) @ l1), l2)
    else (l1, l2);;
let rec removeZero l =
  match l with | [] -> [] | h::t -> if h = 0 then removeZero t else h :: t;;
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x = (a + x) mod 10 in
    let base = 0 in
    let args = List_map addTuple (List_combine l1 l2) in
    let (_,res) = List_fold_left f base args in res in
  removeZero (add (padZero l1 l2));;
//│ clone: 'a -> int -> list['a]
//│ addTuple: (int, int,) -> int
//│ padZero: list[?] -> list[?] -> (list[int], list[int],)
//│ removeZero: list['a] -> list['a]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.779: 	    let f a x = (a + x) mod 10 in
//│ ║         	                ^^^^^^^^^^^
//│ ╟── type `int` is not a function
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── but it flows into operator application with expected type `(int -> int -> int) -> ?a`
//│ ║  l.779: 	    let f a x = (a + x) mod 10 in
//│ ╙──       	                ^^^^^^^
//│ ╔══[ERROR] [level 0] Cannot unify int and (int -> int -> int) -> ?a because lb([[[Int]]] <: ([(Int -> (Int -> Int))] -> α1778'''))
//│ ╙── (lb([[[Int]]] <: ([(Int -> (Int -> Int))] -> α1778''')),true)   int ---> (int -> int -> int) -> ?a 
//│ ╔══[ERROR] Type mismatch in if-else block:
//│ ║  l.782: 	    let (_,res) = List_fold_left f base args in res in
//│ ║         	    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not a 2-element tuple
//│ ║  l.780: 	    let base = 0 in
//│ ║         	               ^
//│ ╟── but it flows into reference with expected type `(?a, ?b)`
//│ ║  l.782: 	    let (_,res) = List_fold_left f base args in res in
//│ ║         	                                   ^^^^
//│ ╟── Note: constraint arises from match `condition`:
//│ ║  l.782: 	    let (_,res) = List_fold_left f base args in res in
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from case `expression`:
//│ ║  l.782: 	    let (_,res) = List_fold_left f base args in res in
//│ ╙──       	        ^^^^^^^
//│ ╔══[ERROR] [level 0] Cannot unify int and (?a, ?b) because lb([[[[[Int]]]]] <: [(α1793'', α1794'',)])
//│ ╙── (lb([[[[[Int]]]]] <: [(α1793'', α1794'',)]),true)   int ---> (?a, ?b) 
//│ bigAdd: list[?] -> list[?] -> list[nothing]



// file 1907
let intboolf f x = ((f x), ((f x) < 1));;
let fixpoint (f,b) = wwhile (intboolf, b);;
let rec wwhile (f,b) =
  match f b with | (b',c') -> if c' then wwhile (f, b') else b';;
//│ intboolf: ('a -> 'b) -> 'a -> ('b, bool,)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.822: 	let fixpoint (f,b) = wwhile (intboolf, b);;
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> (?b, ?c,)` is not a 2-element tuple
//│ ║  l.821: 	let intboolf f x = ((f x), ((f x) < 1));;
//│ ║         	               ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.685: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ║         	        ^^^
//│ ╟── from case `expression`:
//│ ║  l.685: 	  match f b with | (num,expr) -> if expr then wwhile (f, num) else num;;
//│ ╙──       	                   ^^^^^^^^^^
//│ fixpoint: (anything, nothing -> anything,) -> nothing
//│ wwhile: ('a -> ('a & 'b, bool,), 'a,) -> 'b



// file 2047
let identity a = a;;
let pipe fs =
  let f a x = a x in let base = identity in List_fold_left f base fs;;
//│ identity: 'a -> 'a
//│ pipe: list['a & 'b & 'c] -> (('b & 'c) -> 'b | 'c)
//│   where
//│     'c <: 'a -> 'c


// file 830
// TODO: fix how match case is done
let modulus ss = ss mod 10;;
let rec digitsOfInt n =
  if n <= 0
  then []
  else (match n with | x -> (digitsOfInt (n / 10)) @ [modulus x]);;
let lt10 q = q < 10;;
let rec sumList xs = match xs with | [] -> 0 | h::t -> h + (sumList t);;
let rec additivePersistence n =
  if lt10 n
  then n
  else
    (match n with
     | n -> let x_ = digitsOfInt n in sumList x_ additivePersistence n);;
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: could not find type definition x


// file 1770
let rec filter l a =
  match l with
  | [] -> []
  | h::t -> if a = h then filter t a else h :: (filter t a);;
let removeDuplicates l =
  let rec helper (seen,rest) =
    match rest with
    | [] -> seen
    | h::t ->
        let seen' = h in
        let rest' = h :: (filter (t h)) in helper (seen', rest') in
  List_rev (helper ([], l));;
//│ filter: list['a] -> anything -> list['a]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.882: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ║         	                                 ^^^^^
//│ ╟── type `?a list` is not a function
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	                            ^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.882: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ╙──       	                                  ^
//│ ╔══[ERROR] [level 0] Cannot unify ?a list and ?a -> ?b because lb(list['a2012''] <: (['a2012''] -> α2028'''))
//│ ╙── (lb(list['a2012''] <: (['a2012''] -> α2028''')),true)   ?a list ---> ?a -> ?b 
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.882: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ║         	                    ^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of `?c list`
//│ ║  l.872: 	let rec filter l a =
//│ ║         	                 ^^^
//│ ║  l.873: 	  match l with
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.874: 	  | [] -> []
//│ ║         	^^^^^^^^^^^^
//│ ║  l.875: 	  | h::t -> if a = h then filter t a else h :: (filter t a);;
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into application with expected type `?c list`
//│ ║  l.882: 	        let rest' = h :: (filter (t h)) in helper (seen', rest') in
//│ ║         	                         ^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ╙──     	                            ^^
//│ removeDuplicates: list[list['a]] -> list['a]


// file 0221
let fu x b = (x, (b < (x b)));;
let rec wwhile (f,b) =
  let temp = f b in
  match temp with | (a,boolean) -> if boolean then wwhile (f, a) else a;;
let fixpoint (f,b) = wwhile ((fu f), b);;
//│ fu: ('a -> anything & 'b) -> 'a -> ('b, bool,)
//│ wwhile: ('a -> ('a & 'b, bool,), 'a,) -> 'b
//│ fixpoint: ('a -> anything & 'a & 'b, 'a,) -> 'b

// file 2338
let rec assoc (d,k,l) =
  match l with
  | [] -> d
  | h::t -> let (f,s) = h in if k = f then s h else assoc d k t;;
//│ assoc: ('b, 'c, list[(anything, 'a -> 'd,) & 'a],) -> 'd
//│   where
//│     'b <: ('b, 'c, list[(anything, 'a -> 'd,) & 'a],) & 'd
//│     'd <: 'c -> list['a] -> 'd
