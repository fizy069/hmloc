:dp
:d
[1]
//│ Parsed: App(Var(Cons), Tup(IntLit(1), Var(Nil)))
//│ 0. Typing term Cons (1, Nil,)
//│ | 0. Typing term Cons
//│ | 0. : [((α59, List[α59],) -> List[α59])]
//│ | 0. Typing term 1, Nil,
//│ | | 0. Typing term 1
//│ | | 0. : Int
//│ | | 0. Typing term Nil
//│ | | 0. : [List[α60]]
//│ | 0. : (Int, [List[α60]],)
//│ | CONSTRAIN [((α59, List[α59],) -> List[α59])] <! ((Int, [List[α60]],) -> α62)
//│ |   where 
//│ | C [((α59, List[α59],) -> List[α59])] <! ((Int, [List[α60]],) -> α62)    (0) where ProvType <: FunctionType}
//│ | | C ((α59, List[α59],) -> List[α59]) <! ((Int, [List[α60]],) -> α62)    (0) where FunctionType <: FunctionType}
//│ | | | [nested] [(Int, [List[α60]],)]
//│ | | | C (Int, [List[α60]],) <! (α59, List[α59],)    (1) where TupleType <: TupleType}
//│ | | | | [nested] [Int]
//│ | | | | C Int <! α59    (2) where TypeRef <: TypeVariable}
//│ | | | | [nested] [[List[α60]]]
//│ | | | | C [List[α60]] <! List[α59]    (3) where ProvType <: TypeRef}
//│ | | | | | C List[α60] <! List[α59]    (3) where TypeRef <: TypeRef}
//│ | | | [nested] [List[α59]]
//│ | | | C List[α59] <! α62    (4) where TypeRef <: TypeVariable}
//│ 0. : α62
//│ ⬤ Typed as: α62
//│  where: 
//│ 		α59 :> [[Int]]
//│ 		α62 :> [[[List[α59]]]]
//│ res: anything

:d
1 :: 2 :: []
//│ 0. Typing term Cons (1, Cons (2, Nil,),)
//│ | 0. Typing term Cons
//│ | 0. : [((α64, List[α64],) -> List[α64])]
//│ | 0. Typing term 1, Cons (2, Nil,),
//│ | | 0. Typing term 1
//│ | | 0. : Int
//│ | | 0. Typing term Cons (2, Nil,)
//│ | | | 0. Typing term Cons
//│ | | | 0. : [((α65, List[α65],) -> List[α65])]
//│ | | | 0. Typing term 2, Nil,
//│ | | | | 0. Typing term 2
//│ | | | | 0. : Int
//│ | | | | 0. Typing term Nil
//│ | | | | 0. : [List[α66]]
//│ | | | 0. : (Int, [List[α66]],)
//│ | | | CONSTRAIN [((α65, List[α65],) -> List[α65])] <! ((Int, [List[α66]],) -> α68)
//│ | | |   where 
//│ | | | C [((α65, List[α65],) -> List[α65])] <! ((Int, [List[α66]],) -> α68)    (0) where ProvType <: FunctionType}
//│ | | | | C ((α65, List[α65],) -> List[α65]) <! ((Int, [List[α66]],) -> α68)    (0) where FunctionType <: FunctionType}
//│ | | | | | [nested] [(Int, [List[α66]],)]
//│ | | | | | C (Int, [List[α66]],) <! (α65, List[α65],)    (1) where TupleType <: TupleType}
//│ | | | | | | [nested] [Int]
//│ | | | | | | C Int <! α65    (2) where TypeRef <: TypeVariable}
//│ | | | | | | [nested] [[List[α66]]]
//│ | | | | | | C [List[α66]] <! List[α65]    (3) where ProvType <: TypeRef}
//│ | | | | | | | C List[α66] <! List[α65]    (3) where TypeRef <: TypeRef}
//│ | | | | | [nested] [List[α65]]
//│ | | | | | C List[α65] <! α68    (4) where TypeRef <: TypeVariable}
//│ | | 0. : α68
//│ | 0. : (Int, α68,)
//│ | CONSTRAIN [((α64, List[α64],) -> List[α64])] <! ((Int, α68,) -> α70)
//│ |   where 
//│ 		α65 :> [[Int]]
//│ 		α68 :> [[[List[α65]]]]
//│ | C [((α64, List[α64],) -> List[α64])] <! ((Int, α68,) -> α70)    (0) where ProvType <: FunctionType}
//│ | | C ((α64, List[α64],) -> List[α64]) <! ((Int, α68,) -> α70)    (0) where FunctionType <: FunctionType}
//│ | | | [nested] [(Int, α68,)]
//│ | | | C (Int, α68,) <! (α64, List[α64],)    (1) where TupleType <: TupleType}
//│ | | | | [nested] [Int]
//│ | | | | C Int <! α64    (2) where TypeRef <: TypeVariable}
//│ | | | | [nested] [α68]
//│ | | | | C α68 <! List[α64]    (3) where TypeVariable <: TypeRef}
//│ | | | | | C [[[List[α65]]]] <! List[α64]    (4) where ProvType <: TypeRef}
//│ | | | | | | C [[List[α65]]] <! List[α64]    (4) where ProvType <: TypeRef}
//│ | | | | | | | C [List[α65]] <! List[α64]    (4) where ProvType <: TypeRef}
//│ | | | | | | | | C List[α65] <! List[α64]    (4) where TypeRef <: TypeRef}
//│ | | | [nested] [List[α64]]
//│ | | | C List[α64] <! α70    (5) where TypeRef <: TypeVariable}
//│ 0. : α70
//│ ⬤ Typed as: α70
//│  where: 
//│ 		α64 :> [[Int]]
//│ 		α70 :> [[[List[α64]]]]
//│ res: anything
