:OcamlParser
:OcamlLoadLibrary


// *** GOAL ***
// ╔══[ERROR] Type `int` does not match `string`
// ╟── int ---> ?a <--- string
// ╟── `else` branch has type `int` and flows into ?a
// ║  l.5: 	let boolToInt x = if x then "0" else 1
// ║       	                                     ^
// ╟── ?a is the the result of this if-then-else but `string` also flows here
// ║  l.5: 	let boolToInt x = if x then "0" else 1
// ║       	                  ^^^^^^^^^^^^^^^^^^^^
// ╟── `string` flows from this `then` branch
// ║  l.5: 	let boolToInt x = if x then "0" else 1
// ║       	                            ^^^
// boolToInt: bool -> (int | string)

:unify
let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Type `int` does not match `string`
//│ ╟──          int ---> ?a <--- string
//│ ╟── `int` is the type of this `else` branch and it flows into `?a`
//│ ║  l.20: 	let boolToInt x = if x then "0" else 1
//│ ║        	                                     ^
//│ ╟── `?a` is the type of this if-then-else `expression`; `string` also flows here
//│ ║  l.20: 	let boolToInt x = if x then "0" else 1
//│ ║        	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── `string` is the type of this `then` branch
//│ ║  l.20: 	let boolToInt x = if x then "0" else 1
//│ ╙──      	                            ^^^
//│ boolToInt: bool -> (int | string)


let x: int list
//│ x: list[int]

let y: string list
//│ y: list[string]

let f: string list -> unit
//│ f: list[string] -> unit

// * Note: a collision
:e
f x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.46: 	f x
//│ ║        	^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.35: 	let x: int list
//│ ║        	       ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.41: 	let f: string list -> unit
//│ ╙──      	       ^^^^^^


// *** GOAL ***
// ╔══[WARNING] Type `string` does not match `int`
// ╟── string list ---> ?a <--- int list
// ╟── type `string` flows into ?a
// ║  l.47: 	let y: string list
// ║        	       ^^^^^^^^^^^
// ╟── ?a is the the result of this if-then-else but `int list` also flows here
// ║  l.5: 	if true then x else y
// ║       	^^^^^^^^^^^^^^^^^^^^^
// ╟── `int list` flows from here
// ║  l.44: 	let x: int list
// ╙──      	       ^^^^^^^^

:unify
if true then x else y
// res: list[int | string]
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Cannot create unification error message for String = Int because 0 index of type ref TypeName(list)
//│ 	at: mlscript.utils.package$.lastWords(package.scala:185)
//│ 	at: mlscript.Typer.createUnificationErrorMessage(Typer.scala:784)
//│ 	at: mlscript.Typer.$anonfun$createUnificationErrorMessage$9(Typer.scala:846)
//│ 	at: scala.Option.map(Option.scala:242)
//│ 	at: mlscript.Typer.createUnificationErrorMessage(Typer.scala:846)
//│ 	at: mlscript.Typer.unifyTypes(Typer.scala:880)
//│ 	at: mlscript.Typer.$anonfun$unifyTypes$1(Typer.scala:877)
//│ 	at: mlscript.Typer.$anonfun$unifyTypes$1$adapted(Typer.scala:876)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)
//│ 	at: mlscript.Typer.unifyTypes(Typer.scala:876)


let wrap x = Cons(x, Nil)
//│ wrap: 'a -> list['a]


// *** GOAL ***
// ╔══[WARNING] Type `int` does not match `bool`
// ╟── int ---> int list ---> ?a <--- bool list <--- bool
// ╟── integer literal `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── integer literal `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── argument `int`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                  ^
// ╟── reference `int`
// ║  l.97: 	let wrap x = Cons(x, Nil)
// ║        	                  ^
// ╟── argument `bool`
// ║  l.101: 	if true then wrap 1 else wrap true
// ║         	                              ^^^^
// ╟── reference `bool`
// ║  l.101: 	if true then wrap 1 else wrap true
// ╙──       	                              ^^^^

// * We don't care about in-and-outs
// ╟── int ---> int list ---> int --> int list ---> ...

:unify
if true then wrap 1 else wrap true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ╟──          int ---> bool
//│ ╟── int` is the type of this integer literal
//│ ║  l.117: 	if true then wrap 1 else wrap true
//│ ║         	                  ^
//│ ╟── `int` is the type of this reference and it flows into `?a`
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ╙──      	                  ^
//│ res: list[bool | int]


:unify
if true then wrap (if true then 1 else false) else wrap true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ╟──          int ---> ?a <--- bool
//│ ╟── int` is the type of this `then` branch
//│ ║  l.130: 	if true then wrap (if true then 1 else false) else wrap true
//│ ║         	                                ^
//│ ╟── `int` is the type of this if-then-else `expression` and it flows into `?a`
//│ ║  l.130: 	if true then wrap (if true then 1 else false) else wrap true
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `bool` is the type of this if-then-else `expression`
//│ ║  l.130: 	if true then wrap (if true then 1 else false) else wrap true
//│ ║         	                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `bool` is the type of this `else` branch
//│ ║  l.130: 	if true then wrap (if true then 1 else false) else wrap true
//│ ╙──       	                                       ^^^^^
//│ res: list[bool | int]


:unify
let test z = if true then wrap z else wrap true
//│ test: 'a -> list[bool | 'a]


:unify
let rec t = test (if true then 1 else t)
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟──          ?a list ---> ?b <--- int
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ║        	             ^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this `then` branch
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	                          ^^^^^^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `?a list` is the type of this `else` branch and it flows into `?b`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                                      ^
//│ ╟── `int` is the type of this if-then-else `expression`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `int` is the type of this `then` branch
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ╙──       	                               ^
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ╟──          ?a list ---> ?b <--- int
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ║        	             ^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this `else` branch
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	                                      ^^^^^^^^^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `?a list` is the type of this `else` branch and it flows into `?b`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                                      ^
//│ ╟── `int` is the type of this if-then-else `expression`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `int` is the type of this `then` branch
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ╙──       	                               ^
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ╟──          int ---> bool
//│ ╟── int` is the type of this `then` branch
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                               ^
//│ ╟── int` is the type of this if-then-else `expression`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── int` is the type of this reference
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ║        	                  ^
//│ ╟── `int` is the type of this reference and it flows into `?a`
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ╙──       	                               ^
//│ ╔══[ERROR] Type `?a list` does not match `bool`
//│ ╟──          ?a list ---> bool
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ║        	             ^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this `then` branch
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	                          ^^^^^^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this reference
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ║        	                  ^
//│ ╟── ?a list` is the type of this reference
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	                               ^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `?a list` is the type of this `else` branch and it flows into `?a`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ╙──       	                                      ^
//│ ╔══[ERROR] Type `?a list` does not match `bool`
//│ ╟──          ?a list ---> bool
//│ ╟── `?a list` is found here
//│ ║  l.1: 	type 'a list = Cons of 'a * 'a list | Nil
//│ ║       	     ^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ║        	             ^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this `else` branch
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	                                      ^^^^^^^^^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this application
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a list` is the type of this reference
//│ ║  l.87: 	let wrap x = Cons(x, Nil)
//│ ║        	                  ^
//│ ╟── ?a list` is the type of this reference
//│ ║  l.149: 	let test z = if true then wrap z else wrap true
//│ ║         	                               ^
//│ ╟── ?a list` is the type of this if-then-else `expression`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ║         	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `?a list` is the type of this `else` branch and it flows into `?b`
//│ ║  l.154: 	let rec t = test (if true then 1 else t)
//│ ╙──       	                                      ^
//│ t: 't
//│   where
//│     't :> list[bool | int | 't]




let wrap x = not x
//│ wrap: bool -> bool

:unify
let test z = wrap z
//│ test: bool -> bool

// TODO fix flow
:ex
test 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.301: 	test 1
//│ ║         	^^^^^^
//│ ╟── integer literal of type `int` is not an instance of `bool`
//│ ║  l.301: 	test 1
//│ ║         	     ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.296: 	let test z = wrap z
//│ ║         	                  ^
//│ ╟── from type reference:
//│ ║  l.56: 	let not: bool -> bool
//│ ║        	         ^^^^
//│ ╟── ========= Additional explanations below =========
//│ ╟── [info] flowing from integer literal of type `int`
//│ ║  l.301: 	test 1
//│ ║         	     ^
//│ ╟── [info] flowing from <nested> of type `int`
//│ ╟── [info] flowing into type `bool`
//│ ║  l.56: 	let not: bool -> bool
//│ ║        	         ^^^^
//│ ╟── [info] flowing into type `bool`
//│ ║  l.56: 	let not: bool -> bool
//│ ║        	         ^^^^
//│ ╟── [info] flowing into <nested> of type `bool`
//│ ╟── [info] flowing into reference of type `bool`
//│ ║  l.292: 	let wrap x = not x
//│ ║         	                 ^
//│ ╟── [info] flowing into variable of type `bool`
//│ ╟── [info] flowing into variable of type `?a`
//│ ╟── [info] flowing into variable of type `?a`
//│ ╟── [info] flowing into <nested> of type `?a`
//│ ╟── [info] flowing into reference of type `?a`
//│ ║  l.296: 	let test z = wrap z
//│ ║         	                  ^
//│ ╙── [info] flowing into variable of type `?b`
//│ res: bool





type ('a, 'b) either = Left of 'a | Right of 'b
//│ Defined type alias either[+'a, +'b]
//│ Defined class Left[+'a]
//│ Defined class Right[+'b]
//│ Left: 'a -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

:unify
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ╟──          bool ---> ?a <--- int
//│ ╟── `bool` is found here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ║        	                          ^^^^
//│ ╟── `bool` is the type of this operator application and it flows into `?a`
//│ ║  l.353: 	 | Right r -> r && true
//│ ║         	              ^^^^^^^^^^
//│ ╟── `?a` is the type of this match expression; `int` also flows here
//│ ║  l.351: 	let destructEither x = match x with
//│ ║         	                       ^^^^^^^^^^^^
//│ ║  l.352: 	 | Left l -> l + 1
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ║  l.353: 	 | Right r -> r && true
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `int` is the type of this operator application
//│ ║  l.352: 	 | Left l -> l + 1
//│ ║         	             ^^^^^
//│ ╟── `int` is found here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ╙──      	                       ^^^
//│ destructEither: either[int, bool] -> (bool | int)

:unify
let destructEither x = if x
  then match x with
    | Left l -> l + 1
    | Right r -> r - 1
  else x
//│ ╔══[ERROR] Type `(?a, ?b) either` does not match `bool`
//│ ╙──          (?a, ?b) either <--- ?c ---> bool
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ╟──          bool <--- ?a ---> ?b <--- int
//│ ╟── `?b` is the type of this if-then-else `expression`; `int` also flows here
//│ ║  l.378: 	let destructEither x = if x
//│ ║         	                       ^^^^
//│ ║  l.379: 	  then match x with
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    | Left l -> l + 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.381: 	    | Right r -> r - 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  else x
//│ ║         	^^^^^^^^^
//│ ╟── `int` is the type of this match expression
//│ ║  l.379: 	  then match x with
//│ ║         	       ^^^^^^^^^^^^
//│ ║  l.380: 	    | Left l -> l + 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.381: 	    | Right r -> r - 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `int` is the type of this operator application
//│ ║  l.381: 	    | Right r -> r - 1
//│ ║         	                 ^^^^^
//│ ╟── `int` is found here
//│ ║  l.17: 	let (-): int -> int -> int
//│ ╙──      	                       ^^^
//│ ╔══[ERROR] Type `(?a, ?b) either` does not match `int`
//│ ╟──          (?a, ?b) either <--- ?c ---> ?d <--- int
//│ ╟── `?d` is the type of this if-then-else `expression`; `int` also flows here
//│ ║  l.378: 	let destructEither x = if x
//│ ║         	                       ^^^^
//│ ║  l.379: 	  then match x with
//│ ║         	^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    | Left l -> l + 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.381: 	    | Right r -> r - 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.382: 	  else x
//│ ║         	^^^^^^^^^
//│ ╟── `int` is the type of this match expression
//│ ║  l.379: 	  then match x with
//│ ║         	       ^^^^^^^^^^^^
//│ ║  l.380: 	    | Left l -> l + 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.381: 	    | Right r -> r - 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `int` is the type of this operator application
//│ ║  l.381: 	    | Right r -> r - 1
//│ ║         	                 ^^^^^
//│ ╟── `int` is found here
//│ ║  l.17: 	let (-): int -> int -> int
//│ ╙──      	                       ^^^
//│ destructEither: (either[int, int] & bool & 'a) -> (int | 'a)

:unify
1 + 1.0
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Cannot create unification error message for Float = Int because function argument type
//│ 	at: mlscript.utils.package$.lastWords(package.scala:185)
//│ 	at: mlscript.Typer.createUnificationErrorMessage(Typer.scala:784)
//│ 	at: mlscript.Typer.$anonfun$createUnificationErrorMessage$9(Typer.scala:846)
//│ 	at: scala.Option.map(Option.scala:242)
//│ 	at: mlscript.Typer.createUnificationErrorMessage(Typer.scala:846)
//│ 	at: mlscript.Typer.unifyTypes(Typer.scala:880)
//│ 	at: mlscript.Typer.unifyTypes(Typer.scala:891)
//│ 	at: mlscript.Typer.$anonfun$unifyTypes$5(Typer.scala:909)
//│ 	at: mlscript.Typer.$anonfun$unifyTypes$5$adapted(Typer.scala:907)
//│ 	at: scala.collection.immutable.List.foreach(List.scala:333)

