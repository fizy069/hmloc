:unify
let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Type `string` does not match `int`
//│ ║  
//│ ╟── this `then` branch has type `string`
//│ ║  l.2: 	let boolToInt x = if x then "0" else 1
//│ ║       	                            ^^^
//│ ╟── this if-then-else expression has type `string`
//│ ║  l.2: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `int`
//│ ║  l.2: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `int`
//│ ║  l.2: 	let boolToInt x = if x then "0" else 1
//│ ╙──     	                                     ^
//│ boolToInt: bool -> (int | string)

type ('a, 'b) either = Left of 'a | Right of 'b
//│ Defined type alias either[+'a, +'b]
//│ Defined class Left[+'a]
//│ Defined class Right[+'b]
//│ Left: 'a -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

:unify
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ║              	                       ^^^
//│ ╟── this <nested> has type `int`
//│ ╟── this operator application has type `int`
//│ ║  l.28: 	 | Left l -> l + 1
//│ ║        	             ^^^^^
//│ ╟── this match expression has type `int`
//│ ║  l.27: 	let destructEither x = match x with
//│ ║        	                       ^^^^^^^^^^^^
//│ ║  l.28: 	 | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ╟── this match expression has type `bool`
//│ ║  l.27: 	let destructEither x = match x with
//│ ║        	                       ^^^^^^^^^^^^
//│ ║  l.28: 	 | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `bool`
//│ ║  l.29: 	 | Right r -> r && true
//│ ║        	              ^^^^^^^^^^
//│ ╟── this <nested> has type `bool`
//│ ╟── `bool` comes from this type expression
//│ ║  builtin:54: 	let (&&): bool -> bool -> bool
//│ ╙──            	                          ^^^^
//│ destructEither: either[int, bool] -> (bool | int)

:unify
let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ destructEither: bool -> (bool | int)

let succ: int -> int
//│ succ: int -> int

:unify
let test2 x = match x with
 | true -> succ x
//│ test2: nothing -> int

let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit

:unify
f x

:unify
if true then x else y
//│ res: list[int | string]
