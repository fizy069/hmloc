:unify
let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Type `string` does not match `int`
//│ ║  
//│ ╟──        string ---> ?a <--- int 
//│ ║  
//│ ╟── this `then` branch has type `string` and it flows into `?a`
//│ ║  l.2: 	let boolToInt x = if x then "0" else 1
//│ ║       	                            ^^^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.2: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `int` and it flows into `?a`
//│ ║  l.2: 	let boolToInt x = if x then "0" else 1
//│ ╙──     	                                     ^
//│ boolToInt: bool -> (int | string)

type ('a, 'b) either = Left of 'a | Right of 'b
//│ Defined type alias either[+'a, +'b]
//│ Defined class Left[+'a]
//│ Defined class Right[+'b]
//│ Left: 'a -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

:unify
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ║              	                       ^^^
//│ ╟── this operator application has type `int` and it flows into `?a`
//│ ║  l.27: 	 | Left l -> l + 1
//│ ║        	             ^^^^^
//│ ╟── this match expression has type `?a`
//│ ║  l.26: 	let destructEither x = match x with
//│ ║        	                       ^^^^^^^^^^^^
//│ ║  l.27: 	 | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `?a` and it flows from `bool`
//│ ║  l.28: 	 | Right r -> r && true
//│ ║        	              ^^^^^^^^^^
//│ ╟── this type reference has type `bool`
//│ ║  builtin:54: 	let (&&): bool -> bool -> bool
//│ ╙──            	                          ^^^^
//│ destructEither: either[int, bool] -> (bool | int)

:unify
let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ ╔══[ERROR] Type `bool` does not match `(?a, ?b) either`
//│ ║  
//│ ╟──        bool <--- ?c ---> (?a, ?b) either 
//│ ║  
//│ ╟── this if-then-else condition has type `bool` and it flows from `?c`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                          ^
//│ ╟── this variable has type `?c`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this reference has type `?c` and it flows into `(?a, ?b) either`
//│ ║  l.54: 	  match x with
//│ ║        	        ^
//│ ╟── this pattern has type `(?a, ?b) either`
//│ ║  l.55: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ║              	                       ^^^
//│ ╟── this operator application has type `int` and it flows into `?a`
//│ ║  l.55: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── this match expression has type `?a`
//│ ║  l.54: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.55: 	   | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `?a` and it flows from `bool`
//│ ║  l.56: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── this type reference has type `bool`
//│ ║  builtin:54: 	let (&&): bool -> bool -> bool
//│ ╙──            	                          ^^^^
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── `bool` comes from this type expression
//│ ║  builtin:54: 	let (&&): bool -> bool -> bool
//│ ║              	                          ^^^^
//│ ╟── this operator application has type `bool` and it flows into `?a`
//│ ║  l.56: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── this match expression has type `?a`
//│ ║  l.54: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.55: 	   | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `?a` and it flows from `int`
//│ ║  l.55: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── this type reference has type `int`
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ╙──            	                       ^^^
//│ ╔══[ERROR] Type `bool` does not match `(?a, ?b) either`
//│ ║  
//│ ╟──        bool ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ║  
//│ ╟── `bool` comes from this type expression
//│ ║  builtin:54: 	let (&&): bool -> bool -> bool
//│ ║              	                          ^^^^
//│ ╟── this operator application has type `bool`
//│ ║  l.56: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── this match expression has type `bool` and it flows into `?c`
//│ ║  l.54: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.55: 	   | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?c`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.54: 	  match x with ...
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `?c` and it flows from `?d`
//│ ║  l.57: 	  else x
//│ ║        	       ^^
//│ ╟── this variable has type `?d`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this reference has type `?d` and it flows into `(?a, ?b) either`
//│ ║  l.54: 	  match x with
//│ ║        	        ^
//│ ╟── this pattern has type `(?a, ?b) either`
//│ ║  l.55: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `(?a, ?b) either`
//│ ║  
//│ ╟──        int ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ║              	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.55: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── this match expression has type `int` and it flows into `?c`
//│ ║  l.54: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.55: 	   | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?c`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.54: 	  match x with ...
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `?c` and it flows from `?d`
//│ ║  l.57: 	  else x
//│ ║        	       ^^
//│ ╟── this variable has type `?d`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this reference has type `?d` and it flows into `(?a, ?b) either`
//│ ║  l.54: 	  match x with
//│ ║        	        ^
//│ ╟── this pattern has type `(?a, ?b) either`
//│ ║  l.55: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- ?b ---> bool 
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin:16: 	let (+): int -> int -> int
//│ ║              	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.55: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── this match expression has type `int` and it flows into `?a`
//│ ║  l.54: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.55: 	   | Left l -> l + 1 ...
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.54: 	  match x with ...
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `?a` and it flows from `?b`
//│ ║  l.57: 	  else x
//│ ║        	       ^^
//│ ╟── this variable has type `?b`
//│ ║  l.53: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this if-then-else condition has type `?b` and it flows into `bool`
//│ ║  l.53: 	let destructEither x = if x then
//│ ╙──      	                          ^
//│ destructEither: (either[int, bool] & bool) -> (bool | int)

let succ: int -> int
//│ succ: int -> int

:unify
let test2 x = match x with
 | true -> succ x
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool <--- ?a ---> int 
//│ ║  
//│ ╟── this pattern has type `bool`
//│ ║  l.216: 	 | true -> succ x
//│ ║         	   ^^^^
//│ ╟── this reference has type `bool` and it flows from `?a`
//│ ║  l.215: 	let test2 x = match x with
//│ ║         	                    ^
//│ ╟── this variable has type `?a`
//│ ║  l.215: 	let test2 x = match x with
//│ ║         	          ^
//│ ╟── this reference has type `?a` and it flows into `int`
//│ ║  l.216: 	 | true -> succ x
//│ ║         	                ^
//│ ╟── this type reference has type `int`
//│ ║  l.211: 	let succ: int -> int
//│ ╙──       	          ^^^
//│ test2: nothing -> int

let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit

:unify
f x
//│ ╔══[ERROR] Type `int` does not match `string`
//│ ╟── `int` comes from this type expression
//│ ║  l.238: 	let x: int list
//│ ║         	       ^^^
//│ ╟── `int list` comes from this type expression
//│ ║  l.238: 	let x: int list
//│ ║         	       ^^^^^^^^
//│ ╟── this reference has type `int list`
//│ ║  l.246: 	f x
//│ ║         	  ^
//│ ╟── `string list` comes from this type expression
//│ ║  l.240: 	let f: string list -> unit
//│ ║         	       ^^^^^^^^^^^
//│ ╟── `string` comes from this type expression
//│ ║  l.240: 	let f: string list -> unit
//│ ╙──       	       ^^^^^^

:unify
if true then x else y
//│ ╔══[ERROR] Type `int` does not match `string`
//│ ╟── `int` comes from this type expression
//│ ║  l.238: 	let x: int list
//│ ║         	       ^^^
//│ ╟── `int list` comes from this type expression
//│ ║  l.238: 	let x: int list
//│ ║         	       ^^^^^^^^
//│ ╟── this `then` branch has type `int list`
//│ ║  l.265: 	if true then x else y
//│ ║         	             ^
//│ ╟── this if-then-else expression has type `int list`
//│ ║  l.265: 	if true then x else y
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── `string list` comes from this type expression
//│ ║  l.239: 	let y: string list
//│ ║         	       ^^^^^^^^^^^
//│ ╟── `string` comes from this type expression
//│ ║  l.239: 	let y: string list
//│ ╙──       	       ^^^^^^
//│ res: list[int | string]
