:OcamlParser
:OcamlLoadLibrary

:unify
let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Cannot unify string and int
//│ ╟──        string ---> ?a <--- int 
//│ ╟── string is the type of `then` branch
//│ ║  l.5: 	let boolToInt x = if x then "0" else 1
//│ ║       	                            ^^^
//│ ╟── ?a is the type of if-then-else `expression`; string flows here
//│ ║  l.5: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── int is the type of `else` branch; ?a flows here
//│ ║  l.5: 	let boolToInt x = if x then "0" else 1
//│ ╙──     	                                     ^
//│ boolToInt: bool -> (int | string)

type ('a, 'b) either = Left of 'a | Right of 'b
//│ Defined type alias either[+'a, +'b]
//│ Defined class Left[+'a]
//│ Defined class Right[+'b]
//│ Left: 'a -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

:unify
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Cannot unify int and bool
//│ ╟──        int ---> ?a <--- bool 
//│ ╟── int is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── int is the type of operator application
//│ ║  l.28: 	 | Left l -> l + 1
//│ ║        	             ^^^^^
//│ ╟── ?a is the type of match expression; int flows here
//│ ║  l.27: 	let destructEither x = match x with
//│ ║        	                       ^^^^^^^^^^^^
//│ ║  l.28: 	 | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	 | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── bool is the type of operator application; ?a flows here
//│ ║  l.29: 	 | Right r -> r && true
//│ ║        	              ^^^^^^^^^^
//│ ╟── bool is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ╙──      	                          ^^^^
//│ destructEither: either[int, bool] -> (bool | int)

:unify
let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ ╔══[ERROR] Cannot unify bool and (?a, ?b) either
//│ ╟──        bool <--- ?c ---> (?a, ?b) either 
//│ ╟── ?c is the type of if-then-else `condition`; bool flows from here
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                          ^
//│ ╟── (?a, ?b) either is the type of reference; ?c flows into it
//│ ║  l.55: 	  match x with
//│ ║        	        ^
//│ ╟── (?a, ?b) either is the type of case `expression`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Cannot unify int and bool
//│ ╟──        int ---> ?a <--- bool 
//│ ╟── int is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── int is the type of operator application
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── ?a is the type of match expression; int flows here
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── bool is the type of operator application; ?a flows here
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── bool is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ╙──      	                          ^^^^
//│ ╔══[ERROR] Cannot unify bool and int
//│ ╟──        bool ---> ?a <--- int 
//│ ╟── bool is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ║        	                          ^^^^
//│ ╟── bool is the type of operator application
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── ?a is the type of match expression; bool flows here
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── int is the type of operator application; ?a flows here
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── int is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ╙──      	                       ^^^
//│ ╔══[ERROR] Cannot unify bool and (?a, ?b) either
//│ ╟──        bool ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ╟── bool is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ║        	                          ^^^^
//│ ╟── bool is the type of operator application
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── bool is the type of match expression
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?c is the type of if-then-else `expression`; bool flows here
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.55: 	  match x with
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	  else x
//│ ║        	^^^^^^^^^
//│ ╟── ?c is the type of `else` branch; it flows from ?d
//│ ║  l.58: 	  else x
//│ ║        	       ^^
//│ ╟── (?a, ?b) either is the type of reference; ?d flows into it
//│ ║  l.55: 	  match x with
//│ ║        	        ^
//│ ╟── (?a, ?b) either is the type of case `expression`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Cannot unify int and (?a, ?b) either
//│ ╟──        int ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ╟── int is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── int is the type of operator application
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── int is the type of match expression
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?c is the type of if-then-else `expression`; int flows here
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.55: 	  match x with
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	  else x
//│ ║        	^^^^^^^^^
//│ ╟── ?c is the type of `else` branch; it flows from ?d
//│ ║  l.58: 	  else x
//│ ║        	       ^^
//│ ╟── (?a, ?b) either is the type of reference; ?d flows into it
//│ ║  l.55: 	  match x with
//│ ║        	        ^
//│ ╟── (?a, ?b) either is the type of case `expression`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Cannot unify int and bool
//│ ╟──        int ---> ?a <--- ?b ---> bool 
//│ ╟── int is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── int is the type of operator application
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── int is the type of match expression
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── ?a is the type of if-then-else `expression`; int flows here
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.55: 	  match x with
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	  else x
//│ ║        	^^^^^^^^^
//│ ╟── ?a is the type of `else` branch; it flows from ?b
//│ ║  l.58: 	  else x
//│ ║        	       ^^
//│ ╟── bool is the type of if-then-else `condition`; ?b flows into it
//│ ║  l.54: 	let destructEither x = if x then
//│ ╙──      	                          ^
//│ destructEither: (either[int, bool] & bool) -> (bool | int)
