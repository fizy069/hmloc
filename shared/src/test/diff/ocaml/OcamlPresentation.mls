:AllowTypeErrors

let boolToInt x = if x then "0" else 1
//│ [ERROR] Type `int` does not match `string`
//│ 
//│         (int) ---> (?a) <--- (string)
//│ 
//│ ◉ (int) is here
//│ │  - l.1  let boolToInt x = if x then "0" else 1
//│ │                                              ^
//│ │  - l.1  let boolToInt x = if x then "0" else 1
//│ │                           ^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  let boolToInt x = if x then "0" else 1
//│ │                           ^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (string) is here
//│    - l.1  let boolToInt x = if x then "0" else 1
//│                                       ^^^
//│ boolToInt: bool -> (int | string)
//│ U max: 3, total: 4
//│ UERR 1 errors
//│ L: 0 [int ~ string, int <: α68', α68' :> string]



// TODO add Left definition location to pattern type
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - lib. let (&&): bool -> bool -> bool
//│ │                                   ^^^^
//│ │  - l.3   | Right r -> r && true
//│ │                       ^^^^^^^^^^
//│ │  - l.1  let destructEither x = match x with
//│ │                                ^^^^^^^^^^^^
//│ │          | Left l -> l + 1 ...
//│ │          ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  let destructEither x = match x with
//│ │                                ^^^^^^^^^^^^
//│ │          | Left l -> l + 1 ...
//│ │          ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2   | Left l -> l + 1
//│ │                      ^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ destructEither: either[int, bool] -> (bool | int)
//│ U max: 7, total: 8
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α72', α72' :> int]


let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ [ERROR] Type `(_, _) either` does not match `int`
//│ 
//│         ((_, _) either) <--- (?a) ---> (?b) <--- (?c) <--- (int)
//│ 
//│ ◉ ((_, _) either) is here
//│ ▲  - l.3     | Left l -> l + 1
//│ │              ^^^^^^
//│ │  - l.2    match x with
//│ │                 ^
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │  - l.5    else x
//│ │                ^^
//│ │  - l.1  let destructEither x = if x then
//│ │                                ^^^^^^^^^
//│ │           match x with ...
//│ │           ^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let destructEither x = if x then
//│ │                                ^^^^^^^^^
//│ │           match x with ...
//│ │           ^^^^^^^^^^^^^^^^
//│ │  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3     | Left l -> l + 1
//│ │                        ^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - lib. let (&&): bool -> bool -> bool
//│ │                                   ^^^^
//│ │  - l.4     | Right r -> r && true
//│ │                         ^^^^^^^^^
//│ │  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3     | Left l -> l + 1
//│ │                        ^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ [ERROR] Type `bool` does not match `(_, _) either`
//│ 
//│         (bool) <--- (?a) ---> ((_, _) either)
//│ 
//│ ◉ (bool) is here
//│ ▲  - l.1  let destructEither x = if x then
//│ │                                   ^
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │  - l.2    match x with
//│ │                 ^
//│ ▼ 
//│ ◉ ((_, _) either) is here
//│    - l.3     | Left l -> l + 1
//│                ^^^^^^
//│ destructEither: bool -> (bool | int)
//│ U max: 10, total: 16
//│ UERR 3 errors
//│ L: 0 [either['a86','b87'] ~ int, either['a86','b87'] :> α83', α83' <: α84', α84' :> α85', α85' :> int]
//│ L: 0 [bool ~ either['a86','b87'], bool :> α83', α83' <: either['a86','b87']]
//│ L: 0 [bool ~ int, bool <: α85', α85' :> int]

let succ: int -> int
  
let test2 x = match x with
 | true -> succ x
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) <--- (?a) ---> (int)
//│ 
//│ ◉ (bool) is here
//│ ▲  - l.4   | true -> succ x
//│ │            ^^^^
//│ │  - l.3  let test2 x = match x with
//│ │                             ^
//│ │  - l.3  let test2 x = match x with
//│ │                   ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.3  let test2 x = match x with
//│ │                   ^
//│ │  - l.4   | true -> succ x
//│ │                         ^
//│ ▼ 
//│ ◉ (int) is here
//│    - l.1  let succ: int -> int
//│                     ^^^
//│ succ: int -> int
//│ test2: nothing -> int
//│ U max: 3, total: 4
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool :> α97', α97' <: int]

let g x = (not x, (if true then x else 5))
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) <--- (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ ▲  - lib. let not: bool -> bool
//│ │                  ^^^^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │                        ^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │               ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │               ^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │                                         ^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let g x = (not x, (if true then x else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let g x = (not x, (if true then x else 5))
//│                                                  ^
//│ g: (bool & 'a) -> (bool, int | 'a,)
//│ U max: 4, total: 6
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool :> α102', α102' <: α104', α104' :> int]

// Jonathan
let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
  
let conflict x = mkpair (not x) x
//│ confluence: 'a -> (int | 'a)
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)

let test =
  let f x = x in
  (f 1, f true)
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.3    (f 1, f true)
//│ │                   ^^^^
//│ │  - l.2    let f x = x in
//│ │                 ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.2    let f x = x in
//│ │                 ^
//│ │ 
//│ ◉ (int) is here
//│    - l.3    (f 1, f true)
//│                ^
//│ test: (bool | int, bool | int,)
//│ U max: 2, total: 3
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α143', α143' :> int]



let wrap x = x :: []
let rec t = wrap (if true then 1 else t)
//│ wrap: 'a -> list['a]
//│ t: 't
//│   where
//│     't :> list[int | 't]

let rec length ls = match ls with | hd :: tl -> 1 + length tl | [] -> 0
let weird x = (x + 1, length x)
//│ length: list[?] -> int
//│ weird: nothing -> (int, int,)


let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ [ERROR] Type `string` does not match `_ list`
//│ 
//│         (string) <--- (?a) ---> (_ list)
//│ 
//│ ◉ (string) is here
//│ ▲  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                                      ^^^^^^^^^^
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                            ^^
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                 ^^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                 ^^
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                            ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│                                                          ^^
//│ len: nothing -> int
//│ U max: 3, total: 4
//│ UERR 1 errors
//│ L: 0 [string ~ list['a199'], string :> α197', α197' <: list['a199']]
