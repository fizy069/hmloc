:OcamlParser
:OcamlLoadLibrary

:unify
let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Type `string` does not match `int`
//│ ╟──        string ---> ?a <--- int 
//│ ╟── this `then` branch has type `string`
//│ ║  l.5: 	let boolToInt x = if x then "0" else 1
//│ ║       	                            ^^^
//│ ╟── this if-then-else expression has type `?a`; `string` also flows into it
//│ ║  l.5: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `int`; it flows into `?a`
//│ ║  l.5: 	let boolToInt x = if x then "0" else 1
//│ ╙──     	                                     ^
//│ boolToInt: bool -> (int | string)

type ('a, 'b) either = Left of 'a | Right of 'b
//│ Defined type alias either[+'a, +'b]
//│ Defined class Left[+'a]
//│ Defined class Right[+'b]
//│ Left: 'a -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

:unify
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ╟──        int ---> ?a <--- bool 
//│ ╟── `int` is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.28: 	 | Left l -> l + 1
//│ ║        	             ^^^^^
//│ ╟── this match expression has type `?a`; `int` also flows into it
//│ ║  l.27: 	let destructEither x = match x with
//│ ║        	                       ^^^^^^^^^^^^
//│ ║  l.28: 	 | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	 | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `bool`; it flows into `?a`
//│ ║  l.29: 	 | Right r -> r && true
//│ ║        	              ^^^^^^^^^^
//│ ╟── `bool` is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ╙──      	                          ^^^^
//│ destructEither: either[int, bool] -> (bool | int)

:unify
let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ ╔══[ERROR] Type `bool` does not match `(?a, ?b) either`
//│ ╟──        bool <--- ?c ---> (?a, ?b) either 
//│ ╟── this if-then-else condition has type `bool`
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                          ^
//│ ╟── this variable has type `?c`; `bool` flows from it
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this reference has type `(?a, ?b) either`; `?c` also flows into it
//│ ║  l.55: 	  match x with
//│ ║        	        ^
//│ ╟── this case `expression` has type `(?a, ?b) either`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ╟──        int ---> ?a <--- bool 
//│ ╟── `int` is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── this match expression has type `?a`; `int` also flows into it
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `bool`; it flows into `?a`
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── `bool` is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ╙──      	                          ^^^^
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ╟──        bool ---> ?a <--- int 
//│ ╟── `bool` is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ║        	                          ^^^^
//│ ╟── this operator application has type `bool`
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── this match expression has type `?a`; `bool` also flows into it
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `int`; it flows into `?a`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── `int` is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ╙──      	                       ^^^
//│ ╔══[ERROR] Type `bool` does not match `(?a, ?b) either`
//│ ╟──        bool ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ╟── `bool` is here
//│ ║  l.54: 	let (&&): bool -> bool -> bool
//│ ║        	                          ^^^^
//│ ╟── this operator application has type `bool`
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	                ^^^^^^^^^
//│ ╟── this match expression has type `bool`
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?c`; `bool` also flows into it
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.55: 	  match x with
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	  else x
//│ ║        	^^^^^^^^^
//│ ╟── this `else` branch has type `?c`
//│ ║  l.58: 	  else x
//│ ║        	       ^^
//│ ╟── this variable has type `?c`; it flows from `?d`
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this reference has type `(?a, ?b) either`; `?d` also flows into it
//│ ║  l.55: 	  match x with
//│ ║        	        ^
//│ ╟── this case `expression` has type `(?a, ?b) either`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `(?a, ?b) either`
//│ ╟──        int ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ╟── `int` is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── this match expression has type `int`
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?c`; `int` also flows into it
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.55: 	  match x with
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	  else x
//│ ║        	^^^^^^^^^
//│ ╟── this `else` branch has type `?c`
//│ ║  l.58: 	  else x
//│ ║        	       ^^
//│ ╟── this variable has type `?c`; it flows from `?d`
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this reference has type `(?a, ?b) either`; `?d` also flows into it
//│ ║  l.55: 	  match x with
//│ ║        	        ^
//│ ╟── this case `expression` has type `(?a, ?b) either`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ╙──      	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ╟──        int ---> ?a <--- ?b ---> bool 
//│ ╟── `int` is here
//│ ║  l.16: 	let (+): int -> int -> int
//│ ║        	                       ^^^
//│ ╟── this operator application has type `int`
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	               ^^^^^
//│ ╟── this match expression has type `int`
//│ ║  l.55: 	  match x with
//│ ║        	  ^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a`; `int` also flows into it
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                       ^^^^^^^^^
//│ ║  l.55: 	  match x with
//│ ║        	^^^^^^^^^^^^^^
//│ ║  l.56: 	   | Left l -> l + 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.57: 	   | Right r -> r && true
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.58: 	  else x
//│ ║        	^^^^^^^^^
//│ ╟── this `else` branch has type `?a`
//│ ║  l.58: 	  else x
//│ ║        	       ^^
//│ ╟── this variable has type `?a`; it flows from `?b`
//│ ║  l.54: 	let destructEither x = if x then
//│ ║        	                   ^
//│ ╟── this if-then-else condition has type `bool`; `?b` also flows into it
//│ ║  l.54: 	let destructEither x = if x then
//│ ╙──      	                          ^
//│ destructEither: (either[int, bool] & bool) -> (bool | int)

:unify
let succ: int -> int
let test2 x = match x with
 | true -> succ x
//│ succ: int -> int
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ╟──        bool <--- ?a ---> int 
//│ ╟── this case `expression` has type `bool`
//│ ║  l.231: 	 | true -> succ x
//│ ║         	   ^^^^
//│ ╟── this reference has type `bool`
//│ ║  l.230: 	let test2 x = match x with
//│ ║         	                    ^
//│ ╟── this variable has type `?a`; `bool` flows from it
//│ ║  l.230: 	let test2 x = match x with
//│ ║         	          ^
//│ ╟── this reference has type `int`; `?a` also flows into it
//│ ║  l.231: 	 | true -> succ x
//│ ║         	                ^
//│ ╟── `int` is here
//│ ║  l.229: 	let succ: int -> int
//│ ╙──       	          ^^^
//│ test2: nothing -> int

let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit

:unify
f x
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.260: 	f x
//│ ║         	^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.252: 	let x: int list
//│ ║         	       ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.254: 	let f: string list -> unit
//│ ╙──       	       ^^^^^^
//│ ╔══[ERROR] Type `int` does not match `string`
//│ ╟── type `int` is here
//│ ║  l.252: 	let x: int list
//│ ║         	       ^^^
//│ ╟── type `int list` is here
//│ ║  l.252: 	let x: int list
//│ ║         	       ^^^^^^^^
//│ ╟── this reference has type `int list`
//│ ║  l.260: 	f x
//│ ║         	  ^
//│ ╟── this reference has type `string list -> unit`
//│ ║  l.260: 	f x
//│ ║         	^
//│ ╟── type `string list -> unit` is here
//│ ║  l.254: 	let f: string list -> unit
//│ ║         	       ^^^^^^^^^^^^^^^^^^^
//│ ╟── type `string list` is here
//│ ║  l.254: 	let f: string list -> unit
//│ ║         	       ^^^^^^^^^^^
//│ ╟── type `string` is here
//│ ║  l.254: 	let f: string list -> unit
//│ ╙──       	       ^^^^^^

:unifyDbg
:d
if true then x else y
//│ 0. Typing term if true(true) then x then (false) then y
//│ | If(Var(true), List(IfThen(Var(true), Var(x), IfThen(Var(false), Var(y)))
//│ | 0. Typing term true
//│ | 0. : [Bool]
//│ | CONSTRAIN [Bool] <! Bool
//│ |   where 
//│ | C [Bool] <! Bool    (0) where ProvType <: TypeRef}
//│ | UT [Bool] <: Bool len: 1 
//│ | | U [Bool] = Bool because lb([Bool] <: Bool) skipCache
//│ | 0. Typing term x
//│ | 0. : [list[Int]]
//│ | CONSTRAIN [list[Int]] <! α113
//│ |   where 
//│ | C [list[Int]] <! α113    (0) where ProvType <: TypeVariable}
//│ | | C list[Int] <! α113    (0) where TypeRef <: TypeVariable}
//│ | UT [list[Int]] <: α113 len: 3 
//│ | | UT  list[Int] with
//│ | | UT  α113 += (list[Int],List(lb(list[Int] <: α113)))
//│ | 0. Typing term y
//│ | 0. : [list[String]]
//│ | CONSTRAIN [list[String]] <! α113
//│ |   where 
//│ 		α113 :> [[[list[Int]]]]
//│ | C [list[String]] <! α113    (0) where ProvType <: TypeVariable}
//│ | | C list[String] <! α113    (0) where TypeRef <: TypeVariable}
//│ | UT [list[String]] <: α113 len: 3 
//│ | | UT  list[String] with
//│ | | UT  α113 :> list[Int] for lb(list[Int] <: α113)
//│ | | U [[[list[Int]]]] = list[String] because lb(list[Int] <: α113), lb(list[String] <: α113) ()
//│ | | | UT Int <: String len: 2 nested: [[[list[Int]]]] = list[String] because lb(list[Int] <: α113),lb(list[String] <: α113)
//│ | | | | U Int = String because lb(Int <: String) skipCache
//│ | | | | | UERR  Int = String because lb(Int <: String)
//│ | | UT  α113 += (list[String],List(lb(list[String] <: α113)))
//│ 0. : α113
//│ ⬤ Typed as: α113
//│  where: 
//│ 		α113 :> [[[list[String]]]] | [[[list[Int]]]]
//│ unified α113 with:
//│   list[String]: lb(list[String] <: α113)
//│   list[Int]: lb(list[Int] <: α113)
//│ ╔══[ERROR] Type `int` does not match `string`
//│ ╟── type `int` is here
//│ ║  l.252: 	let x: int list
//│ ║         	       ^^^
//│ ╟── type `int list` is here
//│ ║  l.252: 	let x: int list
//│ ║         	       ^^^^^^^^
//│ ╟── type `int list` is here
//│ ║  l.252: 	let x: int list
//│ ║         	       ^^^^^^^^
//│ ╟── this `then` branch has type `int list`
//│ ║  l.295: 	if true then x else y
//│ ║         	             ^
//│ ╟── this if-then-else expression has type `int list`
//│ ║  l.295: 	if true then x else y
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `string list` is here
//│ ║  l.253: 	let y: string list
//│ ║         	       ^^^^^^^^^^^
//│ ╟── type `string` is here
//│ ║  l.253: 	let y: string list
//│ ╙──       	       ^^^^^^
//│ res: list[int | string]
