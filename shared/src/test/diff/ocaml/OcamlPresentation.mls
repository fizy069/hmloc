:AllowTypeErrors

let boolToInt x = if x then "0" else 1
//│ [ERROR] Type `int` does not match `string`
//│ 
//│         (int) ---> (?a) <--- (string)
//│ 
//│ ◉ (int) is here
//│ │  - l.1  let boolToInt x = if x then "0" else 1
//│ │                                              ^
//│ │  - l.1  let boolToInt x = if x then "0" else 1
//│ │                           ^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  let boolToInt x = if x then "0" else 1
//│ │                           ^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (string) is here
//│    - l.1  let boolToInt x = if x then "0" else 1
//│                                       ^^^
//│ boolToInt: bool -> (int | string)
//│ boolToInt: bool -> 'a
//│   where
//│     'a = int, string
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [int ~ string, int <: α68', α68' :> string]



// TODO add Left definition location to pattern type
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - lib. let (&&): bool -> bool -> bool
//│ │                                   ^^^^
//│ │  - l.3   | Right r -> r && true
//│ │                       ^^^^^^^^^^
//│ │  - l.1  let destructEither x = match x with
//│ │                                ^^^^^^^^^^^^
//│ │          | Left l -> l + 1 ...
//│ │          ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  let destructEither x = match x with
//│ │                                ^^^^^^^^^^^^
//│ │          | Left l -> l + 1 ...
//│ │          ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2   | Left l -> l + 1
//│ │                      ^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ destructEither: either[int, bool] -> (bool | int)
//│ destructEither: either[int, bool] -> 'a
//│   where
//│     'a = bool, int
//│ U max: 1, total: 8
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α72', α72' :> int]


let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - lib. let (&&): bool -> bool -> bool
//│ │                                   ^^^^
//│ │  - l.4     | Right r -> r && true
//│ │                         ^^^^^^^^^
//│ │  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3     | Left l -> l + 1
//│ │                        ^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ [ERROR] Type `bool` does not match `(_, _) either`
//│ 
//│         (bool) <--- (?a) ---> ((_, _) either)
//│ 
//│ ◉ (bool) is here
//│ ▲  - l.1  let destructEither x = if x then
//│ │                                   ^
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │  - l.2    match x with
//│ │                 ^
//│ ▼ 
//│ ◉ ((_, _) either) is here
//│    - l.3     | Left l -> l + 1
//│                ^^^^^^
//│ [ERROR] Type `(_, _) either` does not match `int`
//│ 
//│         ((_, _) either) <--- (?a) ---> (?b) <--- (?c) <--- (int)
//│ 
//│ ◉ ((_, _) either) is here
//│ ▲  - l.3     | Left l -> l + 1
//│ │              ^^^^^^
//│ │  - l.2    match x with
//│ │                 ^
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let destructEither x = if x then
//│ │                            ^
//│ │  - l.5    else x
//│ │                ^^
//│ │  - l.1  let destructEither x = if x then
//│ │                                ^^^^^^^^^
//│ │           match x with ...
//│ │           ^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let destructEither x = if x then
//│ │                                ^^^^^^^^^
//│ │           match x with ...
//│ │           ^^^^^^^^^^^^^^^^
//│ │  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (?c) is assumed here
//│ ▲  - l.2    match x with
//│ │           ^^^^^^^^^^^^
//│ │            | Left l -> l + 1 ...
//│ │            ^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.3     | Left l -> l + 1
//│ │                        ^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                                  ^^^
//│ destructEither: (either[int, bool] & bool) -> (bool | int)
//│ destructEither: 'a -> 'a
//│   where
//│     'a = either[int, bool], bool
//│ U max: 2, total: 17
//│ UERR 3 errors
//│ L: 0 [either['a86','b87'] ~ int, either['a86','b87'] :> α83', α83' <: α84', α84' :> α85', α85' :> int]
//│ L: 0 [bool ~ either['a86','b87'], bool :> α83', α83' <: either['a86','b87']]
//│ L: 0 [bool ~ int, bool <: α85', α85' :> int]

let succ: int -> int
  
let test2 x = match x with
 | true -> succ x
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) <--- (?a) ---> (int)
//│ 
//│ ◉ (bool) is here
//│ ▲  - l.4   | true -> succ x
//│ │            ^^^^
//│ │  - l.3  let test2 x = match x with
//│ │                             ^
//│ │  - l.3  let test2 x = match x with
//│ │                   ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.3  let test2 x = match x with
//│ │                   ^
//│ │  - l.4   | true -> succ x
//│ │                         ^
//│ ▼ 
//│ ◉ (int) is here
//│    - l.1  let succ: int -> int
//│                     ^^^
//│ succ: int -> int
//│ succ: int -> int
//│ test2: (int & bool) -> int
//│ test2: 'a -> int
//│   where
//│     'a = int, bool
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool :> α98', α98' <: int]

let g x = (not x, (if true then x else 5))
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?a) <--- (?b) ---> (bool)
//│ 
//│ ◉ (int) is here
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │                                                ^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.1  let g x = (not x, (if true then x else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │                                         ^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │               ^
//│ │ 
//│ ◉ (?b) is assumed here
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │               ^
//│ │  - l.1  let g x = (not x, (if true then x else 5))
//│ │                        ^
//│ ▼ 
//│ ◉ (bool) is here
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ g: ('a & bool) -> (bool, 'a,)
//│ g: 'a -> (bool, 'a,)
//│   where
//│     'a = int, bool
//│ U max: 2, total: 7
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: α105', α105' :> α103', α103' <: bool]

// Jonathan
let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
  
let conflict x = mkpair (not x) x
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) <--- (?a) ---> (?b) ---> (?c) ---> (?d) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ ▲  - lib. let not: bool -> bool
//│ │                  ^^^^
//│ │  - l.4  let conflict x = mkpair (not x) x
//│ │                                      ^
//│ │  - l.4  let conflict x = mkpair (not x) x
//│ │                      ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.4  let conflict x = mkpair (not x) x
//│ │                      ^
//│ │  - l.4  let conflict x = mkpair (not x) x
//│ │                                         ^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ │  - l.2  let mkpair x y = (x, confluence y)
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?c) is assumed here
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed here
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: 'a -> (int | 'a)
//│ confluence: int -> int
//│ mkpair: 'a -> anything -> ('a, anything,)
//│ mkpair: 'a -> 'b -> ('a, int,)
//│ conflict: ('a & bool) -> (anything, 'a,)
//│ conflict: bool -> (bool, 'a,)
//│   where
//│     'a = bool, int
//│ U max: 2, total: 12
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool :> α132', α132' <: α134', α134' <: α136', α136' <: α135', α135' :> int]

let test =
  let f x = x in
  (f 1, f true)
//│ test: (anything, anything,)
//│ test: (int, bool,)



let wrap x = x :: []
let rec t = wrap (if true then 1 else t)
//│ wrap: 'a -> list['a]
//│ wrap: 'a -> list['a]
//│ t: 't
//│   where
//│     't :> list['t | int]
//│ t: int

// TODO weird unification error investigate
let rec length ls = match ls with | hd :: tl -> 1 + length tl | [] -> 0
let weird x = (x + 1, length x)
//│ [ERROR] Type `_ list` does not match `int`
//│ 
//│         (_ list) ~~~~ (?a) ---> (int)
//│ 
//│   ◉ (_ list -> _) is here
//│   ▲  - l.1  let rec length ls = match ls with | hd :: tl -> 1 + length tl | [] -> 0
//│   │                                                             ^^^^^^
//│   │  - l.1  let rec length ls = match ls with | hd :: tl -> 1 + length tl | [] -> 0
//│   │                 ^^^^^^
//│   │ 
//│   ◉ (?length) is assumed here
//│   │  - l.1  let rec length ls = match ls with | hd :: tl -> 1 + length tl | [] -> 0
//│   │                 ^^^^^^
//│   ▼ 
//│   ◉ (?a -> _) is here
//│      - l.2  let weird x = (x + 1, length x)
//│                                   ^^^^^^
//│ ◉ (?a) is assumed here
//│ │  - l.2  let weird x = (x + 1, length x)
//│ │                   ^
//│ │  - l.2  let weird x = (x + 1, length x)
//│ │                        ^
//│ ▼ 
//│ ◉ (int) is here
//│    - lib. let (+): int -> int -> int
//│                    ^^^
//│ length: list[?] -> int
//│ length: list['a] -> int
//│ weird: (list[?] & int) -> (anything, anything,)
//│ weird: 'b -> (int, int,)
//│   where
//│     'b = list['a], int
//│ U max: 2, total: 14
//│ UERR 1 errors
//│ L: 1 [list['a198'] ~ int, [list['a198'] - ([list['a198']] -> α200') ~ ([α193'] -> α202') - α193', L: 0 [([list['a198']] -> α200') ~ ([α193'] -> α202'), ([list['a198']] -> α200') :> length196', length196' <: ([α193'] -> α202')]], α193' <: int]


let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ [ERROR] Type `string` does not match `_ list`
//│ 
//│         (string) <--- (?a) ---> (_ list)
//│ 
//│ ◉ (string) is here
//│ ▲  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                                      ^^^^^^^^^^
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                            ^^
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                 ^^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                 ^^
//│ │  - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│ │                            ^^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - l.1  let len ls = match ls with | "hd :: tl" -> 1 | [] -> 0
//│                                                          ^^
//│ len: (list[?] & string) -> int
//│ len: 'b -> int
//│   where
//│     'b = list['a], string
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [string ~ list['a211'], string :> α209', α209' <: list['a211']]
