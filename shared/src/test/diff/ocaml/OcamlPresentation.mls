:AllowTypeErrors

let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Type `int` does not match `string`
//│ ║  
//│ ╟──        int ---> ?a <--- string 
//│ ║  
//│ ╟── [`int`] comes from this `else` branch and it flows into `?a`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ║       	                                     ^
//│ ╟── [`?a`] comes from this if-then-else expression
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── [`string`] comes from this `then` branch and it flows into `?a`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ╙──     	                            ^^^
//│ boolToInt: bool -> (int | string)



// TODO add Left definition location to pattern type
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── [`bool`] comes from this type expression
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ║           	                          ^^^^
//│ ╟── so this operator application has type `bool` and it flows into `?a`
//│ ║  l.3: 	 | Right r -> r && true
//│ ║       	              ^^^^^^^^^^
//│ ╟── [`?a`] comes from this match expression
//│ ║  l.1: 	let destructEither x = match x with
//│ ║       	                       ^^^^^^^^^^^^
//│ ║  l.2: 	 | Left l -> l + 1 ...
//│ ║       	 ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── so this operator application has type `?a`. However `int` flows into `?a`
//│ ║  l.2: 	 | Left l -> l + 1
//│ ║       	             ^^^^^
//│ ╟── [`int`] comes from this type reference
//│ ║  builtin: 	let (+): int -> int -> int
//│ ╙──         	                       ^^^
//│ destructEither: either[int, bool] -> (bool | int)


let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ ╔══[ERROR] Type `(?a, ?b) either` does not match `bool`
//│ ║  
//│ ╟──        (?a, ?b) either <--- ?c ---> bool 
//│ ║  
//│ ╟── [`(?a, ?b) either`] comes from this pattern
//│ ║  l.3: 	   | Left l -> l + 1
//│ ║       	     ^^^^
//│ ╟── so this reference has type `(?a, ?b) either`. However `?c` flows into `(?a, ?b) either`
//│ ║  l.2: 	  match x with
//│ ║       	        ^
//│ ╟── [`?c`] comes from this variable
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                   ^
//│ ╟── [`?c`] comes from this if-then-else condition and it flows into `bool`
//│ ║  l.1: 	let destructEither x = if x then
//│ ╙──     	                          ^
//│ ╔══[ERROR] Type `int` does not match `(?a, ?b) either`
//│ ║  
//│ ╟──        int ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ║  
//│ ╟── [`int`] comes from this type expression
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── so this operator application has type `int`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ║       	               ^^^^^
//│ ╟── so this match expression has type `int` and it flows into `?c`
//│ ║  l.2: 	  match x with
//│ ║       	  ^^^^^^^^^^^^
//│ ║  l.3: 	   | Left l -> l + 1 ...
//│ ║       	   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── [`?c`] comes from this if-then-else expression
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                       ^^^^^^^^^
//│ ║  l.2: 	  match x with ...
//│ ║       	  ^^^^^^^^^^^^^^^^
//│ ╟── so this `else` branch has type `?c`. However `?d` flows into `?c`
//│ ║  l.5: 	  else x
//│ ║       	       ^^
//│ ╟── [`?d`] comes from this variable
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                   ^
//│ ╟── so this reference has type `?d` and it flows into `(?a, ?b) either`
//│ ║  l.2: 	  match x with
//│ ║       	        ^
//│ ╟── [`(?a, ?b) either`] comes from this pattern
//│ ║  l.3: 	   | Left l -> l + 1
//│ ╙──     	     ^^^^
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── [`int`] comes from this type expression
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── so this operator application has type `int` and it flows into `?a`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ║       	               ^^^^^
//│ ╟── [`?a`] comes from this match expression
//│ ║  l.2: 	  match x with
//│ ║       	  ^^^^^^^^^^^^
//│ ║  l.3: 	   | Left l -> l + 1 ...
//│ ║       	   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── so this operator application has type `?a`. However `bool` flows into `?a`
//│ ║  l.4: 	   | Right r -> r && true
//│ ║       	                ^^^^^^^^^
//│ ╟── [`bool`] comes from this type reference
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ╙──         	                          ^^^^
//│ ╔══[ERROR] Type `bool` does not match `(?a, ?b) either`
//│ ║  
//│ ╟──        bool ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ║  
//│ ╟── [`bool`] comes from this type expression
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ║           	                          ^^^^
//│ ╟── so this operator application has type `bool`
//│ ║  l.4: 	   | Right r -> r && true
//│ ║       	                ^^^^^^^^^
//│ ╟── so this match expression has type `bool` and it flows into `?c`
//│ ║  l.2: 	  match x with
//│ ║       	  ^^^^^^^^^^^^
//│ ║  l.3: 	   | Left l -> l + 1 ...
//│ ║       	   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── [`?c`] comes from this if-then-else expression
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                       ^^^^^^^^^
//│ ║  l.2: 	  match x with ...
//│ ║       	  ^^^^^^^^^^^^^^^^
//│ ╟── so this `else` branch has type `?c`. However `?d` flows into `?c`
//│ ║  l.5: 	  else x
//│ ║       	       ^^
//│ ╟── [`?d`] comes from this variable
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                   ^
//│ ╟── so this reference has type `?d` and it flows into `(?a, ?b) either`
//│ ║  l.2: 	  match x with
//│ ║       	        ^
//│ ╟── [`(?a, ?b) either`] comes from this pattern
//│ ║  l.3: 	   | Left l -> l + 1
//│ ╙──     	     ^^^^
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── [`bool`] comes from this type expression
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ║           	                          ^^^^
//│ ╟── so this operator application has type `bool` and it flows into `?a`
//│ ║  l.4: 	   | Right r -> r && true
//│ ║       	                ^^^^^^^^^
//│ ╟── [`?a`] comes from this match expression
//│ ║  l.2: 	  match x with
//│ ║       	  ^^^^^^^^^^^^
//│ ║  l.3: 	   | Left l -> l + 1 ...
//│ ║       	   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── so this operator application has type `?a`. However `int` flows into `?a`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ║       	               ^^^^^
//│ ╟── [`int`] comes from this type reference
//│ ║  builtin: 	let (+): int -> int -> int
//│ ╙──         	                       ^^^
//│ destructEither: bool -> (bool | int)

let succ: int -> int
  
let test2 x = match x with
 | true -> succ x
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int <--- ?a ---> bool 
//│ ║  
//│ ╟── [`int`] comes from this type expression
//│ ║  l.1: 	let succ: int -> int
//│ ║       	          ^^^
//│ ╟── so this reference has type `int`. However `?a` flows into `int`
//│ ║  l.4: 	 | true -> succ x
//│ ║       	                ^
//│ ╟── [`?a`] comes from this variable
//│ ║  l.3: 	let test2 x = match x with
//│ ║       	          ^
//│ ╟── so this reference has type `?a` and it flows into `bool`
//│ ║  l.3: 	let test2 x = match x with
//│ ║       	                    ^
//│ ╟── [`bool`] comes from this pattern
//│ ║  l.4: 	 | true -> succ x
//│ ╙──     	   ^^^^
//│ succ: int -> int
//│ test2: nothing -> int

let g x = (not x, (if true then x else 5))
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- ?b ---> bool 
//│ ║  
//│ ╟── [`int`] comes from this `else` branch and it flows into `?a`
//│ ║  l.1: 	let g x = (not x, (if true then x else 5))
//│ ║       	                                       ^
//│ ╟── [`?a`] comes from this if-then-else expression
//│ ║  l.1: 	let g x = (not x, (if true then x else 5))
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── so this `then` branch has type `?a`. However `?b` flows into `?a`
//│ ║  l.1: 	let g x = (not x, (if true then x else 5))
//│ ║       	                                ^
//│ ╟── [`?b`] comes from this variable
//│ ║  l.1: 	let g x = (not x, (if true then x else 5))
//│ ║       	      ^
//│ ╟── so this reference has type `?b` and it flows into `bool`
//│ ║  l.1: 	let g x = (not x, (if true then x else 5))
//│ ║       	               ^
//│ ╟── [`bool`] comes from this type reference
//│ ║  builtin: 	let not: bool -> bool
//│ ╙──         	         ^^^^
//│ g: (bool & 'a) -> (bool, int | 'a,)

// Jonathan
let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
  
let conflict x = mkpair (not x) x
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- ?b ---> bool 
//│ ║  
//│ ╟── [`int`] comes from this `else` branch and it flows into `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                                       ^
//│ ╟── [`?a`] comes from this if-then-else expression
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                   ^^^^^^^^^^^^^^^^^^^^^
//│ ╟── so this `then` branch has type `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	                                ^
//│ ╟── so this variable has type `?a`
//│ ║  l.1: 	let confluence z = if true then z else 5
//│ ║       	               ^
//│ ╟── so this reference has type `?a`
//│ ║  l.2: 	let mkpair x y = (x, confluence y)
//│ ║       	                                ^
//│ ╟── so this variable has type `?a`
//│ ║  l.2: 	let mkpair x y = (x, confluence y)
//│ ║       	             ^
//│ ╟── so this reference has type `?a`. However `?b` flows into `?a`
//│ ║  l.4: 	let conflict x = mkpair (not x) x
//│ ║       	                                ^
//│ ╟── [`?b`] comes from this variable
//│ ║  l.4: 	let conflict x = mkpair (not x) x
//│ ║       	             ^
//│ ╟── so this reference has type `?b` and it flows into `bool`
//│ ║  l.4: 	let conflict x = mkpair (not x) x
//│ ║       	                             ^
//│ ╟── [`bool`] comes from this type reference
//│ ║  builtin: 	let not: bool -> bool
//│ ╙──         	         ^^^^
//│ confluence: 'a -> (int | 'a)
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)

let test =
  let f x = x in
  (f 1, f true)
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool ---> ?a <--- int 
//│ ║  
//│ ╟── [`bool`] comes from this reference and it flows into `?a`
//│ ║  l.3: 	  (f 1, f true)
//│ ║       	          ^^^^
//│ ╟── [`?a`] comes from this variable
//│ ║  l.2: 	  let f x = x in
//│ ║       	        ^
//│ ╟── [`int`] comes from this integer literal and it flows into `?a`
//│ ║  l.3: 	  (f 1, f true)
//│ ╙──     	     ^
//│ test: (bool | int, bool | int,)


// TODO: deduplicate errors
let wrap x = x :: []
let rec t = wrap (if true then 1 else t)
//│ ╔══[ERROR] Type `int` does not match `?a list`
//│ ║  
//│ ╟──        int ---> ?b <--- ?a list 
//│ ║  
//│ ╟── [`int`] comes from this `then` branch and it flows into `?b`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	                               ^
//│ ╟── [`?b`] comes from this if-then-else expression
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── so this `else` branch has type `?a`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	                                      ^
//│ ╟── so this recursive binding has type `?a`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	        ^
//│ ╟── so this application has type `?a`. However `?a list` flows into `?a`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── [`?a list`] comes from this application
//│ ║  l.1: 	let wrap x = x :: []
//│ ╙──     	             ^^^^^^^
//│ ╔══[ERROR] Type `?a list` does not match `int`
//│ ║  
//│ ╟──        ?a list ---> ?b <--- int 
//│ ║  
//│ ╟── [`?a list`] comes from this application
//│ ║  l.1: 	let wrap x = x :: []
//│ ║       	             ^^^^^^^
//│ ╟── so this application has type `?a list`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── so this recursive binding has type `?a list`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	        ^
//│ ╟── so this `else` branch has type `?a list` and it flows into `?b`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	                                      ^
//│ ╟── [`?b`] comes from this if-then-else expression
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ║       	                 ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── [`int`] comes from this `then` branch and it flows into `?b`
//│ ║  l.2: 	let rec t = wrap (if true then 1 else t)
//│ ╙──     	                               ^
//│ wrap: 'a -> list['a]
//│ t: 't
//│   where
//│     't :> list[int | 't]
