:unify
let boolToInt x = if x then "0" else 1
//│ ╔══[ERROR] Type `int` does not match `string`
//│ ║  
//│ ╟──        int ---> ?a <--- string 
//│ ║  
//│ ╟── this `else` branch has type `int` and it flows into `?a`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ║       	                                     ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `string` and it flows into `?a`
//│ ║  l.1: 	let boolToInt x = if x then "0" else 1
//│ ╙──     	                            ^^^
//│ boolToInt: bool -> (int | string)

type ('a, 'b) either = Left of 'a | Right of 'b
//│ Defined type alias either[+'a, +'b]
//│ Defined class Left[+'a]
//│ Defined class Right[+'b]
//│ Left: 'a -> either['a, nothing]
//│ Right: 'a -> either[nothing, 'a]

:e
Left 1 : int
//│ ╔══[ERROR] Type `(?a, ?b) either` does not match `int`
//│ ║  
//│ ╟── `(?a, ?b) either` comes from this type expression
//│ ║  l.-7: 	type ('a, 'b) either = Left of 'a | Right of 'b
//│ ║        	                       ^^^^^^^^^^
//│ ╟── this application has type `(?a, ?b) either`
//│ ║  l.1: 	Left 1 : int
//│ ║       	^^^^^^
//│ ╟── `int` comes from this type expression
//│ ║  l.1: 	Left 1 : int
//│ ╙──     	         ^^^
//│ res: int

// TODO add Left definition location to pattern type
:unify
let destructEither x = match x with
 | Left l -> l + 1
 | Right r -> r && true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── `int` comes from this type expression and it flows into `?a`
//│ ║  builtin: 	let (+): int -> int -> int
//│ ║           	                       ^^^
//│ ╟── this operator application has type `?a`
//│ ║  l.2: 	 | Left l -> l + 1
//│ ║       	             ^^^^^
//│ ╟── this match expression has type `?b`
//│ ║  l.1: 	let destructEither x = match x with
//│ ║       	                       ^^^^^^^^^^^^
//│ ║  l.2: 	 | Left l -> l + 1 ...
//│ ║       	^^^^^^^^^^^^^^^^^^
//│ ╟── this operator application has type `?b` and it flows from `bool`
//│ ║  l.3: 	 | Right r -> r && true
//│ ║       	              ^^^^^^^^^^
//│ ╟── this type reference has type `bool`
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ╙──         	                          ^^^^
//│ destructEither: either[int, bool] -> (bool | int)

:unify // TODO unnecessary errors reported
let destructEither x = if x then
  match x with
   | Left l -> l + 1
   | Right r -> r && true
  else x
//│ ╔══[ERROR] Type `bool` does not match `(?a, ?b) either`
//│ ║  
//│ ╟──        bool ---> ?c <--- ?d ---> (?a, ?b) either 
//│ ║  
//│ ╟── `bool` comes from this type expression
//│ ║  builtin: 	let (&&): bool -> bool -> bool
//│ ║           	                          ^^^^
//│ ╟── this operator application has type `bool`
//│ ║  l.4: 	   | Right r -> r && true
//│ ║       	                ^^^^^^^^^
//│ ╟── this match expression has type `bool` and it flows into `?c`
//│ ║  l.2: 	  match x with
//│ ║       	  ^^^^^^^^^^^^
//│ ║  l.3: 	   | Left l -> l + 1 ...
//│ ║       	^^^^^^^^^^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?c`
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                       ^^^^^^^^^
//│ ║  l.2: 	  match x with ...
//│ ║       	^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `?c` and it flows from `?d`
//│ ║  l.5: 	  else x
//│ ║       	       ^^
//│ ╟── this variable has type `?d`
//│ ║  l.1: 	let destructEither x = if x then
//│ ║       	                   ^
//│ ╟── this reference has type `?d` and it flows into `(?a, ?b) either`
//│ ║  l.2: 	  match x with
//│ ║       	        ^
//│ ╟── this pattern has type `(?a, ?b) either`
//│ ║  l.3: 	   | Left l -> l + 1
//│ ╙──     	     ^^^^
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
//│ 	at: scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)
//│ 	at: mlscript.UnificationSolver.makeMessagesUR$1(UnificationSolver.scala:244)
//│ 	at: mlscript.UnificationSolver.createErrorMessage(UnificationSolver.scala:275)
//│ 	at: mlscript.UnificationSolver.createErrorMessage$(UnificationSolver.scala:179)
//│ 	at: mlscript.TypeDefs.createErrorMessage(TypeDefs.scala:11)
//│ 	at: mlscript.UnificationSolver$$anonfun$1.applyOrElse(UnificationSolver.scala:169)
//│ 	at: mlscript.UnificationSolver$$anonfun$1.applyOrElse(UnificationSolver.scala:168)
//│ 	at: scala.collection.Iterator$$anon$7.hasNext(Iterator.scala:525)
//│ 	at: scala.collection.immutable.List.prependedAll(List.scala:152)
//│ 	at: scala.collection.IterableOnceOps.toList(IterableOnce.scala:1288)

let succ: int -> int
//│ succ: int -> int

:unify
let test2 x = match x with
 | true -> succ x
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int <--- ?a ---> bool 
//│ ║  
//│ ╟── `int` comes from this type expression and it flows from `?a`
//│ ║  l.-3: 	let succ: int -> int
//│ ║        	          ^^^
//│ ╟── this function argument has type `?a`
//│ ║  l.2: 	 | true -> succ x
//│ ║       	                ^
//│ ╟── this variable has type `?b`
//│ ║  l.1: 	let test2 x = match x with
//│ ║       	          ^
//│ ╟── this reference has type `?b` and it flows into `bool`
//│ ║  l.1: 	let test2 x = match x with
//│ ║       	                    ^
//│ ╟── this pattern has type `bool`
//│ ║  l.2: 	 | true -> succ x
//│ ╙──     	   ^^^^
//│ test2: nothing -> int

let x: int list
let y: string list
let f: string list -> unit
//│ x: list[int]
//│ y: list[string]
//│ f: list[string] -> unit

:unify
f x
//│ ╔══[ERROR] Type `int list` does not match `string list`
//│ ║  
//│ ╟── `int list` comes from this type expression
//│ ║  l.-7: 	let x: int list
//│ ║        	       ^^^^^^^^
//│ ╟── this function argument has type `int list`
//│ ║  l.1: 	f x
//│ ║       	  ^
//│ ╟── `string list` comes from this type expression
//│ ║  l.-5: 	let f: string list -> unit
//│ ╙──      	       ^^^^^^^^^^^

:unify
if true then x else y
//│ ╔══[ERROR] Type `string list` does not match `int list`
//│ ║  
//│ ╟──        string list ---> ?a <--- int list 
//│ ║  
//│ ╟── `string list` comes from this type expression
//│ ║  l.-20: 	let y: string list
//│ ║         	       ^^^^^^^^^^^
//│ ╟── this `else` branch has type `string list` and it flows into `?a`
//│ ║  l.1: 	if true then x else y
//│ ║       	                    ^
//│ ╟── this if-then-else expression has type `?a`
//│ ║  l.1: 	if true then x else y
//│ ║       	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `then` branch has type `?a` and it flows from `int list`
//│ ║  l.1: 	if true then x else y
//│ ║       	             ^
//│ ╟── this applied type reference has type `int list`
//│ ║  l.-21: 	let x: int list
//│ ╙──       	       ^^^^^^^^
//│ res: list[int | string]
