:dp
let y x = [x]
let k a = if a then 2 :: [] else y true
//│ Parsed: Def(false, y, Lam(Var(x), App(Var(Cons), Tup(Var(x), Var(Nil)))), true)
//│ Def(false, k, Lam(Var(a), If(Var(a), List(IfThen(Var(true), App(Var(Cons), Tup(IntLit(2), Var(Nil))), IfThen(Var(false), App(Var(y), Var(true))))), true)
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.2  let k a = if a then 2 :: [] else y true
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.1  let y x = [x]
//│                 ^
//│   ◉ (?b * _ list) is here
//│   │  - l.1  let y x = [x]
//│   │                    ^
//│   ▼ 
//│   ◉ (?a * ?a list) is here
//│      - l.1  let y x = [x]
//│                        ^
//│   ◉ (?a list) is here
//│   │  - l.1  let y x = [x]
//│   │                   ^^^
//│   │  - l.2  let k a = if a then 2 :: [] else y true
//│   │                                          ^^^^^^
//│   │  - l.2  let k a = if a then 2 :: [] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.2  let k a = if a then 2 :: [] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) is here
//│      - l.2  let k a = if a then 2 :: [] else y true
//│                                 ^^^^^^^
//│   ◉ (?a0 * ?a0 list) is here
//│   ▲  - l.2  let k a = if a then 2 :: [] else y true
//│   │                             ^^^^^^^
//│   │ 
//│   ◉ (int * _ list) is here
//│      - l.2  let k a = if a then 2 :: [] else y true
//│                                 ^^^^^^^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.2  let k a = if a then 2 :: [] else y true
//│ │                                            ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│    - l.1  let y x = [x]
//│                 ^
//│   ◉ (?b * ?a list) is here
//│   │  - l.1  let y x = [x]
//│   │                    ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) is here
//│      - l.1  let y x = [x]
//│                        ^
//│     ◉ (?a0 * ?a0 list) is here
//│     ▲  - l.1  let y x = [x]
//│     │                    ^
//│     │ 
//│     ◉ (?b * ?a list) is here
//│        - l.1  let y x = [x]
//│                          ^
//│     ◉ (?b * ?a list) is here
//│     │  - l.1  let y x = [x]
//│     │                    ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) is here
//│        - l.1  let y x = [x]
//│                          ^
//│   ◉ (?a0 list) is here
//│   │  - l.1  let y x = [x]
//│   │                   ^^^
//│   │  - l.2  let k a = if a then 2 :: [] else y true
//│   │                                          ^^^^^^
//│   │  - l.2  let k a = if a then 2 :: [] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed here
//│   ▲  - l.2  let k a = if a then 2 :: [] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a1 list) is here
//│      - l.2  let k a = if a then 2 :: [] else y true
//│                                 ^^^^^^^
//│   ◉ (?a1 * ?a1 list) is here
//│   ▲  - l.2  let k a = if a then 2 :: [] else y true
//│   │                             ^^^^^^^
//│   │ 
//│   ◉ (int * _ list) is here
//│      - l.2  let k a = if a then 2 :: [] else y true
//│                                 ^^^^^^^
//│ y: 'a -> list['a]
//│ k: bool -> list[bool]
//│ U max: 5, total: 31
//│ UERR 2 errors
//│ L: 1 [bool ~ int, bool <: α77', [α77' - ([[α77']], [[list['a79']]],) ~ ('a78', list['a78'],) - 'a78', L: 0 [([[α77']], [[list['a79']]],) ~ ('a78', list['a78'],), ([[α77']], [[list['a79']]],) <: ('a78', list['a78'],)]], ['a78' - list['a78'] ~ list['a74'] - 'a74', L: 0 [list['a78'] ~ list['a74'], list['a78'] <: α73', α73' :> list['a74']]], ['a74' - ('a74', list['a74'],) ~ ([int], [[list['a75']]],) - int, L: 0 [('a74', list['a74'],) ~ ([int], [[list['a75']]],), ('a74', list['a74'],) :> ([int], [[list['a75']]],)]]]
//│ L: 2 [bool ~ int, bool <: α77', [α77' - ([[α77']], [[list['a79']]],) ~ ('a78', list['a78'],) - 'a78', L: 0 [([[α77']], [[list['a79']]],) ~ ('a78', list['a78'],), ([[α77']], [[list['a79']]],) <: ('a78', list['a78'],)]], ['a78' - list['a78'] ~ list['a79'] - 'a79', L: 1 [list['a78'] ~ list['a79'], [list['a78'] - ('a78', list['a78'],) ~ ([[α77']], [[list['a79']]],) - list['a79'], L: 0 [('a78', list['a78'],) ~ ([[α77']], [[list['a79']]],), ('a78', list['a78'],) :> ([[α77']], [[list['a79']]],)]]]], ['a79' - list['a79'] ~ list['a78'] - 'a78', L: 1 [list['a79'] ~ list['a78'], [list['a79'] - ([[α77']], [[list['a79']]],) ~ ('a78', list['a78'],) - list['a78'], L: 0 [([[α77']], [[list['a79']]],) ~ ('a78', list['a78'],), ([[α77']], [[list['a79']]],) <: ('a78', list['a78'],)]]]], ['a78' - list['a78'] ~ list['a74'] - 'a74', L: 0 [list['a78'] ~ list['a74'], list['a78'] <: α73', α73' :> list['a74']]], ['a74' - ('a74', list['a74'],) ~ ([int], [[list['a75']]],) - int, L: 0 [('a74', list['a74'],) ~ ([int], [[list['a75']]],), ('a74', list['a74'],) :> ([int], [[list['a75']]],)]]]
