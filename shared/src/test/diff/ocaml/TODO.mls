:d
let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ 1. Typing term xs => let f = a => x => if x(Nil) then 0 then (Cons (h, t,)) then 1 in let base = List.hd xs in List.fold_left f base xs Lam
//│ | 1. Typing pattern xs Var
//│ | 1. : α67'
//│ | 1. Typing term let f = a => x => if x(Nil) then 0 then (Cons (h, t,)) then 1 in let base = List.hd xs in List.fold_left f base xs Let
//│ | | 1. Typing term a => x => if x(Nil) then 0 then (Cons (h, t,)) then 1 Lam
//│ | | | 1. Typing pattern a Var
//│ | | | 1. : α68'
//│ | | | 1. Typing term x => if x(Nil) then 0 then (Cons (h, t,)) then 1 Lam
//│ | | | | 1. Typing pattern x Var
//│ | | | | 1. : α69'
//│ | | | | 1. Typing term if x(Nil) then 0 then (Cons (h, t,)) then 1 If
//│ | | | | | If(Var(x), List(IfThen(Var(Nil), IntLit(0), IfThen(App(Var(Cons), Tup(Var(h), Var(t))), IntLit(1)))
//│ | | | | | typed condition term x
//│ | | | | | 1. Typing term x Var
//│ | | | | | 1. : [α69']
//│ | | | | | type pattern Nil with loc: Some(Loc(44,46,ocaml/TODO:+2))
//│ | | | | | pattern is adt: TypeName(list) with List('a71')
//│ | | | | | CONSTRAIN [α69'] <! [list['a71']]
//│ | | | | |   where 
//│ | | | | | C [α69'] <! [list['a71']]    (0) where ProvType <: ProvType}
//│ | | | | | | C α69' <! [list['a71']]    (0) where TypeVariable <: ProvType}
//│ | | | | | | | C α69' <! list['a71']    (0) where TypeVariable <: TypeRef}
//│ | | | | | U Q [α69'] ~ [list['a71']]
//│ | | | | | U L: 0 [α69' ~ list['a71'], α69' <: list['a71']]
//│ | | | | | 1. Typing term 0 IntLit
//│ | | | | | 1. : int
//│ | | | | | CONSTRAIN int <! α70'
//│ | | | | |   where 
//│ | | | | | C int <! α70'    (0) where TypeRef <: TypeVariable}
//│ | | | | | U Q int ~ α70'
//│ | | | | | U L: 0 [int ~ α70', int <: α70']
//│ | | | | | Typing case (Cons)
//│ | | | | | adt name TypeName(list) and args pos List(0)
//│ | | | | | fields h, t, ~> List(h, t)
//│ | | | | | ctor type: (('a18', list['a18'],) -> list['a18'])
//│ | | | | | fieldTypes: List('a71', list['a71'])
//│ | | | | | CONSTRAIN [α69'] <! [list['a71']]
//│ | | | | |   where 
//│ 		α69' <: [[[[list['a71']]]]]
//│ | | | | | C [α69'] <! [list['a71']]    (0) where ProvType <: ProvType}
//│ | | | | | | C α69' <! [list['a71']]    (0) where TypeVariable <: ProvType}
//│ | | | | | | | C α69' <! list['a71']    (0) where TypeVariable <: TypeRef}
//│ | | | | | adt_ty [list['a71']]
//│ | | | | | Typing field (0) h
//│ | | | | | Field h : 'a71'
//│ | | | | | Typing field (1) t
//│ | | | | | Field t : list['a71']
//│ | | | | | 1. Typing term 1 IntLit
//│ | | | | | 1. : int
//│ | | | | | CONSTRAIN int <! α70'
//│ | | | | |   where 
//│ 		α70' :> [[int]]
//│ | | | | | C int <! α70'    (0) where TypeRef <: TypeVariable}
//│ | | | | 1. : α70'
//│ | | | 1. : (α69' -> α70')
//│ | | 1. : (α68' -> (α69' -> α70'))
//│ | | 1. Typing term let base = List.hd xs in List.fold_left f base xs Let
//│ | | | 1. Typing term List.hd xs App
//│ | | | | 1. Typing term List.hd Var
//│ | | | | 1. : [(list[α72'] -> α72')]
//│ | | | | 1. Typing term xs Var
//│ | | | | 1. : [α67']
//│ | | | | CONSTRAIN [α67'] <! list[α72']
//│ | | | |   where 
//│ | | | | C [α67'] <! list[α72']    (0) where ProvType <: TypeRef}
//│ | | | | | C α67' <! list[α72']    (0) where TypeVariable <: TypeRef}
//│ | | | | U Q [α67'] ~ list[α72']
//│ | | | | U L: 0 [α67' ~ list[α72'], α67' <: list[α72']]
//│ | | | 1. : [α72']
//│ | | | 1. Typing term List.fold_left f base xs App
//│ | | | | 1. Typing term List.fold_left f base App
//│ | | | | | 1. Typing term List.fold_left f App
//│ | | | | | | 1. Typing term List.fold_left Var
//│ | | | | | | 1. : [((α74' -> (α75' -> α74')) -> (α74' -> (list[α75'] -> α74')))]
//│ | | | | | | 1. Typing term f Var
//│ | | | | | | 1. : [(α68' -> (α69' -> α70'))]
//│ | | | | | | CONSTRAIN [(α68' -> (α69' -> α70'))] <! (α74' -> (α75' -> α74'))
//│ | | | | | |   where 
//│ 		α69' <: [[[[list['a71']]]]] & [[[[list['a71']]]]]
//│ 		α70' :> [[int]] | [[int]]
//│ | | | | | | C [(α68' -> (α69' -> α70'))] <! (α74' -> (α75' -> α74'))    (0) where ProvType <: FunctionType}
//│ | | | | | | | C (α68' -> (α69' -> α70')) <! (α74' -> (α75' -> α74'))    (0) where FunctionType <: FunctionType}
//│ | | | | | | | | [nested] [α74']
//│ | | | | | | | | C α74' <! α68'    (1) where TypeVariable <: TypeVariable}
//│ | | | | | | | | | symmetric
//│ | | | | | | | | [nested] [(α69' -> α70')]
//│ | | | | | | | | C (α69' -> α70') <! (α75' -> α74')    (2) where FunctionType <: FunctionType}
//│ | | | | | | | | | [nested] [α75']
//│ | | | | | | | | | C α75' <! α69'    (3) where TypeVariable <: TypeVariable}
//│ | | | | | | | | | | symmetric
//│ | | | | | | | | | | C α75' <! [[[[list['a71']]]]]    (4) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | C α75' <! [[[list['a71']]]]    (4) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | | C α75' <! [[list['a71']]]    (4) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | | | C α75' <! [list['a71']]    (4) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | | | | C α75' <! list['a71']    (4) where TypeVariable <: TypeRef}
//│ | | | | | | | | | | C α75' <! [[[[list['a71']]]]]    (5) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | C α75' <! [[[list['a71']]]]    (5) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | | C α75' <! [[list['a71']]]    (5) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | | | C α75' <! [list['a71']]    (5) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | | | | C α75' <! list['a71']    (5) where TypeVariable <: TypeRef}
//│ | | | | | | | | | | | | | | | Cached!
//│ | | | | | | | | | [nested] [α70']
//│ | | | | | | | | | C α70' <! α74'    (5) where TypeVariable <: TypeVariable}
//│ | | | | | | | | | | symmetric
//│ | | | | | | | | | | C [[int]] <! α74'    (6) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | C [int] <! α74'    (6) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | C int <! α74'    (6) where TypeRef <: TypeVariable}
//│ | | | | | | | | | | | | | C int <! [[α68']]    (7) where TypeRef <: ProvType}
//│ | | | | | | | | | | | | | | C int <! [α68']    (7) where TypeRef <: ProvType}
//│ | | | | | | | | | | | | | | | C int <! α68'    (7) where TypeRef <: TypeVariable}
//│ | | | | | | | | | | C [[int]] <! α74'    (8) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | C [int] <! α74'    (8) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | C int <! α74'    (8) where TypeRef <: TypeVariable}
//│ | | | | | | | | | | | | | Cached!
//│ | | | | | | | | | | C α70' <! [[α68']]    (8) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | C α70' <! [α68']    (8) where TypeVariable <: ProvType}
//│ | | | | | | | | | | | | C α70' <! α68'    (8) where TypeVariable <: TypeVariable}
//│ | | | | | | | | | | | | | symmetric
//│ | | | | | | | | | | | | | C [[int]] <! α68'    (9) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | C [int] <! α68'    (9) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | C int <! α68'    (9) where TypeRef <: TypeVariable}
//│ | | | | | | | | | | | | | | | | Cached!
//│ | | | | | | | | | | | | | C [[int]] <! α68'    (9) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | C [int] <! α68'    (9) where ProvType <: TypeVariable}
//│ | | | | | | | | | | | | | | | C int <! α68'    (9) where TypeRef <: TypeVariable}
//│ | | | | | | | | | | | | | | | | Cached!
//│ | | | | | | U Q [(α68' -> (α69' -> α70'))] ~ (α74' -> (α75' -> α74'))
//│ | | | | | | U L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]
//│ | | | | | | U Q α68' ~ α74'
//│ | | | | | | U Q (α69' -> α70') ~ (α75' -> α74')
//│ | | | | | | U L: 1 [α68' ~ α74', [α68' - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - α74', L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]
//│ | | | | | | U L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]
//│ | | | | | | U Q α69' ~ α75'
//│ | | | | | | U Q α70' ~ α74'
//│ | | | | | | U L: 2 [α69' ~ α75', [α69' - (α69' -> α70') ~ (α75' -> α74') - α75', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]]]
//│ | | | | | | U Q [list['a71']] ~ α75'
//│ | | | | | | U L: 2 [α70' ~ α74', [α70' - (α69' -> α70') ~ (α75' -> α74') - α74', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]]]
//│ | | | | | | U Q int ~ α74'
//│ | | | | | | U L: 2 [list['a71'] ~ α75', list['a71'] :> α69', [α69' - (α69' -> α70') ~ (α75' -> α74') - α75', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]]]
//│ | | | | | | U L: 2 [int ~ α74', int <: α70', [α70' - (α69' -> α70') ~ (α75' -> α74') - α74', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]]]
//│ | | | | | 1. : [(α74' -> (list[α75'] -> α74'))]
//│ | | | | | 1. Typing term base Var
//│ | | | | | 1. : [[α72']]
//│ | | | | | CONSTRAIN [[α72']] <! α74'
//│ | | | | |   where 
//│ 		α68' :> [[[[α70']]]] | [[[[[int]]]]] | [[α74']]
//│ 		α70' :> [[int]] | [[int]] <: [[[[α68']]]] & [[α74']]
//│ 		α74' :> [[α70']] | [[[int]]] <: [[α68']]
//│ | | | | | C [[α72']] <! α74'    (0) where ProvType <: TypeVariable}
//│ | | | | | | C [α72'] <! α74'    (0) where ProvType <: TypeVariable}
//│ | | | | | | | C α72' <! α74'    (0) where TypeVariable <: TypeVariable}
//│ | | | | | | | | symmetric
//│ | | | | | | | | C α72' <! [[α68']]    (1) where TypeVariable <: ProvType}
//│ | | | | | | | | | C α72' <! [α68']    (1) where TypeVariable <: ProvType}
//│ | | | | | | | | | | C α72' <! α68'    (1) where TypeVariable <: TypeVariable}
//│ | | | | | | | | | | | symmetric
//│ | | | | | U Q [[α72']] ~ α74'
//│ | | | | | U L: 0 [α72' ~ α74', α72' <: α74']
//│ | | | | 1. : [(list[α75'] -> α74')]
//│ | | | | 1. Typing term xs Var
//│ | | | | 1. : [α67']
//│ | | | | CONSTRAIN [α67'] <! list[α75']
//│ | | | |   where 
//│ 		α67' <: [[[list[α72']]]]
//│ 		α68' :> [[[[α72']]]] | [[[[α70']]]] | [[[[[int]]]]] | [[α74']]
//│ 		α69' :> [[α75']] <: [[[[list['a71']]]]] & [[[[list['a71']]]]]
//│ 		α70' :> [[int]] | [[int]] <: [[[[α68']]]] & [[α74']]
//│ 		α72' <: [[[[α68']]]] & [[α74']]
//│ 		α74' :> [[α72']] | [[α70']] | [[[int]]] <: [[α68']]
//│ 		α75' <: [[[[[list['a71']]]]]] & [[α69']]
//│ | | | | C [α67'] <! list[α75']    (0) where ProvType <: TypeRef}
//│ | | | | | C α67' <! list[α75']    (0) where TypeVariable <: TypeRef}
//│ | | | | U Q [α67'] ~ list[α75']
//│ | | | | U L: 0 [α67' ~ list[α75'], α67' <: list[α75']]
//│ | | | | U Q list[α72'] ~ list[α75']
//│ | | | | U L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]
//│ | | | | U Q α72' ~ α75'
//│ | | | | U L: 1 [α72' ~ α75', [α72' - list[α72'] ~ list[α75'] - α75', L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]]]
//│ | | | | U Q α74' ~ α75'
//│ | | | | U L: 1 [α74' ~ α75', α74' :> α72', [α72' - list[α72'] ~ list[α75'] - α75', L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]]]
//│ | | | | U Q int ~ α75'
//│ | | | | U L: 2 [int ~ α75', int <: α70', [α70' - (α69' -> α70') ~ (α75' -> α74') - α74', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]], α74' :> α72', [α72' - list[α72'] ~ list[α75'] - α75', L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]]]
//│ | | | | U Q int ~ [list['a71']]
//│ | | | | U L: 2 [int ~ list['a71'], int <: α70', [α70' - (α69' -> α70') ~ (α75' -> α74') - α74', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]], α74' :> α72', [α72' - list[α72'] ~ list[α75'] - α75', L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]], [α75' - (α75' -> α74') ~ (α69' -> α70') - α69', L: 1 [(α75' -> α74') ~ (α69' -> α70'), [(α75' -> α74') - (α74' -> (α75' -> α74')) ~ (α68' -> (α69' -> α70')) - (α69' -> α70'), L: 0 [(α74' -> (α75' -> α74')) ~ (α68' -> (α69' -> α70')), (α74' -> (α75' -> α74')) :> (α68' -> (α69' -> α70'))]]]], α69' <: list['a71']]
//│ | | | | UERR L: 2 [int ~ list['a71'], int <: α70', [α70' - (α69' -> α70') ~ (α75' -> α74') - α74', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]], α74' :> α72', [α72' - list[α72'] ~ list[α75'] - α75', L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]], [α75' - (α75' -> α74') ~ (α69' -> α70') - α69', L: 1 [(α75' -> α74') ~ (α69' -> α70'), [(α75' -> α74') - (α74' -> (α75' -> α74')) ~ (α68' -> (α69' -> α70')) - (α69' -> α70'), L: 0 [(α74' -> (α75' -> α74')) ~ (α68' -> (α69' -> α70')), (α74' -> (α75' -> α74')) :> (α68' -> (α69' -> α70'))]]]], α69' <: list['a71']]
//│ | | | 1. : [α74']
//│ | | 1. : [α74']
//│ | 1. : [α74']
//│ 1. : (α67' -> [α74'])
//│ ⬤ Typed as: (α67' -> [α74'])
//│  where: 
//│ 		α67' <: [[[list[α75']]]] & [[[list[α72']]]]
//│ 		α68' :> [[[[α72']]]] | [[[[α70']]]] | [[[[[int]]]]] | [[α74']]
//│ 		α69' :> [[α75']] <: [[[[list['a71']]]]] & [[[[list['a71']]]]]
//│ 		α70' :> [[int]] | [[int]] <: [[[[α68']]]] & [[α74']]
//│ 		α72' <: [[[[α68']]]] & [[α74']]
//│ 		α74' :> [[α72']] | [[α70']] | [[[int]]] <: [[α68']]
//│ 		α75' <: [[[[[list['a71']]]]]] & [[α69']]
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (int) is here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) is here
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) is here
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed here
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (?c -> ?d -> ?c) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) is here
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: (list[list[?]] & list['a]) -> (int | 'a)
//│ U max: 2, total: 17
//│ UERR 1 errors
//│ L: 2 [int ~ list['a71'], int <: α70', [α70' - (α69' -> α70') ~ (α75' -> α74') - α74', L: 1 [(α69' -> α70') ~ (α75' -> α74'), [(α69' -> α70') - (α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α68' -> (α69' -> α70')) ~ (α74' -> (α75' -> α74')), (α68' -> (α69' -> α70')) <: (α74' -> (α75' -> α74'))]]]], α74' :> α72', [α72' - list[α72'] ~ list[α75'] - α75', L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]], [α75' - (α75' -> α74') ~ (α69' -> α70') - α69', L: 1 [(α75' -> α74') ~ (α69' -> α70'), [(α75' -> α74') - (α74' -> (α75' -> α74')) ~ (α68' -> (α69' -> α70')) - (α69' -> α70'), L: 0 [(α74' -> (α75' -> α74')) ~ (α68' -> (α69' -> α70')), (α74' -> (α75' -> α74')) :> (α68' -> (α69' -> α70'))]]]], α69' <: list['a71']]


let f x = in let g y = x y; y in g 1; g 2;