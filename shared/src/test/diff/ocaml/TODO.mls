:d
:unifyDbg
let y x = [x]
let k a = if a then [2] else y true
//│ 1. Typing term x => Cons (x, Nil,)
//│ | 1. Typing pattern x
//│ | 1. : α67'
//│ | 1. Typing term Cons (x, Nil,)
//│ | | 1. Typing term Cons
//│ | | 1. : [(('a68', list['a68'],) -> list['a68'])]
//│ | | 1. Typing term x, Nil,
//│ | | | 1. Typing term x
//│ | | | 1. : [α67']
//│ | | | 1. Typing term Nil
//│ | | | 1. : [list['a69']]
//│ | | 1. : ([α67'], [list['a69']],)
//│ | | CONSTRAIN ([α67'], [list['a69']],) <! ('a68', list['a68'],)
//│ | |   where 
//│ | | C ([α67'], [list['a69']],) <! ('a68', list['a68'],)    (0) where TupleType <: TupleType}
//│ | | | [nested] [[α67']]
//│ | | | C [α67'] <! 'a68'    (1) where ProvType <: TypeVariable}
//│ | | | | C α67' <! 'a68'    (1) where TypeVariable <: TypeVariable}
//│ | | | | | symmetric
//│ | | | [nested] [[list['a69']]]
//│ | | | C [list['a69']] <! list['a68']    (2) where ProvType <: TypeRef}
//│ | | | | C list['a69'] <! list['a68']    (2) where TypeRef <: TypeRef}
//│ | | | | | [nested] ['a69']
//│ | | | | | C 'a69' <! 'a68'    (3) where TypeVariable <: TypeVariable}
//│ | | | | | | symmetric
//│ | |   | U Q ([α67'], [list['a69']],) ~ ('a68', list['a68'],)
//│ | 1. : [list['a68']]
//│ 1. : (α67' -> [list['a68']])
//│ ⬤ Typed as: (α67' -> [list['a68']])
//│  where: 
//│ 		α67' <: [[['a68']]]
//│ 		'a68' :> ['a69'] | [[[α67']]]
//│ 		'a69' <: ['a68']
//│ 1. Typing term a => if a(true) then Cons (2, Nil,) then (false) then y true
//│ | 1. Typing pattern a
//│ | 1. : α76'
//│ | 1. Typing term if a(true) then Cons (2, Nil,) then (false) then y true
//│ | | If(Var(a), List(IfThen(Var(true), App(Var(Cons), Tup(IntLit(2), Var(Nil))), IfThen(Var(false), App(Var(y), Var(true))))
//│ | | 1. Typing term a
//│ | | 1. : [α76']
//│ | | CONSTRAIN [α76'] <! bool
//│ | |   where 
//│ | | C [α76'] <! bool    (0) where ProvType <: TypeRef}
//│ | | | C α76' <! bool    (0) where TypeVariable <: TypeRef}
//│ | |   | U Q [α76'] ~ bool
//│ | | 1. Typing term Cons (2, Nil,)
//│ | | | 1. Typing term Cons
//│ | | | 1. : [(('a78', list['a78'],) -> list['a78'])]
//│ | | | 1. Typing term 2, Nil,
//│ | | | | 1. Typing term 2
//│ | | | | 1. : int
//│ | | | | 1. Typing term Nil
//│ | | | | 1. : [list['a79']]
//│ | | | 1. : (int, [list['a79']],)
//│ | | | CONSTRAIN (int, [list['a79']],) <! ('a78', list['a78'],)
//│ | | |   where 
//│ | | | C (int, [list['a79']],) <! ('a78', list['a78'],)    (0) where TupleType <: TupleType}
//│ | | | | [nested] [int]
//│ | | | | C int <! 'a78'    (1) where TypeRef <: TypeVariable}
//│ | | | | [nested] [[list['a79']]]
//│ | | | | C [list['a79']] <! list['a78']    (2) where ProvType <: TypeRef}
//│ | | | | | C list['a79'] <! list['a78']    (2) where TypeRef <: TypeRef}
//│ | | | | | | [nested] ['a79']
//│ | | | | | | C 'a79' <! 'a78'    (3) where TypeVariable <: TypeVariable}
//│ | | | | | | | symmetric
//│ | | |   | U Q (int, [list['a79']],) ~ ('a78', list['a78'],)
//│ | | 1. : [list['a78']]
//│ | | CONSTRAIN [list['a78']] <! α77'
//│ | |   where 
//│ 		'a78' :> ['a79'] | [[int]]
//│ 		'a79' <: ['a78']
//│ | | C [list['a78']] <! α77'    (0) where ProvType <: TypeVariable}
//│ | | | C list['a78'] <! α77'    (0) where TypeRef <: TypeVariable}
//│ | |   | U Q [list['a78']] ~ α77'
//│ | | 1. Typing term y true
//│ | | | 1. Typing term y
//│ | | | 1. : [(α81' -> [list['a82']])]
//│ | | | 1. Typing term true
//│ | | | 1. : [bool]
//│ | | | CONSTRAIN [bool] <! α81'
//│ | | |   where 
//│ 		α81' <: [[['a82']]]
//│ 		'a82' :> ['a83'] | [[[α81']]]
//│ 		'a83' <: ['a82']
//│ | | | C [bool] <! α81'    (0) where ProvType <: TypeVariable}
//│ | | | | C bool <! α81'    (0) where TypeRef <: TypeVariable}
//│ | | | | | C bool <! [[['a82']]]    (1) where TypeRef <: ProvType}
//│ | | | | | | C bool <! [['a82']]    (1) where TypeRef <: ProvType}
//│ | | | | | | | C bool <! ['a82']    (1) where TypeRef <: ProvType}
//│ | | | | | | | | C bool <! 'a82'    (1) where TypeRef <: TypeVariable}
//│ | | |   | U Q [bool] ~ α81'
//│ | | 1. : [[list['a82']]]
//│ | | CONSTRAIN [[list['a82']]] <! α77'
//│ | |   where 
//│ 		α77' :> [[[list['a78']]]]
//│ 		'a78' :> ['a79'] | [[int]]
//│ 		'a79' <: ['a78']
//│ 		α81' :> [[[bool]]] <: [[['a82']]]
//│ 		'a82' :> [[[[[bool]]]]] | ['a83'] | [[[α81']]]
//│ 		'a83' <: ['a82']
//│ | | C [[list['a82']]] <! α77'    (0) where ProvType <: TypeVariable}
//│ | | | C [list['a82']] <! α77'    (0) where ProvType <: TypeVariable}
//│ | | | | C list['a82'] <! α77'    (0) where TypeRef <: TypeVariable}
//│ | |   | U Q [[list['a82']]] ~ α77'
//│ | 1. : α77'
//│ 1. : (α76' -> α77')
//│ ⬤ Typed as: (α76' -> α77')
//│  where: 
//│ 		α76' <: [[[bool]]]
//│ 		α77' :> [[[[list['a82']]]]] | [[[list['a78']]]]
//│ 		'a78' :> ['a79'] | [[int]]
//│ 		'a79' <: ['a78']
//│ 		α81' :> [[[bool]]] <: [[['a82']]]
//│ 		'a82' :> [[[[[bool]]]]] | ['a83'] | [[[α81']]]
//│ 		'a83' <: ['a82']
//│ U L: 0 [([α67'], [list['a69']],) ~ ('a68', list['a68'],), ([α67'], [list['a69']],) <: ('a68', list['a68'],)]
//│   | U Q [α67'] ~ 'a68'
//│   | U Q [list['a69']] ~ list['a68']
//│ U L: 0 [α76' ~ bool, α76' <: bool]
//│ U L: 0 [(int, [list['a79']],) ~ ('a78', list['a78'],), (int, [list['a79']],) <: ('a78', list['a78'],)]
//│   | U Q int ~ 'a78'
//│   | U Q [list['a79']] ~ list['a78']
//│ U L: 0 [list['a78'] ~ α77', list['a78'] <: α77']
//│ U L: 0 [bool ~ α81', bool <: α81']
//│ U L: 0 [list['a82'] ~ α77', list['a82'] <: α77']
//│   | U Q [[list['a82']]] ~ [list['a78']]
//│ U L: 1 [α67' ~ 'a68', [α67' - ([α67'], [list['a69']],) ~ ('a68', list['a68'],) - 'a68', L: 0 [([α67'], [list['a69']],) ~ ('a68', list['a68'],), ([α67'], [list['a69']],) <: ('a68', list['a68'],)]]]
//│ U L: 1 [list['a69'] ~ list['a68'], [list['a69'] - ([α67'], [list['a69']],) ~ ('a68', list['a68'],) - list['a68'], L: 0 [([α67'], [list['a69']],) ~ ('a68', list['a68'],), ([α67'], [list['a69']],) <: ('a68', list['a68'],)]]]
//│   | U Q 'a69' ~ 'a68'
//│ U L: 1 [int ~ 'a78', [int - (int, [list['a79']],) ~ ('a78', list['a78'],) - 'a78', L: 0 [(int, [list['a79']],) ~ ('a78', list['a78'],), (int, [list['a79']],) <: ('a78', list['a78'],)]]]
//│ U L: 1 [list['a79'] ~ list['a78'], [list['a79'] - (int, [list['a79']],) ~ ('a78', list['a78'],) - list['a78'], L: 0 [(int, [list['a79']],) ~ ('a78', list['a78'],), (int, [list['a79']],) <: ('a78', list['a78'],)]]]
//│   | U Q 'a79' ~ 'a78'
//│ U L: 0 [list['a82'] ~ list['a78'], list['a82'] <: α77', α77' :> list['a78']]
//│   | U Q 'a82' ~ 'a78'
//│ U L: 2 ['a69' ~ 'a68', ['a69' - list['a69'] ~ list['a68'] - 'a68', L: 1 [list['a69'] ~ list['a68'], [list['a69'] - ([α67'], [list['a69']],) ~ ('a68', list['a68'],) - list['a68'], L: 0 [([α67'], [list['a69']],) ~ ('a68', list['a68'],), ([α67'], [list['a69']],) <: ('a68', list['a68'],)]]]]]
//│ U L: 2 ['a79' ~ 'a78', ['a79' - list['a79'] ~ list['a78'] - 'a78', L: 1 [list['a79'] ~ list['a78'], [list['a79'] - (int, [list['a79']],) ~ ('a78', list['a78'],) - list['a78'], L: 0 [(int, [list['a79']],) ~ ('a78', list['a78'],), (int, [list['a79']],) <: ('a78', list['a78'],)]]]]]
//│ U L: 1 ['a82' ~ 'a78', ['a82' - list['a82'] ~ list['a78'] - 'a78', L: 0 [list['a82'] ~ list['a78'], list['a82'] <: α77', α77' :> list['a78']]]]
//│ y: 'a -> list['a]
//│ k: bool -> list[bool | int]

// y: 'b -> list['a]
//   where
//     'b <: 'a
//     'a :> 'a0 | 'b
//     'a0 <: 'a
// k: 'b -> 'c
//   where
//     'c :> list['a] | list['a0]
//     'a0 :> 'a1 | int
//     'a1 <: 'a0
//     'a :> bool | 'a2 | 'd
//     'd :> bool
//        <: 'a
//     'a2 <: 'a
//     'b <: bool
