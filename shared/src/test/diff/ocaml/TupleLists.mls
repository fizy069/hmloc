

let f = if true then [0, 1] else [0], [1]
//│ [ERROR] Type `_ list * _ list` does not match `_ list`
//│ 
//│         (_ list * _ list) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ list * _ list) comes from
//│ │  - l.1  let f = if true then [0, 1] else [0], [1]
//│ │                                          ^^^^^^^^
//│ │  - l.1  let f = if true then [0, 1] else [0], [1]
//│ │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let f = if true then [0, 1] else [0], [1]
//│ │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.1  let f = if true then [0, 1] else [0], [1]
//│                                ^^^^^^
//│ f: 'a
//│   where
//│     'a = (list[int], list[int],), list[(int, int,)]
//│ U max: 2, total: 16
//│ UERR 1 errors
//│ L: 0 [([[list['a68']]], [[list['a71']]],) ~ list['a65'], ([[list['a68']]], [[list['a71']]],) <: α64', α64' :> list['a65']]

let f x = if true then [0, 1] else x, [1]
//│ [ERROR] Type `_ * _ list` does not match `_ list`
//│ 
//│         (_ * _ list) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ * _ list) comes from
//│ │  - l.1  let f x = if true then [0, 1] else x, [1]
//│ │                                            ^^^^^^
//│ │  - l.1  let f x = if true then [0, 1] else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let f x = if true then [0, 1] else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.1  let f x = if true then [0, 1] else x, [1]
//│                                  ^^^^^^
//│ f: 'a -> 'b
//│   where
//│     'b = ('a, list[int],), list[(int, int,)]
//│ U max: 2, total: 12
//│ UERR 1 errors
//│ L: 0 [([[α77']], [[list['a82']]],) ~ list['a79'], ([[α77']], [[list['a82']]],) <: α78', α78' :> list['a79']]

let test: (int * int) list
//│ test: list[(int, int,)]

let f x = if true then test else x, [1]
//│ [ERROR] Type `_ * _ list` does not match `(int * int) list`
//│ 
//│         (_ * _ list) ---> (?a) <--- ((int * int) list)
//│ 
//│ ◉ (_ * _ list) comes from
//│ │  - l.1  let f x = if true then test else x, [1]
//│ │                                          ^^^^^^
//│ │  - l.1  let f x = if true then test else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let f x = if true then test else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let f x = if true then test else x, [1]
//│ │                                ^^^^
//│ │ 
//│ ◉ ((int * int) list) comes from
//│    - l.-2 let test: (int * int) list
//│                      ^^^^^^^^^^^^^^^
//│ f: 'a -> 'b
//│   where
//│     'b = ('a, list[int],), list[(int, int,)]
//│ U max: 2, total: 8
//│ UERR 1 errors
//│ L: 0 [([[α87']], [[list['a89']]],) ~ list[([int], [int],)], ([[α87']], [[list['a89']]],) <: α88', α88' :> list[([int], [int],)]]

