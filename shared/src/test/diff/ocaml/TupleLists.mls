

let f = if true then [0, 1] else [0], [1]
//│ [ERROR] Type `_ list * _ list` does not match `_ list`
//│ 
//│         (_ list * _ list) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ list * _ list) comes from
//│ │  - l.1  let f = if true then [0, 1] else [0], [1]
//│ │                                          ^^^^^^^^
//│ │  - l.1  let f = if true then [0, 1] else [0], [1]
//│ │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let f = if true then [0, 1] else [0], [1]
//│ │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.1  let f = if true then [0, 1] else [0], [1]
//│                                ^^^^^^
//│ f: 'a
//│   where
//│     'a = (list[int], list[int],), list[(int, int,)]
//│ U max: 2, total: 16
//│ UERR 1 errors
//│ L: 0 [([[list['a46']]], [[list['a49']]],) ~ list['a43'], ([[list['a46']]], [[list['a49']]],) <: α42', α42' :> list['a43']]

let f x = if true then [0, 1] else x, [1]
//│ [ERROR] Type `_ * _ list` does not match `_ list`
//│ 
//│         (_ * _ list) ---> (?a) <--- (_ list)
//│ 
//│ ◉ (_ * _ list) comes from
//│ │  - l.1  let f x = if true then [0, 1] else x, [1]
//│ │                                            ^^^^^^
//│ │  - l.1  let f x = if true then [0, 1] else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let f x = if true then [0, 1] else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.1  let f x = if true then [0, 1] else x, [1]
//│                                  ^^^^^^
//│ f: 'a -> 'b
//│   where
//│     'b = ('a, list[int],), list[(int, int,)]
//│ U max: 2, total: 12
//│ UERR 1 errors
//│ L: 0 [([[α55']], [[list['a60']]],) ~ list['a57'], ([[α55']], [[list['a60']]],) <: α56', α56' :> list['a57']]

let test: (int * int) list
//│ test: list[(int, int,)]

let f x = if true then test else x, [1]
//│ [ERROR] Type `_ * _ list` does not match `(int * int) list`
//│ 
//│         (_ * _ list) ---> (?a) <--- ((int * int) list)
//│ 
//│ ◉ (_ * _ list) comes from
//│ │  - l.1  let f x = if true then test else x, [1]
//│ │                                          ^^^^^^
//│ │  - l.1  let f x = if true then test else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let f x = if true then test else x, [1]
//│ │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let f x = if true then test else x, [1]
//│ │                                ^^^^
//│ │ 
//│ ◉ ((int * int) list) comes from
//│    - l.-2 let test: (int * int) list
//│                      ^^^^^^^^^^^^^^^
//│ f: 'a -> 'b
//│   where
//│     'b = ('a, list[int],), list[(int, int,)]
//│ U max: 2, total: 8
//│ UERR 1 errors
//│ L: 0 [([[α65']], [[list['a67']]],) ~ list[([int], [int],)], ([[α65']], [[list['a67']]],) <: α66', α66' :> list[([int], [int],)]]

