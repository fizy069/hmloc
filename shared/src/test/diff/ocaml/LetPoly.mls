let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (int) is here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) is here
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) is here
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│ ◉ (?c) is assumed here
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed here
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) is here
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed here
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) is here
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│     ◉ (?c -> ?d -> ?c) is here
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) is here
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed here
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) is here
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 31
//│ UERR 1 errors
//│ L: 2 [int ~ list['a78'], int <: α79', [α79' - (α77' -> α79') ~ (α75' -> α74') - α74', L: 1 [(α77' -> α79') ~ (α75' -> α74'), [(α77' -> α79') - (α76' -> (α77' -> α79')) ~ (α74' -> (α75' -> α74')) - (α75' -> α74'), L: 0 [(α76' -> (α77' -> α79')) ~ (α74' -> (α75' -> α74')), (α76' -> (α77' -> α79')) <: (α74' -> (α75' -> α74'))]]]], α74' :> α72', [α72' - list[α72'] ~ list[α75'] - α75', L: 0 [list[α72'] ~ list[α75'], list[α72'] :> α67', α67' <: list[α75']]], [α75' - (α75' -> α74') ~ (α77' -> α79') - α77', L: 1 [(α75' -> α74') ~ (α77' -> α79'), [(α75' -> α74') - (α74' -> (α75' -> α74')) ~ (α76' -> (α77' -> α79')) - (α77' -> α79'), L: 0 [(α74' -> (α75' -> α74')) ~ (α76' -> (α77' -> α79')), (α74' -> (α75' -> α74')) :> (α76' -> (α77' -> α79'))]]]], α77' <: list['a78']]

let f x =
  let g y =
    let h = x y
    in y
  in let k = g 1 in g "hi"
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ---> (?a) <--- (int)
//│ 
//│ ◉ (string) is here
//│ │  - l.5    in let k = g 1 in g "hi"
//│ │                               ^^^^
//│ │  - l.2    let g y =
//│ │                 ^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ ▲  - l.2    let g y =
//│ │                 ^
//│ │ 
//│ ◉ (int) is here
//│    - l.5    in let k = g 1 in g "hi"
//│                          ^
//│ f: ('a -> 'b) -> 'a
//│   where
//│     'a = string, int
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [string ~ int, string <: α85', α85' :> int]

