let sqsum xs =
  let f a x = match x with | [] -> 0 | h::t -> 1 in
  let base = List.hd xs in List.fold_left f base xs;;
//│ [ERROR] Type `int` does not match `_ list`
//│ 
//│         (int) ---> (?a) ~~~~ (?b) <--- (?c) ~~~~ (?d) ~~~~ (?e) ---> (_ list)
//│ 
//│ ◉ (int) comes from
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                                            ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?b -> ?a) comes from
//│     │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│     │                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     ▼ 
//│     ◉ (?c -> ?d -> ?c) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│ ▲  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│ │                                                     ^^^^
//│ │ 
//│ ◉ (?e) is assumed for
//│    - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│                        ^^^^^^^^^^
//│   ◉ (?e list) comes from
//│   ▲  - lib. let List.hd: 'a list -> 'a
//│   │                      ^^^^^^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                              ^^
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │ 
//│   ◉ (?f) is assumed for
//│   │  - l.1  let sqsum xs =
//│   │                   ^^
//│   │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│   │                                                          ^^
//│   ▼ 
//│   ◉ (?d list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (?d -> ?c) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (?c -> ?d -> ?c) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.3    let base = List.hd xs in List.fold_left f base xs;;
//│     │                                                   ^
//│     │ 
//│     ◉ (_ -> ?b -> ?a) comes from
//│        - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?b -> ?a) comes from
//│      - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?b) is assumed for
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                   ^
//│ │  - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│ │                             ^
//│ ▼ 
//│ ◉ (_ list) comes from
//│    - l.2    let f a x = match x with | [] -> 0 | h::t -> 1 in
//│                                        ^^
//│ sqsum: list['b] -> 'b
//│   where
//│     'b = int, list['a]
//│ U max: 5, total: 31
//│ UERR 1 errors
//│ L: 2 [int ~ list['a75'], int <: α76', [α76' - (α74' -> α76') ~ (α72' -> α71') - α71', L: 1 [(α74' -> α76') ~ (α72' -> α71'), [(α74' -> α76') - (α73' -> (α74' -> α76')) ~ (α71' -> (α72' -> α71')) - (α72' -> α71'), L: 0 [(α73' -> (α74' -> α76')) ~ (α71' -> (α72' -> α71')), (α73' -> (α74' -> α76')) <: (α71' -> (α72' -> α71'))]]]], α71' :> α69', [α69' - list[α69'] ~ list[α72'] - α72', L: 0 [list[α69'] ~ list[α72'], list[α69'] :> α64', α64' <: list[α72']]], [α72' - (α72' -> α71') ~ (α74' -> α76') - α74', L: 1 [(α72' -> α71') ~ (α74' -> α76'), [(α72' -> α71') - (α71' -> (α72' -> α71')) ~ (α73' -> (α74' -> α76')) - (α74' -> α76'), L: 0 [(α71' -> (α72' -> α71')) ~ (α73' -> (α74' -> α76')), (α71' -> (α72' -> α71')) :> (α73' -> (α74' -> α76'))]]]], α74' <: list['a75']]

let f x =
  let g y =
    let h = x y
    in y
  in let k = g 1 in g "hi"
//│ [ERROR] Type `string` does not match `int`
//│ 
//│         (string) ---> (?a) <--- (int)
//│ 
//│ ◉ (string) comes from
//│ │  - l.5    in let k = g 1 in g "hi"
//│ │                               ^^^^
//│ │  - l.2    let g y =
//│ │                 ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.2    let g y =
//│ │                 ^
//│ │ 
//│ ◉ (int) comes from
//│    - l.5    in let k = g 1 in g "hi"
//│                          ^
//│ f: ('a -> 'b) -> 'a
//│   where
//│     'a = string, int
//│ U max: 1, total: 4
//│ UERR 1 errors
//│ L: 0 [string ~ int, string <: α82', α82' :> int]

