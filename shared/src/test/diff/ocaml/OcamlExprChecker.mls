:NoJS
:OcamlParser
:AllowTypeErrors

// library type definitions and functions
type 'a list = Cons of 'a * 'a list | Nil
let (::) a b = Cons (a, b)
type 'a option = None | Some of 'a
let raise a = nothing
exception Error
//│ Defined type alias list[+'a]
//│ Defined class Cons[+'a]
//│ Defined class Nil
//│ Defined type alias option[+'a]
//│ Defined class None
//│ Defined class Some[+'a]
//│ Cons: ('_0 & 'a, list['a] & '_1,) -> (Cons['a] with {_0: '_0, _1: '_1})
//│ Nil: Nil
//│ ::: ('_0 & 'a) -> (list['a] & '_1) -> (Cons['a] with {_0: '_0, _1: '_1})
//│ None: None
//│ Some: '_0 -> Some['_0]
//│ raise: anything -> nothing
//│ Error: anything

let List_length: 'a list -> int
let List_mem: 'a -> 'a list -> bool
let List_append: 'a list -> 'a list -> 'a list
//│ List_length: list[?] -> int
//│ List_mem: anything -> list[?] -> bool
//│ List_append: list['a] -> list['a] -> list['a]

Cons(1, Nil) @ Cons(2, Nil)
//│ res: list[int]

// equality check
// FIXME
let a b c = b = c
let a b c d = b = c = d
//│ a: anything -> anything -> bool
//│ a: anything -> anything -> anything -> bool

// list values
1 :: Nil
1 :: 2 :: Nil
[1, 2, 3, 4]
[]
// let a = []
//│ res: Cons[int] with {_1: Nil}
//│ res: Cons[int] with {_1: Cons[int] with {_1: Nil}}
//│ res: Cons[(int, int, int, int,)] with {_1: Nil}
//│ res: Nil

let (+.): float -> float -> float
let (-.): float -> float -> float
let ( *. ): float -> float -> float
let ( /. ): float -> float -> float
let ( ** ): float -> float -> float
//│ +.: float -> float -> float
//│ -.: float -> float -> float
//│ *.: float -> float -> float
//│ /.: float -> float -> float
//│ **: float -> float -> float

1.0 +. 1.0 -. 1.0 *. 2.0 /. 3.0 ** 5.0
//│ res: float

1.0 :: Nil
2.0 :: 3.223 :: Nil
//│ res: Cons[float] with {_1: Nil}
//│ res: Cons[float] with {_1: Cons[float] with {_1: Nil}}

let f = 3.14
let f = f +. 1.0
let f = f +. f +. 1.0
//│ f: float
//│ f: float
//│ f: float

// let without in as definitions
let a = 1
let a = a + 1
let a = a + a + 1
//│ a: int
//│ a: int
//│ a: int

let a = ("hi", 2)
let b = ("bye", 3)
let data = Cons (a, Cons (b, Nil))
//│ a: (string, int,)
//│ b: (string, int,)
//│ data: Cons[(string, int,)] with {_1: Cons[(string, int,)] with {_1: Nil}}

2.0
let b = 3.0
let c = 3.0 +. 4.0 *. 6.0
//│ res: float
//│ b: float
//│ c: float

// make tuples from comma separated terms
1, 2, 3
let mktup = 1, 2, 3
let mktup = 1, (2, 3)
let mktup = [1, 2, 3], 4, (5, 6)
//│ res: (int, int, int,)
//│ mktup: (int, int, int,)
//│ mktup: (int, (int, int,),)
//│ mktup: (Cons[(int, int, int,)] with {_1: Nil}, int, (int, int,),)

// create classes for exceptions
exception Unimplemented
exception AlreadyDone
raise Unimplemented
raise AlreadyDone
//│ Unimplemented: anything
//│ AlreadyDone: anything
//│ res: nothing
//│ res: nothing

// type definitions
type heapVar = HeapInt of int | Heap of heap and heap = (string * int) list
//│ Defined type alias heapVar
//│ Defined class HeapInt
//│ Defined class Heap
//│ Defined type alias heap
//│ HeapInt: (int & '_0) -> (HeapInt with {_0: '_0})
//│ Heap: (heap & '_0) -> (Heap with {_0: '_0})

type exp = Int of int | Var of string | Plus of exp * exp | Times of exp * exp
//│ Defined type alias exp
//│ Defined class Int
//│ Defined class Var
//│ Defined class Plus
//│ Defined class Times
//│ Int: (int & '_0) -> (int & {_0: '_0})
//│ Var: (string & '_0) -> (Var with {_0: '_0})
//│ Plus: (exp & '_0, exp & '_1,) -> (Plus with {_0: '_0, _1: '_1})
//│ Times: (exp & '_0, exp & '_1,) -> (Times with {_0: '_0, _1: '_1})

type stmt = Skip | Assign of string * exp
         | Seq of stmt * stmt 
         | If of exp * stmt * stmt
         | While of exp * stmt 
         | SaveHeap of string
         | RestoreHeap of string
//│ Defined type alias stmt
//│ Defined class Skip
//│ Defined class Assign
//│ Defined class Seq
//│ Defined class If
//│ Defined class While
//│ Defined class SaveHeap
//│ Defined class RestoreHeap
//│ Skip: Skip
//│ Assign: (string & '_0, exp & '_1,) -> (Assign with {_0: '_0, _1: '_1})
//│ Seq: (stmt & '_0, stmt & '_1,) -> (Seq with {_0: '_0, _1: '_1})
//│ If: (exp & '_0, stmt & '_1, stmt & '_2,) -> (If with {_0: '_0, _1: '_1, _2: '_2})
//│ While: (exp & '_0, stmt & '_1,) -> (While with {_0: '_0, _1: '_1})
//│ SaveHeap: (string & '_0) -> (SaveHeap with {_0: '_0})
//│ RestoreHeap: (string & '_0) -> (RestoreHeap with {_0: '_0})

// parameterized type definitions
type 'a heapA = HeapA of 'a
type ('a, 'b) heapB = HeapB of ('a * 'b)
type ('a, 'b) heapC = HeapC of ('a * 'b) list
type ('a, 'b) heapD = HeapD of 'a * 'b list
//│ Defined type alias heapA[+'a]
//│ Defined class HeapA[+'a]
//│ Defined type alias heapB[+'a, +'b]
//│ Defined class HeapB[+'a, +'b]
//│ Defined type alias heapC[+'a, +'b]
//│ Defined class HeapC[+'a, +'b]
//│ Defined type alias heapD[+'a, +'b]
//│ Defined class HeapD[+'a, +'b]
//│ HeapA: '_0 -> HeapA['_0]
//│ HeapB: (('a, 'b,) & '_0) -> (HeapB['a, 'b] with {_0: '_0})
//│ HeapC: (list[('a, 'b,)] & '_0) -> (HeapC['a, 'b] with {_0: '_0})
//│ HeapD: ('_0, list['b] & '_1,) -> (HeapD['_0, 'b] with {_1: '_1})

(("hi", 1) :: Nil)
(("hi", 1) :: Nil):heap
(("hi", 1) :: ("bye", 2) :: Nil):heap
//│ res: Cons[(string, int,)] with {_1: Nil}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.182: 	(("hi", 1) :: Nil):heap
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not an instance of type `int`
//│ ║  l.182: 	(("hi", 1) :: Nil):heap
//│ ║         	        ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.122: 	type heapVar = HeapInt of int | Heap of heap and heap = (string * int) list
//│ ╙──       	                                                                  ^^^
//│ res: heap
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.183: 	(("hi", 1) :: ("bye", 2) :: Nil):heap
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not an instance of type `int`
//│ ║  l.183: 	(("hi", 1) :: ("bye", 2) :: Nil):heap
//│ ║         	        ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.122: 	type heapVar = HeapInt of int | Heap of heap and heap = (string * int) list
//│ ╙──       	                                                                  ^^^
//│ res: heap

let update h str i = (str,i)::h
//│ update: (list['a] & '_1) -> 'b -> 'c -> (Cons['a | ('b, 'c,)] with {_0: ('b, 'c,), _1: '_1})

/// FIXME
// define lambdas using fun
fun (env: env) _ -> []
let interp2 = (fun (env:env) opt ->
  match opt with
     None -> 0)
//│ ╔══[ERROR] Unsupported pattern shape:
//│ ║  l.211: 	fun (env: env) _ -> []
//│ ╙──       	    ^^^^^^^^^^^^
//│ res: error -> Nil
//│ ╔══[ERROR] Unsupported pattern shape:
//│ ║  l.212: 	let interp2 = (fun (env:env) opt ->
//│ ╙──       	                   ^^^^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: opt
//│ ║  l.213: 	  match opt with
//│ ╙──       	        ^^^
//│ interp2: error -> int

let head xs = match xs with
  Cons(x, xs) -> x
  | _ -> raise Error
//│ head: ((Cons[?] with {_0: 'a}) | ~Cons[?]) -> 'a

let head xs = match xs with
  x :: xs -> x
  | _ -> raise Error
//│ head: ((Cons[?] with {_0: 'a}) | ~Cons[?]) -> 'a

type ('a) bigHeap =
  NoHeap of 'a list
  | NonHeap of otherList
  | NonsHeap of (otherList * 'a) list
  and otherList = int list
//│ Defined type alias bigHeap[+'a]
//│ Defined class NoHeap[+'a]
//│ Defined class NonHeap
//│ Defined class NonsHeap[+'a]
//│ Defined type alias otherList
//│ NoHeap: (list['a] & '_0) -> (NoHeap['a] with {_0: '_0})
//│ NonHeap: (otherList & '_0) -> (NonHeap with {_0: '_0})
//│ NonsHeap: (list[(otherList, 'a,)] & '_0) -> (NonsHeap['a] with {_0: '_0})

:dp
type biglist = int option list
type listoflists = int list list
type stringintlist = ((string * int) list * int) list
type ('a, 'b) paramlist = (('a * int) list * 'b) list
//│ Parsed: TypeDef(Als, TypeName(biglist), List(), AppliedType(TypeName(list),List(AppliedType(TypeName(option),List(TypeName(int))))), List())
//│ TypeDef(Als, TypeName(listoflists), List(), AppliedType(TypeName(list),List(AppliedType(TypeName(list),List(TypeName(int))))), List())
//│ TypeDef(Als, TypeName(stringintlist), List(), AppliedType(TypeName(list),List(Tuple(List((None,Field(None,AppliedType(TypeName(list),List(Tuple(List((None,Field(None,TypeName(string))), (None,Field(None,TypeName(int))))))))), (None,Field(None,TypeName(int))))))), List())
//│ TypeDef(Als, TypeName(paramlist), List(TypeName('a), TypeName('b)), AppliedType(TypeName(list),List(Tuple(List((None,Field(None,AppliedType(TypeName(list),List(Tuple(List((None,Field(None,TypeName('a))), (None,Field(None,TypeName(int))))))))), (None,Field(None,TypeName('b))))))), List())
//│ Defined type alias biglist
//│ Defined type alias listoflists
//│ Defined type alias stringintlist
//│ Defined type alias paramlist[+'a, +'b]

// TODO
// FIXME
let check (v: ((int, int))) =
  match v with
   ((c, d)) -> c + d
//│ /!!!\ Uncaught error: java.lang.Exception: illegal pattern: Bra(rcd = false, Bra(rcd = false, Tup(_: Var(c), _: Var(d))))

// TODO
// FIXME
let checkagain (v: (int, int, (int, int))) =
  match v with
   (a, b, (c, d)) -> a + b + c + d
//│ ╔══[ERROR] type identifier not found: Tuple#3
//│ ╙──
//│ checkagain: (int, int, (int, int,),) -> error

// TODO
// FIXME
:dp
match n < 0 with
  true  -> 0
  | false  -> 1
//│ Parsed: If(IfOpApp(App(App(Var(<), Tup(_: Var(n))), Tup(_: IntLit(0))), Var(is), IfBlock(IfThen(Var(true), IntLit(0);IfThen(Var(false), IntLit(1)), None)
//│ ╔══[ERROR] Missing the otherwise case of test == (< (n,) (0,),) (false,)
//│ ║  l.284: 	match n < 0 with
//│ ║         	      ^^^^^^^^^^
//│ ║  l.285: 	  true  -> 0
//│ ║         	^^^^^^^^^^^^
//│ ║  l.286: 	  | false  -> 1
//│ ╙──       	^^^^^^^^^
//│ res: error
