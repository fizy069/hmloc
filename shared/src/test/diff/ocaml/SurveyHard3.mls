let rec clone x n = if n <= 0 then [] else x :: (clone x (n - 1))
   
let padZero l1 l2 =
  let numZeros = (List.length l1) - (List.length l2) in
  let absNumZeros = abs numZeros in
  if numZeros = 0
  then (l1, l2)
  else
    (let listZeros = clone 0 absNumZeros in
     if numZeros > 0 then (l1, (listZeros @ l2)) else ((listZeros @ l1), l2))
  
let rec removeZero l =
  match l with | [] -> [] | 0::t -> removeZero t | h::t -> l
  
let bigAdd l1 l2 =
  let add (l1,l2) =
    let f a x =
      let (carry,currentSum) = a in
      if x = []
      then (0, (carry :: currentSum))
      else
        (let (toSum1,toSum2) = x in
         let intermediateValue = (toSum1 + toSum2) + carry in
         let valueToAddToArray = intermediateValue mod 10 in
         let carry = intermediateValue / 10 in
         (carry, (valueToAddToArray :: currentSum))) in
    let base = (0, []) in
    let args = List.rev (List.combine l1 l2) in
    let (_,res) = List.fold_left f base args in res in
  removeZero (add (padZero l1 l2))
  
(* (@): 'a list -> 'a list -> 'a list is a list concatenation operator *)
(* List.length: 'a list -> int *)
(* List.fold_left: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a *)
(* List.combine: 'a list -> 'b list -> ('a * 'b) list zips two lists together *)
(* List.rev: 'a list -> 'a list reverses a list *)
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?a) <--- (?b) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.19       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.19       if x = []
//│ │                  ^
//│ │  - l.17     let f a x =
//│ │                     ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ │  - l.17     let f a x =
//│ │                     ^
//│ │  - l.22         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.22         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ [ERROR] Type `_ * _` does not match `_ list`
//│ 
//│         (_ * _) ~~~~ (?c) ~~~~ (?d) ~~~~ (?a) ---> (?b) <--- (_ list)
//│ 
//│ ◉ (_ * _) comes from
//│    - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│                                                    ^^^^^^^
//│   ◉ ((_ * _) list) comes from
//│   │  - lib. let List.combine: 'a list -> 'b list -> ('a * 'b) list
//│   │                                                  ^^^^^^^^^^^^^
//│   │  - l.28     let args = List.rev (List.combine l1 l2) in
//│   │                                 ^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c list) comes from
//│      - lib. let List.rev: 'a list -> 'a list
//│                           ^^^^^^^
//│ ◉ (?c) is assumed for
//│   ◉ (?c list) comes from
//│   │  - lib. let List.rev: 'a list -> 'a list
//│   │                                  ^^^^^^^
//│   │  - l.28     let args = List.rev (List.combine l1 l2) in
//│   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │  - l.29     let (_,res) = List.fold_left f base args in res in
//│   │                                                 ^^^^
//│   ▼ 
//│   ◉ (?d list) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                                            ^^^^^^^
//│ ◉ (?d) is assumed for
//│   ◉ (?d -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?d -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.29     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?a -> _) comes from
//│        - l.17     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?a -> _) comes from
//│      - l.17     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.17     let f a x =
//│ │                     ^
//│ │  - l.19       if x = []
//│ │                  ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.19       if x = []
//│ │                      ^^
//│ │ 
//│ ◉ (_ list) comes from
//│    - l.19       if x = []
//│                        ^^
//│ [ERROR] Type `_ list` does not match `_ * _`
//│ 
//│         (_ list) ---> (?b) <--- (?a) ~~~~ (?c) ~~~~ (?a) ---> (_ * _)
//│ 
//│ ◉ (_ list) comes from
//│ │  - l.19       if x = []
//│ │                      ^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.19       if x = []
//│ │                  ^
//│ │ 
//│ ◉ (?a) is assumed for
//│    - l.17     let f a x =
//│                       ^
//│   ◉ (?a -> _) comes from
//│      - l.17     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     ◉ (_ -> ?a -> _) comes from
//│     │  - l.17     let f a x =
//│     │                   ^^^^^
//│     │               let (carry,currentSum) = a in ...
//│     │               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│     │  - l.29     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     ▼ 
//│     ◉ (_ -> ?c -> _) comes from
//│        - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                     ^^^^^^^^^^^^^^
//│   ◉ (?c -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│ ◉ (?c) is assumed for
//│   ◉ (?c -> _) comes from
//│      - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│                                         ^^^^^^^^
//│     ◉ (_ -> ?c -> _) comes from
//│     ▲  - lib. let List.fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│     │                               ^^^^^^^^^^^^^^
//│     │  - l.29     let (_,res) = List.fold_left f base args in res in
//│     │                                          ^
//│     │ 
//│     ◉ (_ -> ?a -> _) comes from
//│        - l.17     let f a x =
//│                         ^^^^^
//│                     let (carry,currentSum) = a in ...
//│                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ◉ (?a -> _) comes from
//│      - l.17     let f a x =
//│                         ^^^
//│                   let (carry,currentSum) = a in ...
//│                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ◉ (?a) is assumed for
//│ │  - l.17     let f a x =
//│ │                     ^
//│ │  - l.22         (let (toSum1,toSum2) = x in
//│ │                                        ^
//│ ▼ 
//│ ◉ (_ * _) comes from
//│    - l.22         (let (toSum1,toSum2) = x in
//│                        ^^^^^^^^^^^^^^^
//│ U max: 33, total: 505
//│ UERR 3 errors
//│ L: 2 [([α121''], [α122''],) ~ list['a134''], [([α121''], [α122''],) - list[([α121''], [α122''],)] ~ list[α137''] - α137'', L: 0 [list[([α121''], [α122''],)] ~ list[α137''], list[([α121''], [α122''],)] <: list[α137'']]], [α137'' - list[α137''] ~ list[α124''] - α124'', L: 0 [list[α137''] ~ list[α124''], list[α137''] <: list[α124'']]], [α124'' - (α124'' -> α123'') ~ (α131'' -> α129'') - α131'', L: 1 [(α124'' -> α123'') ~ (α131'' -> α129''), [(α124'' -> α123'') - (α123'' -> (α124'' -> α123'')) ~ (α125'' -> (α131'' -> α129'')) - (α131'' -> α129''), L: 0 [(α123'' -> (α124'' -> α123'')) ~ (α125'' -> (α131'' -> α129'')), (α123'' -> (α124'' -> α123'')) :> (α125'' -> (α131'' -> α129''))]]]], α131'' <: α135'', α135'' :> list['a134'']]
//│ L: 0 [list['a114'''] ~ ([α117'''], [α118'''],), list['a114'''] <: α113''', α113''' :> α109''', α109''' <: ([α117'''], [α118'''],)]
//│ L: 2 [list['a134''] ~ ([α132''], [α133''],), list['a134''] <: α135'', α135'' :> α131'', [α131'' - (α131'' -> α129'') ~ (α124'' -> α123'') - α124'', L: 1 [(α131'' -> α129'') ~ (α124'' -> α123''), [(α131'' -> α129'') - (α125'' -> (α131'' -> α129'')) ~ (α123'' -> (α124'' -> α123'')) - (α124'' -> α123''), L: 0 [(α125'' -> (α131'' -> α129'')) ~ (α123'' -> (α124'' -> α123'')), (α125'' -> (α131'' -> α129'')) <: (α123'' -> (α124'' -> α123''))]]]], [α124'' - (α124'' -> α123'') ~ (α131'' -> α129'') - α131'', L: 1 [(α124'' -> α123'') ~ (α131'' -> α129''), [(α124'' -> α123'') - (α123'' -> (α124'' -> α123'')) ~ (α125'' -> (α131'' -> α129'')) - (α131'' -> α129''), L: 0 [(α123'' -> (α124'' -> α123'')) ~ (α125'' -> (α131'' -> α129'')), (α123'' -> (α124'' -> α123'')) :> (α125'' -> (α131'' -> α129''))]]]], α131'' <: ([α132''], [α133''],)]

