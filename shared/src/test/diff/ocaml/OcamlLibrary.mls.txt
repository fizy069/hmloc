type 'a list = Cons of 'a * 'a list | Nil
type 'a option = None | Some of 'a
let raise a = nothing
let fst (a, b) = a
let snd (a, b) = b
let abs: int -> int
let mod: int -> int -> int
let List_length: 'a list -> int
let List_mem: 'a -> 'a list -> bool
let List_append: 'a list -> 'a list -> 'a list
let (@): 'a list -> 'a list -> 'a list
let List_map: ('a -> 'b) -> 'a list -> 'b list
let List_fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
let (+.): float -> float -> float
let (-.): float -> float -> float
let ( *. ): float -> float -> float
let ( /. ): float -> float -> float
let ( ** ): float -> float -> float
let atan: float -> float
let sin: float -> float
let cos: float -> float
let tan: float -> float
