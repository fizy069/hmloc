:e
:unify
let h y = (not y, (if true then y else 5))
//│ ╔══[ERROR] Type `bool` does not match `int`
//│ ║  
//│ ╟──        bool <--- ?a ---> int 
//│ ║  
//│ ╟── `bool` comes from this type expression
//│ ║  builtin:56: 	let not: bool -> bool
//│ ║              	         ^^^^
//│ ╟── this reference has type `bool` and it flows from `?a`
//│ ║  l.3: 	let h y = (not y, (if true then y else 5))
//│ ║       	               ^
//│ ╟── this variable has type `?a`
//│ ║  l.3: 	let h y = (not y, (if true then y else 5))
//│ ║       	      ^
//│ ╟── this `then` branch has type `?a`
//│ ║  l.3: 	let h y = (not y, (if true then y else 5))
//│ ║       	                                ^
//│ ╟── this if-then-else expression has type `?a` and it flows into `int`
//│ ║  l.3: 	let h y = (not y, (if true then y else 5))
//│ ║       	                  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `int`
//│ ║  l.3: 	let h y = (not y, (if true then y else 5))
//│ ╙──     	                                       ^
//│ h: (bool & 'a) -> (bool, int | 'a,)


// FIXME no error!?
// :e
:unify
let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
let conflict x = mkpair (not x) x
//│ confluence: 'a -> (int | 'a)
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)




:e
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ╔══[ERROR] Type `(int -> int -> int) -> ?a` does not match `int`
//│ ║  
//│ ╟──        (int -> int -> int) -> ?a <--- ?b ---> int 
//│ ║  
//│ ╟── this application has type `(int -> int -> int) -> ?a`
//│ ║  l.44: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ║        	                                                   ^^^^^
//│ ╟── this reference has type `(int -> int -> int) -> ?a` and it flows from `?b`
//│ ║  l.44: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ║        	                                                   ^
//│ ╟── this variable has type `?b`
//│ ║  l.43: 	let rec digitsOfInt n =
//│ ║        	                    ^
//│ ╟── this operator application has type `?b` and it flows into `int`
//│ ║  l.44: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ║        	                                      ^^^^^^^^
//│ ╟── this type reference has type `int`
//│ ║  builtin:19: 	let ( / ): int -> int -> int
//│ ╙──            	                         ^^^
//│ ╔══[ERROR] Type `int` does not match `(int -> int -> int) -> ?a`
//│ ║  
//│ ╟──        int <--- ?b ---> (int -> int -> int) -> ?a 
//│ ║  
//│ ╟── `int` comes from this type expression
//│ ║  builtin:19: 	let ( / ): int -> int -> int
//│ ║              	           ^^^
//│ ╟── this reference has type `int` and it flows from `?b`
//│ ║  l.44: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ║        	                                       ^
//│ ╟── this variable has type `?b`
//│ ║  l.43: 	let rec digitsOfInt n =
//│ ║        	                    ^
//│ ╟── this reference has type `?b` and it flows into `(int -> int -> int) -> ?a`
//│ ║  l.44: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ║        	                                                   ^
//│ ╟── this application has type `(int -> int -> int) -> ?a`
//│ ║  l.44: 	  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ ╙──      	                                                   ^^^^^
//│ digitsOfInt: nothing -> list[nothing]

let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t)
//│ addNumbs: list[int] -> int

// FIXME
// :e
:tex
let digits n = digitsOfInt (abs n)
//│ digits: int -> list[nothing]

:e
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟──        int ---> ?a <--- bool 
//│ ║  
//│ ╟── this integer literal has type `int` and it flows into `?a`
//│ ║  l.97: 	  | [] -> 0
//│ ║        	          ^
//│ ╟── this match expression has type `?a`
//│ ║  l.96: 	  match digits n with
//│ ║        	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.97: 	  | [] -> 0 ...
//│ ║        	^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `?a` and it flows from `bool`
//│ ║  l.98: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `bool`
//│ ║  l.98: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ╙──      	                                                         ^^^^^
//│ additivePersistence: int -> (bool | int)



