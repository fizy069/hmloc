



// FIXME no error!?
// :e
:unify
let h y = (not y, (if true then y else 5))
//│ h: (bool & 'a) -> (bool, int | 'a,)


// FIXME no error!?
// :e
:unify
let confluence z = if true then z else 5
let mkpair x y = (x, confluence y)
let conflict x = mkpair (not x) x
//│ confluence: 'a -> (int | 'a)
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)




:e
let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ digitsOfInt: nothing -> anything

let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t)
//│ addNumbs: anything -> int

:e
:tex
let digits n = digitsOfInt (abs n)
//│ digits: int -> anything

:e
let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ╔══[ERROR] Type `int` does not match `bool`
//│ ║  
//│ ╟── this integer literal has type `int`
//│ ║  l.41: 	  | [] -> 0
//│ ║        	          ^
//│ ╟── this match expression has type `int`
//│ ║  l.40: 	  match digits n with
//│ ║        	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	  | [] -> 0 ...
//│ ║        	^^^^^^^^^^^
//│ ╟── this match expression has type `bool`
//│ ║  l.40: 	  match digits n with
//│ ║        	  ^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	  | [] -> 0 ...
//│ ║        	^^^^^^^^^^^
//│ ╟── this if-then-else expression has type `bool`
//│ ║  l.42: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ║        	            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── this `else` branch has type `bool`
//│ ║  l.42: 	  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ ║        	                                                         ^^^^^
//│ ╙── `bool` comes from this type expression
//│ additivePersistence: int -> (bool | int)



