

:unify
let h y = (not y, (if true then y else 5))
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) <--- (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ ▲  - lib. let not: bool -> bool
//│ │                  ^^^^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                        ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                                         ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let h y = (not y, (if true then y else 5))
//│                                                  ^
//│ h: (bool & 'a) -> (bool, int | 'a,)
//│ U max: 4, total: 6
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool :> α67', α67' <: α69', α69' :> int]






:unify
let h y = (not y, (if true then y else 5))
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) <--- (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ ▲  - lib. let not: bool -> bool
//│ │                  ^^^^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                        ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │ 
//│ ◉ (?a) is assumed here
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                                         ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.1  let h y = (not y, (if true then y else 5))
//│                                                  ^
//│ h: (bool & 'a) -> (bool, int | 'a,)
//│ U max: 4, total: 6
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool :> α74', α74' <: α76', α76' :> int]




:unify
let confluence z = if true then z else 5
confluence true
//│ confluence: 'a -> (int | 'a)
//│ res: bool | int


let mkpair x y = (x, confluence y)
let conflict x = mkpair (not x) x
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)



// TODO show nested unification error

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ digitsOfInt: int -> list[int]

let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t)
//│ addNumbs: list[int] -> int

// show nested unification error
// :e
// :tex
let digits n = digitsOfInt (abs n)
//│ digits: int -> list[int]


let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) is here
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ │                                                       ^^^^^
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed here
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed here
//│ ▲  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) is here
//│    - l.3    | [] -> 0
//│                     ^
//│ additivePersistence: int -> (bool | int)
//│ U max: 10, total: 16
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α204', α204' <: α190', α190' :> int]


let y x = [x]
let k a = if a then [2] else y true
//│ y: 'a -> list['a]
//│ k: bool -> list[bool | int]
