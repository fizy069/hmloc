

:unify
let h y = (not y, (if true then y else 5))
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?a) <--- (?b) ---> (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                                                ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                                         ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                        ^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ h: 'a -> (bool, 'a,)
//│   where
//│     'a = int, bool
//│ U max: 2, total: 7
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: α44', α44' :> α42', α42' <: bool]






:unify
let h y = (not y, (if true then y else 5))
//│ [ERROR] Type `int` does not match `bool`
//│ 
//│         (int) ---> (?a) <--- (?b) ---> (bool)
//│ 
//│ ◉ (int) comes from
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                                                ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ ▲  - l.1  let h y = (not y, (if true then y else 5))
//│ │                           ^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                                         ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │               ^
//│ │  - l.1  let h y = (not y, (if true then y else 5))
//│ │                        ^
//│ ▼ 
//│ ◉ (bool) comes from
//│    - lib. let not: bool -> bool
//│                    ^^^^
//│ h: 'a -> (bool, 'a,)
//│   where
//│     'a = int, bool
//│ U max: 2, total: 7
//│ UERR 1 errors
//│ L: 0 [int ~ bool, int <: α48', α48' :> α46', α46' <: bool]






:unify
let confluence z = if true then z else 5
confluence true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.2  confluence true
//│ │                    ^^^^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.1  let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.1  let confluence z = if true then z else 5
//│                                                  ^
//│ confluence: int -> int
//│ res: 'a
//│   where
//│     'a = bool, int
//│ U max: 2, total: 7
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α53, α53 <: α54, α54 :> int]




let mkpair x y = (x, confluence y)
let conflict x = mkpair (not x) x
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) <--- (?a) ---> (?b) ---> (?c) ---> (?d) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ ▲  - lib. let not: bool -> bool
//│ │                  ^^^^
//│ │  - l.2  let conflict x = mkpair (not x) x
//│ │                                      ^
//│ │  - l.2  let conflict x = mkpair (not x) x
//│ │                      ^
//│ │ 
//│ ◉ (?a) is assumed for
//│ │  - l.2  let conflict x = mkpair (not x) x
//│ │                      ^
//│ │  - l.2  let conflict x = mkpair (not x) x
//│ │                                         ^
//│ │  - l.1  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ │  - l.1  let mkpair x y = (x, confluence y)
//│ │                      ^
//│ │  - l.1  let mkpair x y = (x, confluence y)
//│ │                                         ^
//│ │  - l.-37let confluence z = if true then z else 5
//│ │                        ^
//│ ▼ 
//│ ◉ (?c) is assumed for
//│ │  - l.-37let confluence z = if true then z else 5
//│ │                        ^
//│ │  - l.-37let confluence z = if true then z else 5
//│ │                                         ^
//│ │  - l.-37let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?d) is assumed for
//│ ▲  - l.-37let confluence z = if true then z else 5
//│ │                            ^^^^^^^^^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.-37let confluence z = if true then z else 5
//│                                                  ^
//│ mkpair: 'a -> 'b -> ('a, int,)
//│ conflict: bool -> (bool, 'a,)
//│   where
//│     'a = bool, int
//│ U max: 2, total: 8
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool :> α64', α64' <: α66', α66' <: α67', α67' <: α68', α68' :> int]



let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ digitsOfInt: int -> list[int]

let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t)
//│ addNumbs: list[int] -> int

let digits n = digitsOfInt (abs n)
//│ digits: int -> list[int]


let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?a) ---> (?b) <--- (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ │                                                       ^^^^^
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?a) is assumed for
//│ │  - l.4    | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ │  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│ ▲  - l.2    match digits n with
//│ │           ^^^^^^^^^^^^^^^^^^^
//│ │           | [] -> 0 ...
//│ │           ^^^^^^^^^^^^^
//│ │ 
//│ ◉ (int) comes from
//│    - l.3    | [] -> 0
//│                     ^
//│ additivePersistence: 'a -> 'b
//│   where
//│     'b = bool, int
//│ U max: 6, total: 56
//│ UERR 1 errors
//│ L: 0 [bool ~ int, bool <: α148', α148' <: α134', α134' :> int]

// The unification chain terminates at a higher level
// because int is a direct parameter of the list
// if it were a type parameter that was unified with int
// the representation would handle it correctly
let y x = [x]
let k a = if a then [2] else y true
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.2  let k a = if a then [2] else y true
//│ │                                        ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.1  let y x = [x]
//│                 ^
//│   ◉ (?b * _ list) comes from
//│   │  - l.1  let y x = [x]
//│   │                    ^
//│   ▼ 
//│   ◉ (?a * ?a list) comes from
//│      - l.1  let y x = [x]
//│                        ^
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│   │  - l.1  let y x = [x]
//│   │                   ^^^
//│   │  - l.2  let k a = if a then [2] else y true
//│   │                                      ^^^^^^
//│   │  - l.2  let k a = if a then [2] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.2  let k a = if a then [2] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a0 list) comes from
//│      - l.2  let k a = if a then [2] else y true
//│                                 ^^^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 * ?a0 list) comes from
//│   ▲  - l.2  let k a = if a then [2] else y true
//│   │                              ^
//│   │ 
//│   ◉ (int * _ list) comes from
//│      - l.2  let k a = if a then [2] else y true
//│                                  ^
//│ ◉ (int) comes from
//│    - l.2  let k a = if a then [2] else y true
//│                                ^
//│ [ERROR] Type `bool` does not match `int`
//│ 
//│         (bool) ---> (?b) ~~~~ (?a) ~~~~ (?a0) ~~~~ (?a) ~~~~ (?a1) ~~~~ (int)
//│ 
//│ ◉ (bool) comes from
//│ │  - l.2  let k a = if a then [2] else y true
//│ │                                        ^^^^
//│ ▼ 
//│ ◉ (?b) is assumed for
//│    - l.1  let y x = [x]
//│                 ^
//│   ◉ (?b * ?a list) comes from
//│   │  - l.1  let y x = [x]
//│   │                    ^
//│   ▼ 
//│   ◉ (?a0 * ?a0 list) comes from
//│      - l.1  let y x = [x]
//│                        ^
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│     ◉ (?a0 * ?a0 list) comes from
//│     ▲  - l.1  let y x = [x]
//│     │                    ^
//│     │ 
//│     ◉ (?b * ?a list) comes from
//│        - l.1  let y x = [x]
//│                          ^
//│   ◉ (?a list) comes from
//│ ◉ (?a) is assumed for
//│   ◉ (?a list) comes from
//│     ◉ (?b * ?a list) comes from
//│     │  - l.1  let y x = [x]
//│     │                    ^
//│     ▼ 
//│     ◉ (?a0 * ?a0 list) comes from
//│        - l.1  let y x = [x]
//│                          ^
//│   ◉ (?a0 list) comes from
//│ ◉ (?a0) is assumed for
//│   ◉ (?a0 list) comes from
//│   │  - l.1  let y x = [x]
//│   │                   ^^^
//│   │  - l.2  let k a = if a then [2] else y true
//│   │                                      ^^^^^^
//│   │  - l.2  let k a = if a then [2] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^
//│   ▼ 
//│   ◉ (?c) is assumed for
//│   ▲  - l.2  let k a = if a then [2] else y true
//│   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^
//│   │ 
//│   ◉ (?a1 list) comes from
//│      - l.2  let k a = if a then [2] else y true
//│                                 ^^^
//│ ◉ (?a1) is assumed for
//│   ◉ (?a1 * ?a1 list) comes from
//│   ▲  - l.2  let k a = if a then [2] else y true
//│   │                              ^
//│   │ 
//│   ◉ (int * _ list) comes from
//│      - l.2  let k a = if a then [2] else y true
//│                                  ^
//│ ◉ (int) comes from
//│    - l.2  let k a = if a then [2] else y true
//│                                ^
//│ y: 'a -> list['a]
//│ k: bool -> list[bool]
//│ U max: 5, total: 31
//│ UERR 2 errors
//│ L: 1 [bool ~ int, bool <: α161', [α161' - ([[α161']], [[list['a163']]],) ~ ('a162', list['a162'],) - 'a162', L: 0 [([[α161']], [[list['a163']]],) ~ ('a162', list['a162'],), ([[α161']], [[list['a163']]],) <: ('a162', list['a162'],)]], ['a162' - list['a162'] ~ list['a158'] - 'a158', L: 0 [list['a162'] ~ list['a158'], list['a162'] <: α157', α157' :> list['a158']]], ['a158' - ('a158', list['a158'],) ~ ([int], [[list['a159']]],) - int, L: 0 [('a158', list['a158'],) ~ ([int], [[list['a159']]],), ('a158', list['a158'],) :> ([int], [[list['a159']]],)]]]
//│ L: 2 [bool ~ int, bool <: α161', [α161' - ([[α161']], [[list['a163']]],) ~ ('a162', list['a162'],) - 'a162', L: 0 [([[α161']], [[list['a163']]],) ~ ('a162', list['a162'],), ([[α161']], [[list['a163']]],) <: ('a162', list['a162'],)]], ['a162' - list['a162'] ~ list['a163'] - 'a163', L: 1 [list['a162'] ~ list['a163'], [list['a162'] - ('a162', list['a162'],) ~ ([[α161']], [[list['a163']]],) - list['a163'], L: 0 [('a162', list['a162'],) ~ ([[α161']], [[list['a163']]],), ('a162', list['a162'],) :> ([[α161']], [[list['a163']]],)]]]], ['a163' - list['a163'] ~ list['a162'] - 'a162', L: 1 [list['a163'] ~ list['a162'], [list['a163'] - ([[α161']], [[list['a163']]],) ~ ('a162', list['a162'],) - list['a162'], L: 0 [([[α161']], [[list['a163']]],) ~ ('a162', list['a162'],), ([[α161']], [[list['a163']]],) <: ('a162', list['a162'],)]]]], ['a162' - list['a162'] ~ list['a158'] - 'a158', L: 0 [list['a162'] ~ list['a158'], list['a162'] <: α157', α157' :> list['a158']]], ['a158' - ('a158', list['a158'],) ~ ([int], [[list['a159']]],) - int, L: 0 [('a158', list['a158'],) ~ ([int], [[list['a159']]],), ('a158', list['a158'],) :> ([int], [[list['a159']]],)]]]
