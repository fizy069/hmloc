

:unify
let h y = (not y, (if true then y else 5))
//│ h: (bool & 'a) -> (bool, int | 'a,)
//│ U max: 5, total: 9
//│ UERR 1 errors
//│ L: 0 [bool ~ [[int]], α67' <: [[[bool]]], [[[α67']]] <: α69', [[int]] <: α69']






:unify
let h y = (not y, (if true then y else 5))
//│ h: (bool & 'a) -> (bool, int | 'a,)
//│ U max: 5, total: 9
//│ UERR 1 errors
//│ L: 0 [bool ~ [[int]], α74' <: [[[bool]]], [[[α74']]] <: α76', [[int]] <: α76']




:unify
let confluence z = if true then z else 5
confluence true
//│ confluence: 'a -> (int | 'a)
//│ res: bool | int
//│ U max: 8, total: 13
//│ UERR 1 errors
//│ L: 0 [int ~ [[[[[bool]]]]], [[int]] <: α88, [[[[[bool]]]]] <: α88]


let mkpair x y = (x, confluence y)
let conflict x = mkpair (not x) x
//│ mkpair: 'a -> 'b -> ('a, int | 'b,)
//│ conflict: (bool & 'a) -> (bool, int | 'a,)
//│ U max: 16, total: 29
//│ UERR 1 errors
//│ L: 0 [int ~ [[[bool]]], [[int]] <: α108', [[[[[[[α105']]]]]]] <: α108', α105' <: [[[bool]]]]



// TODO show nested unification error

let rec digitsOfInt n =
  if n <= 0 then [] else (digitsOfInt (n / 10)) @ [n mod 10]
//│ digitsOfInt: int -> list[int]

let rec addNumbs n = match n with | [] -> 0 | h::t -> h + (addNumbs t)
//│ addNumbs: list[int] -> int

// show nested unification error
// :e
// :tex
let digits n = digitsOfInt (abs n)
//│ digits: int -> list[int]


let rec additivePersistence n =
  match digits n with
  | [] -> 0
  | h::t -> if (addNumbs (h :: t)) >= 10 then false else true
//│ additivePersistence: int -> (bool | int)
//│ U max: 58, total: 157
//│ UERR 1 errors
//│ L: 0 [int ~ [[[[bool]]]], [[int]] <: α190', [[[[bool]]]] <: α190']


let y x = [x]
let k a = if a then [2] else y true
//│ y: 'a -> list['a]
//│ k: bool -> list[bool | int]
//│ U max: 12, total: 29
//│ UERR 1 errors
//│ L: 1 [int ~ [[[[[bool]]]]], [[int]] <: 'a221', ['a221' - list['a221'] ~ list['a225'] - 'a225', [[[list['a221']]]] <: α220', [[[[list['a225']]]]] <: α220'], [[[[[bool]]]]] <: 'a225']
