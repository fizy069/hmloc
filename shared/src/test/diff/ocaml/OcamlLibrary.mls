// ocaml standard definitions for type checking before import
// After typechecking copy changes to OcamlLibrary.mls.txt
// for actual import
:NoJS
:OcamlParser

type 'a list = Cons of 'a * 'a list | Nil
type 'a option = None | Some of 'a
let raise a = nothing
let fst (a, b) = a
let snd (a, b) = b
//│ Defined type alias list[+'a]
//│ Defined class Cons[+'a]
//│ Defined class Nil
//│ Defined type alias option[+'a]
//│ Defined class None
//│ Defined class Some[+'a]
//│ Cons: ('_0 & 'a, list['a] & '_1,) -> (Cons['a] with {_0: '_0, _1: '_1})
//│ Nil: Nil
//│ None: None
//│ Some: '_0 -> Some['_0]
//│ raise: anything -> nothing
//│ fst: ('a, anything,) -> 'a
//│ snd: (anything, 'a,) -> 'a

let abs: int -> int
let mod: int -> int -> int
//│ abs: int -> int
//│ mod: int -> int -> int

let List_length: 'a list -> int
let List_mem: 'a -> 'a list -> bool
let List_append: 'a list -> 'a list -> 'a list // substitute infix operator '@' with this function
//│ List_length: list[?] -> int
//│ List_mem: anything -> list[?] -> bool
//│ List_append: list['a] -> list['a] -> list['a]

let List_map: ('a -> 'b) -> 'a list -> 'b list
let List_fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
//│ List_map: ('a -> 'b) -> list['a] -> list['b]
//│ List_fold_left: ('a -> 'b -> 'a) -> 'a -> list['b] -> 'a
