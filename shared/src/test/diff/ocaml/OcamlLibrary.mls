:OcamlParser

// common data types
type 'a list = Cons of 'a * 'a list | Nil
type 'a option = None | Some of 'a
//│ Defined type alias list[+'a]
//│ Defined class Cons[+'a]
//│ Defined class Nil
//│ Defined type alias option[+'a]
//│ Defined class None
//│ Defined class Some[+'a]
//│ Cons: ('a, list['a],) -> list['a]
//│ Nil: list[nothing]
//│ None: option[nothing]
//│ Some: 'a -> option['a]

// helper functions
let raise: 'a -> nothing
let fst: ('a * 'b) -> 'a
let snd: ('a * 'b) -> 'b
let print_int: int -> unit
let print_string: string -> unit
let print_endline: string -> unit
let string_of_int: int -> string
let failwith: string -> 'a
//│ raise: anything -> nothing
//│ fst: ('a, anything,) -> 'a
//│ snd: (anything, 'a,) -> 'a
//│ print_int: int -> unit
//│ print_string: string -> unit
//│ print_endline: string -> unit
//│ string_of_int: int -> string
//│ failwith: string -> nothing

// string
let (^): string -> string -> string
let String_length: string -> int
//│ ^: string -> string -> string
//│ String_length: string -> int

// arithmetic
let (+): int -> int -> int
let (-): int -> int -> int
let ( * ): int -> int -> int
let ( / ): int -> int -> int
let ( % ): int -> int -> int
let abs: int -> int
let mod: int -> int -> int
let succ: int -> int
let pred: int -> int
//│ +: int -> int -> int
//│ -: int -> int -> int
//│ *: int -> int -> int
//│ /: int -> int -> int
//│ %: int -> int -> int
//│ abs: int -> int
//│ mod: int -> int -> int
//│ succ: int -> int
//│ pred: int -> int

// comparison operators
let (<): 'a -> 'a -> bool
let (<=): 'a -> 'a -> bool
let (>): 'a -> 'a -> bool
let (>=): 'a -> 'a -> bool
let (<>): 'a -> 'a -> bool
let (==): 'a -> 'a -> bool
let (!=): 'a -> 'a -> bool
//│ <: anything -> anything -> bool
//│ <=: anything -> anything -> bool
//│ >: anything -> anything -> bool
//│ >=: anything -> anything -> bool
//│ <>: anything -> anything -> bool
//│ ==: anything -> anything -> bool
//│ !=: anything -> anything -> bool

// list
let List_length: 'a list -> int
let List_mem: 'a -> 'a list -> bool
let List_append: 'a list -> 'a list -> 'a list
let (@): 'a list -> 'a list -> 'a list
let List_map: ('a -> 'b) -> 'a list -> 'b list
let List_fold_left : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a
let List_hd: 'a list -> 'a
let List_rev: 'a list -> 'a list
let List_combine: 'a list -> 'b list -> ('a * 'b) list
//│ List_length: list[?] -> int
//│ List_mem: anything -> list[?] -> bool
//│ List_append: list['a] -> list['a] -> list['a]
//│ @: list['a] -> list['a] -> list['a]
//│ List_map: ('a -> 'b) -> list['a] -> list['b]
//│ List_fold_left: ('a -> 'b -> 'a) -> 'a -> list['b] -> 'a
//│ List_hd: list['a] -> 'a
//│ List_rev: list['a] -> list['a]
//│ List_combine: list['a] -> list['b] -> list[('a, 'b,)]

// float
let (+.): float -> float -> float
let (-.): float -> float -> float
let ( *. ): float -> float -> float
let ( /. ): float -> float -> float
let ( ** ): float -> float -> float
let atan: float -> float
let sin: float -> float
let cos: float -> float
let tan: float -> float
//│ +.: float -> float -> float
//│ -.: float -> float -> float
//│ *.: float -> float -> float
//│ /.: float -> float -> float
//│ **: float -> float -> float
//│ atan: float -> float
//│ sin: float -> float
//│ cos: float -> float
//│ tan: float -> float

let (&&): bool -> bool -> bool
let (||): bool -> bool -> bool
let not: bool -> bool
//│ &&: bool -> bool -> bool
//│ ||: bool -> bool -> bool
//│ not: bool -> bool
