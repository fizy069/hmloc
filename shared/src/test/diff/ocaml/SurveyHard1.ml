let rec sepConcat sep sl =
  match sl with
  | [] -> ""
  | h::t ->
      let f a x = a ^ (sep ^ x) in
      let base = h in let l = t in List.fold_left f base l
 
let stringOfList f l = "[" ^ ((sepConcat "; " List.map (f, l)) ^ "]")
 
(* (^): string -> string -> string is a string concatenation operator *)
(* List.fold_left: ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a *)
//│ UERR 7 errors
//│ [string ~ [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]], α103' <: [[[[string]]]], [[α103']] <: α102', [[α103']] <: α102', ['a98'] <: α103', 'a98' <: [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]]]
//│ [string ~ [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]], [[string]] <: α99', [[[['a98']]]] <: α99', 'a98' <: [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]]]
//│ [string ~ [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]], 'a98' <: [[[[[[string]]]]]], 'a98' <: [[α100']], [['a98']] <: α100', 'a98' <: [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]]]
//│ [string ~ [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]], [[[string]]] <: α100', [['a98']] <: α100', 'a98' <: [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]]]
//│ [string ~ [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]], α100' <: [[[[string]]]], [[α100']] <: α101', [[α100']] <: α101', [['a98']] <: α100', 'a98' <: [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]]]
//│ [string ~ [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]], [[[string]]] <: α100', 'a98' <: [[α100']], ['a98'] <: α103', ['a98'] <: α103', 'a98' <: [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]]]
//│ [string ~ [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]], [[[string]]] <: α100', 'a98' <: [[α100']], [[[[[['a98']]]]]] <: α109', [[[[[['a98']]]]]] <: α109', 'a98' <: [[[[[[[(([α92'], [α93'],) -> α111')]]]]]]]]
