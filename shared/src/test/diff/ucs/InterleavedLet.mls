:NewParser

fun f(x) =
  if x ==
    let v = 0
    v then v
    else 0
//│ f: int -> int

class Option
class Some(value): Option
class None: Option
class Either
class Left(leftValue): Either
class Right(rightValue): Either
//│ Defined class Option
//│ Defined class Some
//│ Defined class None
//│ Defined class Either
//│ Defined class Left
//│ Defined class Right
//│ Option: () -> Option
//│ Some: 'value -> (Some with {value: 'value})
//│ None: () -> None
//│ Either: () -> Either
//│ Left: 'leftValue -> (Left with {leftValue: 'leftValue})
//│ Right: 'rightValue -> (Right with {rightValue: 'rightValue})

fun q(x) =
  if
    x is Some and x is Some and x is Some then 0
//│ q: Some -> int

// FIXME
:w
fun p(x, y) =
  if
    x is Some and y is None then 0
    y is Some and x is Some then 1
    x is Some and y is Some then 0
//│ ╔══[WARNING] duplicated branch
//│ ╙──
//│ p: (Some, None | Some,) -> int

fun h(x, y) =
  if x is
    None then y
    let y_square = y * y
    Some(z) then z + y_square
//│ h: (None | Some & {value: int}, int,) -> int

h(Some(5), 6)
//│ res: int

fun h(x, y) =
  if x is
    None then y
    let y_square = y * y
    Some(y_square) then 0
//│ h: (None | Some, int,) -> int

fun f(a, y) =
  if a is
    Some(v) and v is
      Left(x) then x
      let y = v + 1
      Right(x) then x + y
    else 0
//│ f: (Some & {value: int} | ~Some, anything,) -> int

:pe
fun q(a) =
  if a is
    Left(x) then x
    let y = a + 1
    then y
//│ ╔══[PARSE ERROR] Expected an expression; found a 'then'/'else' clause instead
//│ ║  l.75: 	    let y = a + 1
//│ ║        	            ^^^^^
//│ ║  l.76: 	    then y
//│ ╙──      	^^^^^^^^^^
//│ q: (Left with {leftValue: 'leftValue}) -> 'leftValue

class A()
class B()
//│ Defined class A
//│ Defined class B
//│ A: () -> A
//│ B: () -> B

fun w() =
  if
    A then "A"
    let y = 0
    B then "B"
    else "?"
//│ w: () -> string

w()
//│ res: string

fun i(x) =
  if x is
    A() then "A"
    let y = 0
    B() then "B"
//│ i: (A | B) -> string

fun inc(x) = x + 1
//│ inc: int -> int

fun qq(x, z) =
  if x ==
    let y = inc(z)
    y * y then 0
    else 0
//│ qq: (int, int,) -> int

fun bruh(x) =
  if
    x == 0 then 0
    let y = 1
    else y
//│ bruh: int -> int

fun f1(x) = x + 1
fun f2(x, y) = x + y
//│ f1: int -> int
//│ f2: (int, int,) -> int

fun ff(x) =
  if
    x == 0 then 0
    let y = f1(x)
    let z = f2(x, y)
    z == 1 then 1
    z == 2 then 2
    else 0
//│ ff: int -> int

fun ip(y) =
  if q(y) and
    let z = inc(y)
    y == z * z then "bruh"
  else "rocks"
//│ ip: nothing -> string

fun tr(x) =
  if x is
    Some(v) then v
    let tmp = 1
    None then tmp
//│ tr: (None | (Some with {value: 'value})) -> (int | 'value)

class Pair(fst, snd)
class List
class Nil: List
class Cons(head, tail): List
//│ Defined class Pair
//│ Defined class List
//│ Defined class Nil
//│ Defined class Cons
//│ Pair: ('fst, 'snd,) -> (Pair with {fst: 'fst, snd: 'snd})
//│ List: () -> List
//│ Nil: () -> Nil
//│ Cons: ('head, 'tail,) -> (Cons with {head: 'head, tail: 'tail})

fun cat2(s, t) = concat(s)(t)
fun cat3(a, b, c) = cat2(cat2(a, b), c)
//│ cat2: (string, string,) -> string
//│ cat3: (string, string, string,) -> string

:js
//│ /!\ Unrecognized option :js
fun showList(xs) =
  if xs is
    Nil              then ""
    Cons(head, Nil())  then toString(head)
    Cons(head, tail) then cat3(toString(head), ", ", showList(tail))
//│ showList: 'a -> string
//│   where
//│     'a <: Cons & {tail: 'a} | Nil

let zeroToThree = Cons(0, Cons(1, Cons(2, Cons(3, Nil()))))
//│ zeroToThree: Cons & {head: int, tail: Cons & {head: int, tail: Cons & {head: int, tail: Cons & {head: int, tail: Nil}}}}

showList(zeroToThree)
//│ res: string

// FIXME: This needs lifting functions.
fun mapPartition(f, xs) =
  if xs is
    Nil then Pair(Nil(), Nil())
    Cons(x, xs) and f(x) is
      let res = mapPartition(f, xs)
      let l = res.fst
      let r = res.snd
      Left(v)  then Pair(Cons(v, l), r)
      Right(v) then Pair(l, Cons(v, r))
//│ mapPartition: ('head -> ((Left with {leftValue: 'head0}) | (Right with {rightValue: 'head1})), 'a,) -> (Pair with {fst: 'fst, snd: 'tail})
//│   where
//│     'tail :> (Cons with {head: 'head1, tail: 'tail}) | Nil
//│     'fst :> Nil | (Cons with {head: 'head0, tail: 'fst})
//│     'a <: (Cons with {head: 'head, tail: 'a}) | Nil

// FIXME: Something wrong with code generation.
mapPartition(x => if x % 2 == 0 then Left(x) else Right(x), zeroToThree)
//│ res: Pair with {fst: 'tail, snd: 'snd}
//│   where
//│     'snd :> Nil | (Cons with {head: int, tail: 'snd})
//│     'tail :> (Cons with {head: int, tail: 'tail}) | Nil

fun mn(a) =
  if a is
    Some(x) and x is
      Left(a)  then "left-defined"
      let y = x + 1
      Right(b) then "right-defined"
    None       then "undefined"
//│ mn: (None | Some & {value: nothing}) -> string
