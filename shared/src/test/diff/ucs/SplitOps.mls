:NewParser

class Option
class Some(value): Option
class None: Option
//│ Defined class Option
//│ Defined class Some
//│ Defined class None
//│ Option: () -> Option
//│ Some: 'value -> (Some with {value: 'value})
//│ None: () -> None

class Either
class Left(leftValue): Either
class Right(rightValue): Either
//│ Defined class Either
//│ Defined class Left
//│ Defined class Right
//│ Either: () -> Either
//│ Left: 'leftValue -> (Left with {leftValue: 'leftValue})
//│ Right: 'rightValue -> (Right with {rightValue: 'rightValue})

:e
:ge
fun f(x) =
  if x
    is Left(v) then 0
    is Right(v) then 1
    <> undefined then 2
//│ ╔══[ERROR] Missing the otherwise case of test <> (x,) (undefined,)
//│ ║  l.26: 	  if x
//│ ║        	     ^
//│ ║  l.27: 	    is Left(v) then 0
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.28: 	    is Right(v) then 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	    <> undefined then 2
//│ ╙──      	^^^^^^^^^^^^^^^^
//│ f: anything -> error

:e
:ge
fun f(x) =
  if x
    is Some(xv) and y is Some(yv) then xv + yv
    is None() and y is None() then 0
//│ ╔══[ERROR] The match is not exhaustive.
//│ ║  l.45: 	    is Some(xv) and y is Some(yv) then xv + yv
//│ ║        	                    ^^^^^^^^^^^^^
//│ ╟── The scrutinee at this position misses 1 case.
//│ ║  l.45: 	    is Some(xv) and y is Some(yv) then xv + yv
//│ ║        	                    ^
//│ ╟── [Missing Case 1/1] `None`
//│ ╟── It first appears here.
//│ ║  l.46: 	    is None() and y is None() then 0
//│ ╙──      	                       ^^^^^^
//│ f: anything -> error

class A()
class B()
//│ Defined class A
//│ Defined class B
//│ A: () -> A
//│ B: () -> B

fun f(a, b) =
  if a
    is A() and b is B() then 0
//│ f: (A, B,) -> int

class C()
//│ Defined class C
//│ C: () -> C

:e
:ge
fun f(a, b, c) =
  if a
    == 0 and b is B() and c is C() then 0
//│ ╔══[ERROR] Missing the otherwise case of test == (a,) (0,)
//│ ║  l.78: 	  if a
//│ ║        	     ^
//│ ║  l.79: 	    == 0 and b is B() and c is C() then 0
//│ ╙──      	^^^^^^^^
//│ f: (anything, anything, anything,) -> error

fun f(x) =
  if x
    is A() then "A"
    is B() then "B"
//│ f: (A | B) -> string

fun sumOpt(x, y) =
  if x
    is Some(xv) and y is
      Some(yv) then xv + yv
      None() then xv
    is None() and y is
      Some(yv) then yv
      None() then 0
//│ sumOpt: (None | Some & {value: int}, None | Some & {value: int},) -> int

fun f(x, y, z) =
  if x is A() and y
    == z then 1
    is B() then 0
//│ f: (A, nothing, int,) -> int
