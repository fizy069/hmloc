

// Preamble
def plus1 x = x + 1
//│ plus1: int -> int

class JustIntBox: { value: int }
  method Get = this.value
//│ Defined class JustIntBox
//│ Defined JustIntBox.Get: JustIntBox -> int

ib0 = JustIntBox { value = 0 }
//│ ib0: JustIntBox

ib0.Get
//│ res: int

// Extend with some function.
class MappableIntBox: JustIntBox
  method Map f = MappableIntBox { value = f this.value }
//│ Defined class MappableIntBox
//│ Defined MappableIntBox.Map: MappableIntBox -> (nothing -> (int & 'value)) -> (MappableIntBox with {value: 'value})

mib0 = MappableIntBox { value = 0 }
//│ mib0: MappableIntBox

mib0.Get
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.27: 	mib0.Get
//│ ║        	^^^^^^^^
//│ ╟── application of type `MappableIntBox` does not match type `?this`
//│ ║  l.24: 	mib0 = MappableIntBox { value = 0 }
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?this0`
//│ ║  l.27: 	mib0.Get
//│ ╙──      	^^^^
//│ res: int

mib0.Map
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.39: 	mib0.Map
//│ ║        	^^^^^^^^
//│ ╟── application of type `MappableIntBox` is not an instance of type `JustIntBox`
//│ ║  l.24: 	mib0 = MappableIntBox { value = 0 }
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `JustIntBox`
//│ ║  l.39: 	mib0.Map
//│ ║        	^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.19: 	class MappableIntBox: JustIntBox
//│ ╙──      	                      ^^^^^^^^^^
//│ res: (nothing -> (int & 'value)) -> (MappableIntBox with {value: 'value})

mib0.Map plus1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.54: 	mib0.Map plus1
//│ ║        	^^^^^^^^
//│ ╟── application of type `MappableIntBox` is not an instance of type `JustIntBox`
//│ ║  l.24: 	mib0 = MappableIntBox { value = 0 }
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `JustIntBox`
//│ ║  l.54: 	mib0.Map plus1
//│ ║        	^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.19: 	class MappableIntBox: JustIntBox
//│ ╙──      	                      ^^^^^^^^^^
//│ res: MappableIntBox

// Naughty map...
:e
mib0.Map (fun _ -> "str")
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.71: 	mib0.Map (fun _ -> "str")
//│ ║        	^^^^^^^^
//│ ╟── application of type `MappableIntBox` is not an instance of type `JustIntBox`
//│ ║  l.24: 	mib0 = MappableIntBox { value = 0 }
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `JustIntBox`
//│ ║  l.71: 	mib0.Map (fun _ -> "str")
//│ ║        	^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.19: 	class MappableIntBox: JustIntBox
//│ ╙──      	                      ^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.71: 	mib0.Map (fun _ -> "str")
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of type `int`
//│ ║  l.71: 	mib0.Map (fun _ -> "str")
//│ ║        	                   ^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.20: 	  method Map f = MappableIntBox { value = f this.value }
//│ ║        	                                          ^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.7: 	class JustIntBox: { value: int }
//│ ╙──     	                           ^^^
//│ res: MappableIntBox with {value: string}





class BetterIntBox: { value: int }
  method Get = this.value
  method Map f = BetterIntBox { value = f this.value }
//│ Defined class BetterIntBox
//│ Defined BetterIntBox.Get: BetterIntBox -> int
//│ Defined BetterIntBox.Map: BetterIntBox -> (int -> (int & 'value)) -> (BetterIntBox with {value: 'value})


