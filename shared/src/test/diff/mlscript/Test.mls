
class Person: { name: string; age: int }
def Person = fun n -> fun a -> Person { name = n; age = a }
//│ Defined class Person
//│ Person: (string & 'name) -> (int & 'age) -> (Person with {age: 'age, name: 'name})

class Animal: {}
//│ Defined class Animal

def test = fun x -> case x of
  { Person -> x.age
  | Animal -> 0
  }
//│ test: (Animal | (Person\name with {age: 'age})) -> ('age | int)

test: Person & {age: 'a} | Animal -> 'a | 0
//│ res: Animal -> int | 0 | Person

test: (Person & {age: int} | Animal) -> int
//│ res: (Animal | Person) -> int

def a = Animal{}
//│ a: Animal

a: {}
//│ res: anything

def p = Person "Bob" 42
//│ p: Person

p: { age: int }
//│ res: {age: int}

test a
//│ res: int

test p
//│ res: int

1: int
//│ res: int


def f: 'a -> 'a & string
//│ f: nothing

def f: 'a -> ('a & string)
//│ f: 'a -> (string & 'a)

