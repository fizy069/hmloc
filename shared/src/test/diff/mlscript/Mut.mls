
class A: { x: int }
//│ Defined class A

def muta1: MutArray[int]
//│ muta1: MutArray[int]

muta1[2] <- 666

:e
muta1[1] <- false
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.11: 	muta1[1] <- false
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `false` is not an instance of type `int`
//│ ║  l.11: 	muta1[1] <- false
//│ ║        	            ^^^^^
//│ ╟── Note: constraint arises from assigned array element:
//│ ║  l.11: 	muta1[1] <- false
//│ ║        	^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.5: 	def muta1: MutArray[int]
//│ ╙──     	                    ^^^





def a1: Array[int]
//│ a1: Array[int]

muta1 : Array[int]
//│ res: Array[int]

:e
a1: MutArray[int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.36: 	a1: MutArray[int]
//│ ║        	^^
//│ ╟── type `Array[int]` does not match type `MutArray[int]`
//│ ║  l.29: 	def a1: Array[int]
//│ ║        	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[int]`
//│ ║  l.36: 	a1: MutArray[int]
//│ ║        	^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.36: 	a1: MutArray[int]
//│ ╙──      	    ^^^^^^^^^^^^^
//│ res: MutArray[int]





a2 = A {x=3}
//│ a2: A

def rc1 : { mut x : int}
rc1 = {mut x = 1}
//│ rc1: {mut x: int}
//│ {mut x: 'x}
//│   where
//│     'x :> int
//│   <:  rc1:
//│ {mut x: int}

rc1.x <- 3

:e
rc1.x <- true
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.70: 	rc1.x <- true
//│ ║        	^^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.70: 	rc1.x <- true
//│ ║        	         ^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.70: 	rc1.x <- true
//│ ║        	^^^^^
//│ ╟── from type reference:
//│ ║  l.58: 	def rc1 : { mut x : int}
//│ ╙──      	                    ^^^






immrcd = { x = 1: int }
immtpl = (1: int,)
//│ immrcd: {x: int}
//│ immtpl: (int,)

immrcd.x
immtpl._1
immtpl[0]
//│ res: int
//│ res: int
//│ res: int | undefined

:e
immrcd.x <- 0
immtpl._1 <- 0
immtpl[0] <- 0
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.102: 	immrcd.x <- 0
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record field of type `int` is not mutable
//│ ║  l.89: 	immrcd = { x = 1: int }
//│ ║        	           ^^^^^
//│ ╟── but it flows into assigned field with expected type `?x`
//│ ║  l.102: 	immrcd.x <- 0
//│ ╙──       	       ^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.103: 	immtpl._1 <- 0
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.90: 	immtpl = (1: int,)
//│ ║        	          ^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.103: 	immtpl._1 <- 0
//│ ╙──       	       ^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.104: 	immtpl[0] <- 0
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.90: 	immtpl = (1: int,)
//│ ║        	          ^
//│ ╟── but it flows into assigned array element with expected type `?a`
//│ ║  l.104: 	immtpl[0] <- 0
//│ ╙──       	^^^^^^^^^











rc2 = {mut x = 1}
rc2.x <- true
rc2.x <- "hello"
//│ rc2: {mut x: 'x}
//│   where
//│     'x :> int

// TODO let-bound values should be treated as monomorphic – see mismatch in:
rc2
//│ res: {mut x: 'x}
//│   where
//│     'x :> int

def g r = (fun x -> r) (r.x <- 3)
g rc1
g rc2
//│ g: ({mut x: in int} & 'a) -> 'a
//│ res: {mut x: int}
//│ res: {mut x: 'x}
//│   where
//│     'x :> int

:e 
g {x = 3}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.166: 	g {x = 3}
//│ ║         	^^^^^^^^^
//│ ╟── record field of type `int` is not mutable
//│ ║  l.166: 	g {x = 3}
//│ ╙──       	   ^^^^^
//│ res: {x: int}



def ga r = (fun x -> r) (r[1] <- 6)
ga muta1
//│ ga: (MutArray['a] & 'b) -> 'b
//│   where
//│     'a :> int
//│ res: MutArray[int]

:e
ga a1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.185: 	ga a1
//│ ║         	^^^^^
//│ ╟── type `Array[int]` does not match type `MutArray[?a]`
//│ ║  l.29: 	def a1: Array[int]
//│ ║        	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[?b]`
//│ ║  l.185: 	ga a1
//│ ║         	   ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.177: 	def ga r = (fun x -> r) (r[1] <- 6)
//│ ║         	                         ^
//│ ╟── from assignment:
//│ ║  l.177: 	def ga r = (fun x -> r) (r[1] <- 6)
//│ ╙──       	                         ^^^^^^^^^
//│ res: Array[int]






trait T
//│ Defined trait T

def t1 : T & {mut x : int; y : bool}
t1 = T {mut x = 2; y = false}
t2 = T {x = 2}
//│ t1: T & {mut x: int, y: bool}
//│ {mut x: 'x, y: false} & #T
//│   where
//│     'x :> int
//│   <:  t1:
//│ T & {mut x: int, y: bool}
//│ t2: {x: int} & #T

t1.x <- 4

:e
t1.y <- true
t2.x <- 3
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.225: 	t1.y <- true
//│ ║         	^^^^^^^^^^^^
//│ ╟── record field of type `bool` is not mutable
//│ ║  l.211: 	def t1 : T & {mut x : int; y : bool}
//│ ║         	                           ^^^^^^^^
//│ ╟── but it flows into assigned field with expected type `?y`
//│ ║  l.225: 	t1.y <- true
//│ ╙──       	   ^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.226: 	t2.x <- 3
//│ ║         	^^^^^^^^^
//│ ╟── record field of type `int` is not mutable
//│ ║  l.213: 	t2 = T {x = 2}
//│ ║         	        ^^^^^
//│ ╟── but it flows into assigned field with expected type `?x`
//│ ║  l.226: 	t2.x <- 3
//│ ╙──       	   ^







class B: { mut x: int; y: bool }
  method Foo = this.x
//│ Defined class B
//│ Defined B.Foo: B -> int

def b1 : B
b1 = B { mut x = 2; y = true }
b2 = B { mut x = 1; y = false}
//│ b1: B
//│ B & {y: true}
//│   <:  b1:
//│ B
//│ b2: B & {y: false}

b1.Foo
//│ res: int

:e
b1.Foo <- 0
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.270: 	b1.Foo <- 0
//│ ║         	^^^^^^^^^^^
//│ ╟── type `B` does not have field 'Foo'
//│ ║  l.257: 	def b1 : B
//│ ║         	         ^
//│ ╟── but it flows into reference with expected type `{Foo :> ?Foo}`
//│ ║  l.270: 	b1.Foo <- 0
//│ ║         	^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.270: 	b1.Foo <- 0
//│ ╙──       	^^^^^^





:e
b3 = B {x = 6; y = false}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.289: 	b3 = B {x = 6; y = false}
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^
//│ ╟── record field of type `int` is not mutable
//│ ║  l.289: 	b3 = B {x = 6; y = false}
//│ ╙──       	        ^^^^^
//│ b3: B & {y: false}



:e
b2.y <- b1.y
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.301: 	b2.y <- b1.y
//│ ║         	^^^^^^^^^^^^
//│ ╟── record field of type `?y` is not mutable
//│ ║  l.252: 	class B: { mut x: int; y: bool }
//│ ║         	                       ^^^^^^^
//│ ╟── but it flows into assigned field with expected type `?y0`
//│ ║  l.301: 	b2.y <- b1.y
//│ ╙──       	   ^




:e
b2.x <- b1.y
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.316: 	b2.x <- b1.y
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `bool` is not an instance of type `int`
//│ ║  l.252: 	class B: { mut x: int; y: bool }
//│ ║         	                          ^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.316: 	b2.x <- b1.y
//│ ║         	        ^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.316: 	b2.x <- b1.y
//│ ║         	^^^^
//│ ╟── from type reference:
//│ ║  l.252: 	class B: { mut x: int; y: bool }
//│ ╙──       	                  ^^^






b2.x <- b1.x
b1.x <- a2.x

def h : B -> int -> int
def h b i = (fun _ -> b.x) (b.x <- i) 
//│ h: B -> int -> int
//│ {mut x: in 'x out 'a} -> 'x -> 'a
//│   <:  h:
//│ B -> int -> int

h b1 2
//│ res: int

:e
h {mut x = 4} 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.352: 	h {mut x = 4} 2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record literal of type `{mut x: ?x}` is not an instance of type `B`
//│ ║  l.352: 	h {mut x = 4} 2
//│ ║         	  ^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.341: 	def h : B -> int -> int
//│ ╙──       	        ^
//│ res: int




def mt1: (mut int, mut bool)
def mt2: (int, int)
def mt3: (mut int, mut int)
def mt4: (mut bool, bool, bool)
mt4 = (mut true, false, false)
//│ mt1: (mut int, mut bool,)
//│ mt2: (int, int,)
//│ mt3: (mut int, mut int,)
//│ mt4: (mut bool, bool, bool,)
//│ (mut 'a, false, false,)
//│   where
//│     'a :> true
//│   <:  mt4:
//│ (mut bool, bool, bool,)

mt1 : (int, bool)
//│ res: (int, bool,)

def emt: (mut int)
emt._1
//│ emt: (mut int,)
//│ res: int

k1 = (mut 233, "hello", mut true)
k1._1 <- k1._1 + 1
//│ k1: (mut 'a, string, mut 'b,)
//│   where
//│     'b :> true
//│     'a :> int

:e
k1._2 <- 233
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.398: 	k1._2 <- 233
//│ ║         	^^^^^^^^^^^^
//│ ╟── tuple field of type `string` is not mutable
//│ ║  l.390: 	k1 = (mut 233, "hello", mut true)
//│ ║         	               ^^^^^^^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.398: 	k1._2 <- 233
//│ ╙──       	   ^^




mt1 = (mut 3, mut false)
//│ (mut 'a, mut 'b,)
//│   where
//│     'b :> false
//│     'a :> int
//│   <:  mt1:
//│ (mut int, mut bool,)

def amf : MutArray['a] -> 'a
//│ amf: MutArray['a] -> 'a

amf mt3
//│ res: int

:e
amf mt4
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.427: 	amf mt4
//│ ║         	^^^^^^^
//│ ╟── type `(mut bool, bool, bool,)` does not match type `MutArray[?a]`
//│ ║  l.370: 	def mt4: (mut bool, bool, bool)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[?a]`
//│ ║  l.427: 	amf mt4
//│ ║         	    ^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.420: 	def amf : MutArray['a] -> 'a
//│ ╙──       	          ^^^^^^^^^^^^
//│ res: bool





:e
a1[0] <- 1
mt1[0] <- mt2._1
mt4[3] <- true
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.447: 	a1[0] <- 1
//│ ║         	^^^^^^^^^^
//│ ╟── type `Array[int]` does not match type `MutArray[?a]`
//│ ║  l.29: 	def a1: Array[int]
//│ ║        	        ^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[?a]`
//│ ║  l.447: 	a1[0] <- 1
//│ ╙──       	^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.448: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `bool`
//│ ║  l.367: 	def mt1: (mut int, mut bool)
//│ ║         	              ^^^
//│ ╟── Note: constraint arises from assigned array element:
//│ ║  l.448: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.367: 	def mt1: (mut int, mut bool)
//│ ╙──       	                       ^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.448: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `bool`
//│ ║  l.368: 	def mt2: (int, int)
//│ ║         	          ^^^
//│ ╟── but it flows into field selection with expected type `bool`
//│ ║  l.448: 	mt1[0] <- mt2._1
//│ ║         	          ^^^^^^
//│ ╟── Note: constraint arises from assigned array element:
//│ ║  l.448: 	mt1[0] <- mt2._1
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.367: 	def mt1: (mut int, mut bool)
//│ ╙──       	                       ^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.449: 	mt4[3] <- true
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── type `(mut bool, bool, bool,)` does not match type `MutArray[?a]`
//│ ║  l.370: 	def mt4: (mut bool, bool, bool)
//│ ║         	         ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MutArray[?a]`
//│ ║  l.449: 	mt4[3] <- true
//│ ╙──       	^^^
















mt1._1 <- mt2._1
mt1._1 <- mt1._1 * 2
mt1._2 <- false
mt3[0] <- let tmp = mt3[1] in case tmp of { undefined -> 0 | _ -> tmp }
mt3[1] <- mt1._1

:e
:ge
mt1._1 <- mt1._2
mt1._2 <- 1
mt1._1 <- (b1.t <- 4)
(mt1._1 <- b1.t) <- 4
b1.x <- 1 + 2 <- 4
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.519: 	mt1._1 <- mt1._2
//│ ║         	^^^^^^^^^^^^^^^^
//│ ╟── type `bool` is not an instance of `int`
//│ ║  l.367: 	def mt1: (mut int, mut bool)
//│ ║         	                       ^^^^
//│ ╟── but it flows into field selection with expected type `int`
//│ ║  l.519: 	mt1._1 <- mt1._2
//│ ║         	          ^^^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.519: 	mt1._1 <- mt1._2
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.367: 	def mt1: (mut int, mut bool)
//│ ╙──       	              ^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.520: 	mt1._2 <- 1
//│ ║         	^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not an instance of type `bool`
//│ ║  l.520: 	mt1._2 <- 1
//│ ║         	          ^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.520: 	mt1._2 <- 1
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.367: 	def mt1: (mut int, mut bool)
//│ ╙──       	                       ^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.521: 	mt1._1 <- (b1.t <- 4)
//│ ║         	           ^^^^^^^^^
//│ ╟── type `B` does not have field 't'
//│ ║  l.257: 	def b1 : B
//│ ║         	         ^
//│ ╟── but it flows into reference with expected type `{mut t: in ?t}`
//│ ║  l.521: 	mt1._1 <- (b1.t <- 4)
//│ ║         	           ^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.521: 	mt1._1 <- (b1.t <- 4)
//│ ╙──       	           ^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.521: 	mt1._1 <- (b1.t <- 4)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── assignment of type `unit` is not an instance of type `int`
//│ ║  l.521: 	mt1._1 <- (b1.t <- 4)
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.521: 	mt1._1 <- (b1.t <- 4)
//│ ║         	^^^^^^
//│ ╟── from type reference:
//│ ║  l.367: 	def mt1: (mut int, mut bool)
//│ ╙──       	              ^^^
//│ ╔══[ERROR] Illegal assignment
//│ ║  l.522: 	(mt1._1 <- b1.t) <- 4
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── cannot assign to assignment
//│ ║  l.522: 	(mt1._1 <- b1.t) <- 4
//│ ╙──       	^^^^^^^^^^^^^^^^
//│ res: error
//│ ╔══[ERROR] Illegal assignment
//│ ║  l.523: 	b1.x <- 1 + 2 <- 4
//│ ║         	            ^^^^^^
//│ ╟── cannot assign to integer literal
//│ ║  l.523: 	b1.x <- 1 + 2 <- 4
//│ ╙──       	            ^






















def f : {mut _1 : int} -> int -> unit
def g : (mut int, bool) -> int -> unit
//│ f: {mut _1: int} -> int -> unit
//│ g: (mut int, bool,) -> int -> unit

def f a n = a._1 <- n
//│ {mut _1: in 'a} -> 'a -> unit
//│   <:  f:
//│ {mut _1: int} -> int -> unit

f mt1 1

:e
f mt2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.623: 	f mt2
//│ ║         	^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.368: 	def mt2: (int, int)
//│ ╙──       	          ^^^
//│ res: int -> unit



:e
g (1, true) 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.635: 	g (1, true) 2
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.635: 	g (1, true) 2
//│ ╙──       	   ^



w1 = 3 with {mut x = 4}
w1.x <- 3
//│ w1: int & {mut x: 'x}
//│   where
//│     'x :> int

w1.x
//│ res: int

def st1 : (int, )
def st2 : (mut int, )
//│ st1: (int,)
//│ st2: (mut int,)

st1 = (3,)
st2 = (mut 4,)
//│ (int,)
//│   <:  st1:
//│ (int,)
//│ (mut 'a,)
//│   where
//│     'a :> int
//│   <:  st2:
//│ (mut int,)

st2._1 <- 8

:e
st1._1 <- 9
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.673: 	st1._1 <- 9
//│ ║         	^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.654: 	def st1 : (int, )
//│ ║         	           ^^^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.673: 	st1._1 <- 9
//│ ╙──       	    ^^




def am1 : Array[(mut int)]
//│ am1: Array[(mut int,)]

def foreach : Array['a] -> ('a -> unit) -> Array['a]
//│ foreach: Array['a] -> ('a -> unit) -> Array['a]

foreach am1 (fun x -> x[0] <- 1)
foreach am1 (fun y -> y._1 <- 2)
//│ res: Array[(mut int,)]
//│ res: Array[(mut int,)]

:e
(1,2,3)[0] <- true
(1,2,3)._1 <- "hello"
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.699: 	(1,2,3)[0] <- true
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── tuple literal of type `(int, int, int,)` does not match type `MutArray[?a]`
//│ ║  l.699: 	(1,2,3)[0] <- true
//│ ╙──       	^^^^^^^
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.700: 	(1,2,3)._1 <- "hello"
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── tuple field of type `int` is not mutable
//│ ║  l.700: 	(1,2,3)._1 <- "hello"
//│ ║         	 ^
//│ ╟── but it flows into assigned field with expected type `?a`
//│ ║  l.700: 	(1,2,3)._1 <- "hello"
//│ ╙──       	        ^^






:e
(0,)["oops"]
(mut 0,)["oops"] <- 1
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.723: 	(0,)["oops"]
//│ ║         	^^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of type `int`
//│ ║  l.723: 	(0,)["oops"]
//│ ╙──       	     ^^^^^^
//│ res: int | undefined
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.724: 	(mut 0,)["oops"] <- 1
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of type `int`
//│ ║  l.724: 	(mut 0,)["oops"] <- 1
//│ ╙──       	         ^^^^^^





oops = "oops"
arr = (mut 0,)
//│ oops: string
//│ arr: (mut 'a,)
//│   where
//│     'a :> int

:e
arr[oops]
arr[oops] <- 1
//│ ╔══[ERROR] Type mismatch in array access:
//│ ║  l.751: 	arr[oops]
//│ ║         	^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of type `int`
//│ ║  l.743: 	oops = "oops"
//│ ║         	       ^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.751: 	arr[oops]
//│ ╙──       	    ^^^^
//│ res: int | undefined
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.752: 	arr[oops] <- 1
//│ ║         	^^^^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of type `int`
//│ ║  l.743: 	oops = "oops"
//│ ║         	       ^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.752: 	arr[oops] <- 1
//│ ╙──       	    ^^^^








// TODO support typing of mutable local variable

x = 1
//│ x: int

:e
x <- 2
//│ ╔══[ERROR] Illegal assignment
//│ ║  l.786: 	x <- 2
//│ ║         	^^^^^^
//│ ╟── cannot assign to reference
//│ ║  l.786: 	x <- 2
//│ ╙──       	^
//│ res: error



x
//│ res: int



fun x -> (x.a <- 0, x.a + 1)
//│ res: {mut a: int} -> (unit, int,)

def foo x y = (x.a <- 0, x.a + 1, x.a, x.a <- y)
//│ foo: {mut a: in 'a | int out int & 'a0} -> 'a -> (unit, int, 'a0, unit,)

def foo x y z = (x.a <- 0, x.a + 1, x.a, x.a <- y, z x.a)
//│ foo: {mut a: in 'a | int out int & 'a0} -> 'a -> ('a0 -> 'b) -> (unit, int, 'a0, unit, 'b,)

foo { mut a = 1 } 2 add
//│ res: (unit, int, int, unit, int -> int,)

:e
foo { mut a = 1 } 2 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.815: 	foo { mut a = 1 } 2 3
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` is not a function
//│ ║  l.815: 	foo { mut a = 1 } 2 3
//│ ║         	                    ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.808: 	def foo x y z = (x.a <- 0, x.a + 1, x.a, x.a <- y, z x.a)
//│ ╙──       	                                                   ^
//│ res: (unit, int, int, unit, nothing,)





:e
foo { mut a = "oops" } 2
foo { a = 1 } 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.832: 	foo { mut a = "oops" } 2
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of type `int`
//│ ║  l.832: 	foo { mut a = "oops" } 2
//│ ║         	              ^^^^^^
//│ ╟── but it flows into mutable record field with expected type `int`
//│ ║  l.832: 	foo { mut a = "oops" } 2
//│ ║         	          ^^^^^^^^^^
//│ ╟── Note: constraint arises from field selection:
//│ ║  l.808: 	def foo x y z = (x.a <- 0, x.a + 1, x.a, x.a <- y, z x.a)
//│ ╙──       	                           ^^^
//│ res: ((int | string) -> 'a) -> (unit, int, int | string, unit, 'a,)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.833: 	foo { a = 1 } 2
//│ ║         	^^^^^^^^^^^^^
//│ ╟── record field of type `int` is not mutable
//│ ║  l.833: 	foo { a = 1 } 2
//│ ╙──       	      ^^^^^
//│ res: (int -> 'a) -> (unit, int, int, unit, 'a,)








