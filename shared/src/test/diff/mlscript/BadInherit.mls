
class Parent1: { name: string }
//│ Defined class Parent1

class Parent2: { name: int }
//│ Defined class Parent2

:e
:ge
class Child: Parent1 & Parent2
//│ ╔══[ERROR] class Child cannot inherit from class Parent2 as it already inherits from class Parent1
//│ ║  l.10: 	class Child: Parent1 & Parent2
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^


type Child = Parent1 & Parent2
def Child: (Parent1 & Parent2) -> Child
//│ Defined type alias Child
//│ Child: nothing -> Child

def f(x:Child) = x.name
//│ f: Child -> nothing

def f(x:Child) = x: nothing
//│ f: Child -> nothing

:pe
def c = Child(Parent1{name="A"} with Parent2{name="B"})
//│ /!\ Parse error: Expected ")":1:33, found "with Paren" at l.28:33: def c = Child(Parent1{name="A"} with Parent2{name="B"})

:e
def c = Child(Parent1{name="A"})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.32: 	def c = Child(Parent1{name="A"})
//│ ║        	        ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Parent1` is not an instance of type `Parent2`
//│ ║  l.32: 	def c = Child(Parent1{name="A"})
//│ ║        	              ^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `Parent2`
//│ ║  l.32: 	def c = Child(Parent1{name="A"})
//│ ║        	             ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.17: 	def Child: (Parent1 & Parent2) -> Child
//│ ║        	           ^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.17: 	def Child: (Parent1 & Parent2) -> Child
//│ ╙──      	                      ^^^^^^^
//│ c: Child





:e
:ge
type Sly1 = Parent2
class Child2: Parent1 & Sly1
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.57: 	class Child2: Parent1 & Sly1
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias Sly1


:e
:ge
type Sly2[A] = A
class Child2: Sly2[Parent1] & Parent2
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.67: 	class Child2: Sly2[Parent1] & Parent2
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias Sly2[+A]


:e
:ge
class Crazy[A]: A & { name: A }
//│ ╔══[ERROR] cannot inherit from a type variable
//│ ║  l.76: 	class Crazy[A]: A & { name: A }
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^^


class Crazy[A]: { name: A }
def Crazy: 'a -> (Crazy['a] & 'a)
//│ Defined class Crazy[+A]
//│ Crazy: 'a -> (Crazy['a] & 'a)

Crazy
//│ res: 'a -> (Crazy['a] & 'a)

def c = Crazy({ name = "Bob"; age = 42 })
//│ c: Crazy[{age: int, name: string}] with {age: int, name: string}

:e
c: nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.94: 	c: nothing
//│ ║        	^
//│ ╟── record literal of type `{age: int, name: string}` does not match type `~Crazy[?a]`
//│ ║  l.90: 	def c = Crazy({ name = "Bob"; age = 42 })
//│ ║        	              ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `~Crazy[?a0]`
//│ ║  l.94: 	c: nothing
//│ ║        	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.94: 	c: nothing
//│ ╙──      	   ^^^^^^^
//│ res: nothing





def d = Crazy(Parent1{name = "Bob"})
//│ d: nothing

d: nothing
//│ res: nothing


:e
class Stupid: Parent1 | Parent2
//│ ╔══[ERROR] cannot inherit from a type union
//│ ║  l.121: 	class Stupid: Parent1 | Parent2
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^

:e
class Stupid: Parent1 -> Parent2
//│ ╔══[ERROR] cannot inherit from a function type
//│ ║  l.127: 	class Stupid: Parent1 -> Parent2
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^

:e
class Stupid: ~Parent1
//│ ╔══[ERROR] cannot inherit from a type negation
//│ ║  l.133: 	class Stupid: ~Parent1
//│ ╙──       	      ^^^^^^^^^^^^^^^^


:e // TODO don't report several times
:ge
class Cycle1: Cycle2
class Cycle2: Cycle1
type Stutter = Cycle1
//│ ╔══[ERROR] illegal cycle involving type Cycle1
//│ ║  l.141: 	class Cycle1: Cycle2
//│ ╙──       	      ^^^^^^^^^^^^^^
//│ ╔══[ERROR] illegal cycle involving type Cycle2
//│ ║  l.142: 	class Cycle2: Cycle1
//│ ╙──       	      ^^^^^^^^^^^^^^
//│ ╔══[ERROR] illegal cycle involving type Cycle1
//│ ║  l.143: 	type Stutter = Cycle1
//│ ╙──       	     ^^^^^^^^^^^^^^^^




:e
def c = Cycle1 error
c: Cycle1
//│ ╔══[ERROR] identifier not found: Cycle1
//│ ║  l.158: 	def c = Cycle1 error
//│ ╙──       	        ^^^^^^
//│ c: error
//│ ╔══[ERROR] type identifier not found: Cycle1
//│ ║  l.159: 	c: Cycle1
//│ ╙──       	   ^^^^^^
//│ res: error




type N[A] = ~A
//│ Defined type alias N[-A]

:e
:ge
class Cycle: N[Cycle]
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.177: 	class Cycle: N[Cycle]
//│ ╙──       	      ^^^^^^^^^^^^^^^




:ng
//│ /!\ Unrecognized option :ng
// TODO forbid
class D: int
//│ Defined class D

:ge
add (D{}) 2
//│ res: int


// TODO forbid
class E: 1
//│ Defined class E

:e
E{}: 1
E{}: int
E{} + 1
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.201: 	E{}: 1
//│ ║         	^^^
//│ ╟── application of type `E` does not match type `1`
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.201: 	E{}: 1
//│ ║         	     ^
//│ ╟── Note: class E is defined at:
//│ ║  l.197: 	class E: 1
//│ ╙──       	      ^
//│ res: 1
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.202: 	E{}: int
//│ ║         	^^^
//│ ╟── application of type `E` is not an instance of `int`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.202: 	E{}: int
//│ ║         	     ^^^
//│ ╟── Note: class E is defined at:
//│ ║  l.197: 	class E: 1
//│ ╙──       	      ^
//│ res: int
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.203: 	E{} + 1
//│ ║         	^^^^^
//│ ╟── application of type `E` is not an instance of type `int`
//│ ║  l.203: 	E{} + 1
//│ ║         	^^^
//│ ╟── Note: class E is defined at:
//│ ║  l.197: 	class E: 1
//│ ╙──       	      ^
//│ res: int










:e
:ge
class F: nothing
F{}
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.248: 	class F: nothing
//│ ╙──       	      ^^^^^^^^^^
//│ ╔══[ERROR] identifier not found: F
//│ ║  l.249: 	F{}
//│ ╙──       	^
//│ res: error




:e
class String
class Bool
//│ Defined class String
//│ Defined class Bool



"1" : String
true : Bool
//│ res: String
//│ res: Bool


:e
class Weird: {} | {}
//│ ╔══[ERROR] cannot inherit from a type union
//│ ║  l.276: 	class Weird: {} | {}
//│ ╙──       	      ^^^^^^^^^^^^^^



:e
:ge
class A
type Id[T] = T
class B: Id[A]
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.287: 	class B: Id[A]
//│ ╙──       	      ^^^^^^^^
//│ Defined class A
//│ Defined type alias Id[+T]



:e // TODO improve prov of the TV
class Class3A
class Class3B: Class3A & 'a
//│ ╔══[ERROR] cannot inherit from a type variable
//│ ║  l.298: 	class Class3B: Class3A & 'a
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^
//│ Defined class Class3A


