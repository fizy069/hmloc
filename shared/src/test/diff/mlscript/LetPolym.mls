

def test f =
  let local g x = g (f x)
  in (local add 1, local (fun y -> fun z -> y + z) 2)
//│ test: (int -> int) -> (int -> int, int -> int,)

:re // TODO
f_g = test succ
f_g._1 42
f_g._2 42
//│ f_g: (int -> int, int -> int,)
//│ res: int
//│ res: int


def test f =
  let local g x = g (f x)
  in (local add 1, local concat "ok")
//│ test: ((int | string) -> nothing) -> (int -> int, string -> string,)

:e
test succ
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.23: 	test succ
//│ ║        	^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of `int`
//│ ║  l.19: 	  in (local add 1, local concat "ok")
//│ ╙──      	                                ^^^^
//│ res: (int -> int, string -> string,)




def test =
  (fun f ->
    let local g x = f (g x)
    in local
  ) add
//│ test: ('a -> int) -> 'a -> int -> int

def test =
  (fun f -> fun x ->
    let local g = f (g x)
    in local
  ) add "1"
//│ test: (string -> int) -> int -> int

def test =
  (fun f -> fun x ->
    let local g = f (g x)
    in local add "1"
  )
//│ test: ((int -> int) -> string -> 'a) -> int -> 'a

fun f -> fun x ->
  let local = (fun y -> f y) x
  in ()
//│ res: ('a -> anything) -> 'a -> ()

:e
res add "1"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.62: 	res add "1"
//│ ║        	^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of `int`
//│ ║  l.62: 	res add "1"
//│ ║        	        ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.57: 	  let local = (fun y -> f y) x
//│ ║        	                             ^
//│ ╟── from reference:
//│ ║  l.57: 	  let local = (fun y -> f y) x
//│ ╙──      	                          ^
//│ res: ()






fun f -> fun x ->
  let local = f ((fun y -> y) x)
  in ()
//│ res: ('a -> anything) -> 'a -> ()

:e
res add "1"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.88: 	res add "1"
//│ ║        	^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of `int`
//│ ║  l.88: 	res add "1"
//│ ║        	        ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.83: 	  let local = f ((fun y -> y) x)
//│ ║        	                              ^
//│ ╟── from application:
//│ ║  l.83: 	  let local = f ((fun y -> y) x)
//│ ╙──      	                 ^^^^^^^^^^^^^^
//│ res: ()





def id: 'a -> 'a
//│ id: 'a -> 'a

fun f -> fun x ->
  let local = f (id x)
  in ()
//│ res: ('a -> anything) -> 'a -> ()


