
class Parent: {}
//│ Defined class Parent

class Child: Parent
//│ Defined class Child

def p = Parent{}
//│ p: Parent

def c = Child(p)
//│ c: Child

:e
c.name
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.15: 	c.name
//│ ║        	^^^^^^
//│ ╟── application of type `Child` does not have field 'name'
//│ ║  l.11: 	def c = Child(p)
//│ ║        	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `{name: ?name}`
//│ ║  l.15: 	c.name
//│ ║        	^
//│ ╟── Note: class Child is defined at:
//│ ║  l.5: 	class Child: Parent
//│ ╙──     	      ^^^^^
//│ res: nothing





c: Child
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.34: 	c: Child
//│ ║        	^
//│ ╟── application of type `Child` is not an instance of type `Parent`
//│ ║  l.11: 	def c = Child(p)
//│ ║        	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Parent`
//│ ║  l.34: 	c: Child
//│ ║        	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.34: 	c: Child
//│ ║        	   ^^^^^
//│ ╟── from type reference:
//│ ║  l.5: 	class Child: Parent
//│ ║       	             ^^^^^^
//│ ╟── Note: class Child is defined at:
//│ ║  l.5: 	class Child: Parent
//│ ╙──     	      ^^^^^
//│ res: Child

c: Parent
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.55: 	c: Parent
//│ ║        	^
//│ ╟── application of type `Child` is not an instance of `Parent`
//│ ║  l.11: 	def c = Child(p)
//│ ║        	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Parent`
//│ ║  l.55: 	c: Parent
//│ ║        	^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.55: 	c: Parent
//│ ║        	   ^^^^^^
//│ ╟── Note: class Child is defined at:
//│ ║  l.5: 	class Child: Parent
//│ ╙──     	      ^^^^^
//│ res: Parent

c: Parent & Child
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.73: 	c: Parent & Child
//│ ║        	^
//│ ╟── application of type `Child` is not an instance of type `Parent`
//│ ║  l.11: 	def c = Child(p)
//│ ║        	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Parent`
//│ ║  l.73: 	c: Parent & Child
//│ ║        	^
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.73: 	c: Parent & Child
//│ ║        	   ^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.73: 	c: Parent & Child
//│ ║        	   ^^^^^^
//│ ╟── Note: class Child is defined at:
//│ ║  l.5: 	class Child: Parent
//│ ╙──     	      ^^^^^
//│ res: nothing

c: Parent & Child & {}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.94: 	c: Parent & Child & {}
//│ ║        	^
//│ ╟── application of type `Child` is not an instance of type `Parent`
//│ ║  l.11: 	def c = Child(p)
//│ ║        	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Parent`
//│ ║  l.94: 	c: Parent & Child & {}
//│ ║        	^
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.94: 	c: Parent & Child & {}
//│ ║        	   ^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.94: 	c: Parent & Child & {}
//│ ║        	   ^^^^^^
//│ ╟── Note: class Child is defined at:
//│ ║  l.5: 	class Child: Parent
//│ ╙──     	      ^^^^^
//│ res: nothing

c: Parent & anything & Child & {}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.115: 	c: Parent & anything & Child & {}
//│ ║         	^
//│ ╟── application of type `Child` is not an instance of type `Parent`
//│ ║  l.11: 	def c = Child(p)
//│ ║        	        ^^^^^^^^
//│ ╟── but it flows into reference with expected type `Parent`
//│ ║  l.115: 	c: Parent & anything & Child & {}
//│ ║         	^
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.115: 	c: Parent & anything & Child & {}
//│ ║         	   ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.115: 	c: Parent & anything & Child & {}
//│ ║         	   ^^^^^^
//│ ╟── Note: class Child is defined at:
//│ ║  l.5: 	class Child: Parent
//│ ╙──     	      ^^^^^
//│ res: nothing

