// Example from Code reuse through polymorphic variants

//************************** PRELIMINARIES *************************

class NotFound
class Success: { result: anything }
//│ Defined class NotFound
//│ Defined class Success

def NotFound = NotFound {}
def Success result = Success { result }
//│ NotFound: NotFound
//│ Success: 'result -> (Success with {result: 'result})

type Tuple[A, B] = (A, B)
//│ Defined type alias Tuple[+A, +B]

def Tuple l r = (l, r)
//│ Tuple: 'a -> 'b -> ('a, 'b,)

class Nil
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
//│ Nil: Nil

def Cons head tail = Cons { head; tail }
//│ Cons: ('head & 'A) -> (List['A] & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})

def eq: string -> string -> bool
//│ eq: string -> string -> bool

rec def list_assoc s l = case l of {
  | Cons ->
      if eq l.head._1 s then Success l.head._2
      else list_assoc s l.tail
  | Nil -> NotFound
  }
//│ list_assoc: string -> 'a -> (NotFound | (Success with {result: 'result}))
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil

list_assoc "2" (Cons (Tuple "2" 1) Nil )
//│ res: NotFound | Success & {result: int}

// ***************************** Var *******************************

class Expr
class Lambda
//│ Defined class Expr
//│ Defined class Lambda

class Var: Lambda & { name: string }
//│ Defined class Var

def eval_var sub v = case v of {
  | Var -> let res = list_assoc v.name sub in case res of {
          | NotFound -> v
          | Success -> res.result
          }
  }
//│ eval_var: 'a -> (Var & 'result) -> 'result
//│   where
//│     'a <: (Cons[?] with {head: {_1: string, _2: 'result}, tail: 'a}) | Nil

// *************************** Lambda ********************************

class Abs[a]: Lambda & { name: string; body: a }
class App[a]: Lambda & { lhs: a; rhs: a }
//│ Defined class Abs[+a]
//│ Defined class App[+a]


def incr: {a: int} -> unit
// def incr x = x.a <- x.a + 1
//│ incr: {a: int} -> unit


def gensym: () -> (unit, {a: 'a},)
// def gensym = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ gensym: () -> (unit, {a: nothing},)

def int_to_string: int -> string
//│ int_to_string: int -> string

def eval_lambda eval_rec subst v = case v of {
  | Var -> eval_var subst v
  | App -> let l2 = eval_rec subst v.lhs in
    let l1 = eval_rec subst v.rhs in
    case l1 of {
    | Abs -> eval_rec (Cons (Tuple l1.name l2) Nil) l1.body
    | _ -> App { lhs = l1; rhs = l2 }
    }
  | Abs -> let new_name = int_to_string ((gensym ())._2.a) in
    Abs { name = new_name;
          body = eval_rec (Cons (Tuple v.name (Var { name = new_name })) subst) v.body }
  }
//│ eval_lambda: (((Cons[('a, 'rhs | Var,) | 'A] with {head: ('a, 'rhs | Var,), tail: Nil | 'tail}) | 'tail) -> 'body -> ('rhs & 'b & ((Abs[?] with {body: 'body, name: 'a}) | 'lhs & ~#Abs))) -> ('c & List['A] & 'tail) -> ((Abs[?] with {body: 'body, name: 'a}) | (App[?] with {lhs: 'body, rhs: 'body}) | Var & 'b) -> (Abs['rhs] | (App['rhs] with {lhs: 'lhs, rhs: 'rhs}) | 'b)
//│   where
//│     'c <: (Cons[?] with {head: {_1: string, _2: 'b}, tail: 'c}) | Nil

rec def eval1 subst = eval_lambda eval1 subst
//│ eval1: (List[?] & 'tail) -> 'b -> ('rhs | 'c)
//│   where
//│     'tail <: (Cons[?] with {head: {_1: string, _2: 'd}, tail: 'tail}) | Nil
//│     'd <: 'body & (Abs[?] & {body: 'b} | 'lhs & ~#Abs) & 'rhs
//│     'body :> Var | 'c
//│           <: 'd & 'b
//│     'c :> Abs['body] & {body: 'body} | App['a] & {lhs: 'lhs, rhs: 'rhs}
//│     'a :> App['a] & {lhs: 'lhs, rhs: 'rhs} | Var | 'c
//│     'lhs :> App['a] & {lhs: 'lhs, rhs: 'rhs} | Var
//│          <: 'a & 'b
//│     'rhs :> Var | 'c
//│          <: 'd & 'body & 'a & 'b
//│     'b <: Abs[?] & {body: 'b} | App[?] & {lhs: 'b, rhs: 'b} | Var & 'rhs

// ------------- OCaml's type -------------
// val eval_lambda :
//   ((string *
//     ([> `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a | `App of 'a * 'a | `Var of string ] -> 'a = <fun>
//
//   val eval1 :
//   (string * ([ `Abs of string * 'a | `App of 'a * 'a | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************* Expr ******************************

class Num: Expr & { num: int }
class Add[a]: Expr & { lhs: a; rhs: a }
class Mul[a]: Expr & { lhs: a; rhs: a }
//│ Defined class Num
//│ Defined class Add[+a]
//│ Defined class Mul[+a]

def map_expr f v = case v of {
  | Var -> v
  | Num -> v
  | Add -> Add { lhs = f v.lhs; rhs = f v.rhs }
  | Mul -> Mul { lhs = f v.lhs; rhs = f v.rhs }
  }
//│ map_expr: ('rhs -> 'rhs0) -> ((Add[?] with {lhs: 'rhs, rhs: 'rhs}) | (Mul[?] with {lhs: 'rhs, rhs: 'rhs}) | 'a & (Num | Var)) -> (Add['rhs0] | Mul['rhs0] | 'a)

rec def eval_expr eval_rec subst v =
  let vv = map_expr (eval_rec subst) v in
  case vv of {
    | Var -> eval_var subst vv
    | Add -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num + vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Mul -> let vv1 = vv.lhs in
              let vv2 = vv.rhs in
              case vv1 of {
              | Num -> case vv2 of {
                | Num -> Num { num = vv1.num * vv2.num }
                | _ -> vv
                }
              | _ -> vv
              }
    | Num -> vv // _ -> vv
    }
//│ eval_expr: ('a -> 'lhs -> 'lhs0) -> ('a & 'b) -> ((Add[?] with {lhs: 'lhs, rhs: 'lhs}) | (Mul[?] with {lhs: 'lhs, rhs: 'lhs}) | 'c & (Num | Var)) -> (Add['lhs0] | Mul['lhs0] | Num | 'c)
//│   where
//│     'b <: (Cons[?] with {head: {_1: string, _2: 'c}, tail: 'b}) | Nil

rec def eval2 subst = eval_expr eval2 subst
//│ eval2: 'b -> 'c -> (Add['a] & {lhs: 'lhs, rhs: 'lhs} | Mul['a0] & {lhs: 'rhs, rhs: 'rhs} | Num | 'd)
//│   where
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Mul[?] & {lhs: 'c, rhs: 'c} | 'd & 'rhs & 'lhs & (Num | Var)
//│     'b <: (Cons[?] with {head: {_1: string, _2: 'd & 'rhs & 'lhs}, tail: 'b}) | Nil
//│     'rhs :> Add['a] & {lhs: 'lhs, rhs: 'lhs} | Mul['a0] & {lhs: 'rhs, rhs: 'rhs} | Num
//│          <: (Num | ~#Num) & 'a0 & (~#Num | Num)
//│     'a :> Add['a] & {lhs: 'lhs, rhs: 'lhs} | Mul['a0] & {lhs: 'rhs, rhs: 'rhs} | Num | 'rhs
//│     'lhs :> Add['a] & {lhs: 'lhs, rhs: 'lhs} | Mul['a0] & {lhs: 'rhs, rhs: 'rhs} | Num
//│          <: 'a & (~#Num | Num) & 'rhs
//│     'a0 :> Add['a] & {lhs: 'lhs, rhs: 'lhs} | Mul['a0] & {lhs: 'rhs, rhs: 'rhs} | Num | 'rhs


// ------------- OCaml's type -------------
// val map_expr :
//   ('a -> 'b) ->
//   [< `Add of 'a * 'a | `Mult of 'a * 'a | `Num of 'c | `Var of string ] ->
//   [> `Add of 'b * 'b | `Mult of 'b * 'b | `Num of 'c | `Var of string ] = <fun>

// val eval_expr :
//   ((string *
//     ([> `Add of ([> `Num of int ] as 'b) * 'b
//       | `Mult of 'b * 'b
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'c -> 'b) ->
//   (string * 'a) list ->
//   [< `Add of 'c * 'c | `Mult of 'c * 'c | `Num of int | `Var of string ] -> 'a =
//   <fun>
// val eval2 :
//   (string *
//    ([> `Add of 'a * 'a | `Mult of 'a * 'a | `Num of int | `Var of string ]
//     as 'a))
//   list ->
//   ([< `Add of 'b * 'b | `Mult of 'b * 'b | `Num of int | `Var of string ] as 'b) ->
//   'a = <fun>


// ************************** Mix things *******************************

def eval_lexpr eval_rec subst v = case v of {
  | Lambda -> eval_lambda eval_rec subst v
  | Expr -> eval_expr eval_rec subst v
  }
//│ eval_lexpr: (((Cons[('b, 'a | Var,) | 'A] with {head: ('b, 'a | Var,), tail: Nil | 'tail}) | 'tail) -> 'body -> ('c & 'a & ((Abs[?] with {body: 'body, name: 'b}) | 'lhs & ~#Abs))) -> ('d & List['A] & 'tail) -> nothing -> (Abs['a] | Add['a] | (App['a] with {lhs: 'lhs, rhs: 'a}) | Mul['a] | Num | 'c)
//│   where
//│     'd <: (Cons[?] with {head: {_1: string, _2: 'c}, tail: 'd}) | Nil

rec def eval3 subst = eval_lexpr eval3 subst
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.227: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Num` does not match type `Expr & ?a | Lambda & ?b`
//│ ║  l.158: 	                | Num -> Num { num = vv1.num + vv2.num }
//│ ║         	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.93: 	    let l1 = eval_rec subst v.rhs in
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.227: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Add[?a] & {Add#a = ?a, lhs: ?lhs, rhs: ?rhs}` does not match type `Expr & ?b | Lambda & ?c`
//│ ║  l.145: 	  | Add -> Add { lhs = f v.lhs; rhs = f v.rhs }
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.93: 	    let l1 = eval_rec subst v.rhs in
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.227: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Num` does not match type `Expr & ?a | Lambda & ?b`
//│ ║  l.167: 	                | Num -> Num { num = vv1.num * vv2.num }
//│ ║         	                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.93: 	    let l1 = eval_rec subst v.rhs in
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.227: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Mul[?a] & {Mul#a = ?a, lhs: ?lhs, rhs: ?rhs}` does not match type `Expr & ?b | Lambda & ?c`
//│ ║  l.146: 	  | Mul -> Mul { lhs = f v.lhs; rhs = f v.rhs }
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.93: 	    let l1 = eval_rec subst v.rhs in
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.227: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `App[?a] & {App#a = ?a, lhs: ?lhs, rhs: ?rhs}` does not match type `Expr & ?b | Lambda & ?c`
//│ ║  l.96: 	    | _ -> App { lhs = l1; rhs = l2 }
//│ ║        	           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.93: 	    let l1 = eval_rec subst v.rhs in
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.227: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?a] & {Abs#a = ?a, body: ?body}` does not match type `Expr & ?b | Lambda & ?c`
//│ ║  l.99: 	    Abs { name = new_name;
//│ ║        	    ^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.100: 	          body = eval_rec (Cons (Tuple v.name (Var { name = new_name })) subst) v.body }
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.93: 	    let l1 = eval_rec subst v.rhs in
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ ╔══[ERROR] Type mismatch in binding of lambda expression:
//│ ║  l.227: 	rec def eval3 subst = eval_lexpr eval3 subst
//│ ║         	              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Var` does not match type `Expr & ?a | Lambda & ?b`
//│ ║  l.100: 	          body = eval_rec (Cons (Tuple v.name (Var { name = new_name })) subst) v.body }
//│ ║         	                                               ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.93: 	    let l1 = eval_rec subst v.rhs in
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ eval3: (List[?] & 'tail) -> nothing -> 'b
//│   where
//│     'tail <: (Cons[?] with {head: {_1: string, _2: 'c}, tail: 'tail}) | Nil
//│     'c <: 'body & 'b & (Abs[?] & {body: nothing} | 'lhs & ~#Abs)
//│     'b :> Abs['body] | Add['a] & {lhs: 'body, rhs: 'body} | App['a0] & {lhs: 'lhs, rhs: 'body} | Mul['body] & {lhs: 'a, rhs: 'a} | Num | Var
//│        <: 'c & 'body & 'a
//│     'body :> Abs['body] | Add['a] & {lhs: 'body, rhs: 'body} | App['a0] & {lhs: 'lhs, rhs: 'body} | Mul['body] & {lhs: 'a, rhs: 'a} | Num | Var
//│           <: nothing
//│     'a :> Abs['body] | Add['a] & {lhs: 'body, rhs: 'body} | App['a0] & {lhs: 'lhs, rhs: 'body} | Mul['body] & {lhs: 'a, rhs: 'a} | Num | Var
//│        <: 'body & (~#Num | Num)
//│     'a0 :> Abs['body] | Add['a] & {lhs: 'body, rhs: 'body} | App['a0] & {lhs: 'lhs, rhs: 'body} | Mul['body] & {lhs: 'a, rhs: 'a} | Num | Var
//│     'lhs :> Add['a] & {lhs: 'body, rhs: 'body} | App['a0] & {lhs: 'lhs, rhs: 'body} | Mul['body] & {lhs: 'a, rhs: 'a} | Num | Var
//│          <: 'a0

// ------------- OCaml's type -------------
// val eval_lexpr :
//   ((string *
//     ([> `Abs of string * 'a
//       | `Add of 'a * 'a
//       | `App of 'a * 'a
//       | `Mult of 'a * 'a
//       | `Num of int
//       | `Var of string ]
//      as 'a))
//    list -> 'a -> 'a) ->
//   (string * 'a) list ->
//   [< `Abs of string * 'a
//    | `Add of 'a * 'a
//    | `App of 'a * 'a
//    | `Mult of 'a * 'a
//    | `Num of int
//    | `Var of string ] ->
//   'a = <fun>
//
// val eval3 :
//   (string *
//    ([ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a))
//   list -> 'a -> 'a = <fun>

// ************************** Tests *******************************

eval3 Nil (Var { name = "s" })
// ------------- OCaml's type -------------
// - : [ `Abs of string * 'a
//     | `Add of 'a * 'a
//     | `App of 'a * 'a
//     | `Mult of 'a * 'a
//     | `Num of int
//     | `Var of string ] as 'a
// = `Var "s"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.360: 	eval3 Nil (Var { name = "s" })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Var` does not match type `Expr & ?a | Lambda & ?b`
//│ ║  l.360: 	eval3 Nil (Var { name = "s" })
//│ ║         	           ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `Expr & ?c | Lambda & ?d`
//│ ║  l.360: 	eval3 Nil (Var { name = "s" })
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ res: 'a
//│   where
//│     'a :> Abs['a] | (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs0 :> (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs :> 'a


eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.388: 	eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?a] & {Abs#a = ?a, body: ?body}` does not match type `Expr & ?b | Lambda & ?c`
//│ ║  l.388: 	eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `Expr & ?d | Lambda & ?e`
//│ ║  l.388: 	eval3 Nil (Abs { name = "s"; body = Var { name = "s" } })
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ res: 'a
//│   where
//│     'a :> Abs['a] | (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs0 :> (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs :> 'a

eval2 Nil (Num { num = 1 })
//│ res: 'a
//│   where
//│     'a :> Add['a] | Mul['a] | Num

eval3 Nil (Num { num = 1 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.412: 	eval3 Nil (Num { num = 1 })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Num` does not match type `Expr & ?a | Lambda & ?b`
//│ ║  l.412: 	eval3 Nil (Num { num = 1 })
//│ ║         	           ^^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `Expr & ?c | Lambda & ?d`
//│ ║  l.412: 	eval3 Nil (Num { num = 1 })
//│ ║         	          ^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ res: 'a
//│   where
//│     'a :> Abs['a] | (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs0 :> (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs :> 'a

eval3 Nil (App { lhs = Num {num = 0}; rhs = Num {num = 0}})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.431: 	eval3 Nil (App { lhs = Num {num = 0}; rhs = Num {num = 0}})
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `App[?a] & {App#a = ?a, lhs: ?lhs, rhs: ?rhs}` does not match type `Expr & ?b | Lambda & ?c`
//│ ║  l.431: 	eval3 Nil (App { lhs = Num {num = 0}; rhs = Num {num = 0}})
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `Expr & ?d | Lambda & ?e`
//│ ║  l.431: 	eval3 Nil (App { lhs = Num {num = 0}; rhs = Num {num = 0}})
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ res: 'a
//│   where
//│     'a :> Abs['a] | (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs0 :> (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs :> 'a

eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Num { num = 1 } } })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.450: 	eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Num { num = 1 } } })
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Abs[?a] & {Abs#a = ?a, body: ?body}` does not match type `Expr & ?b | Lambda & ?c`
//│ ║  l.450: 	eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Num { num = 1 } } })
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into argument with expected type `Expr & ?d | Lambda & ?e`
//│ ║  l.450: 	eval3 Nil (Abs { name = "s"; body = Add { lhs = Var { name = "s" }; rhs = Num { num = 1 } } })
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.219: 	def eval_lexpr eval_rec subst v = case v of {
//│ ╙──       	                                       ^
//│ res: 'a
//│   where
//│     'a :> Abs['a] | (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs0 :> (Add['a] with {lhs: 'lhs, rhs: 'lhs}) | (App['a] with {lhs: 'lhs0, rhs: 'a}) | (Mul['lhs] with {lhs: 'lhs, rhs: 'lhs}) | Num | Var
//│     'lhs :> 'a


// *************************************

def eval_lexpr' eval_rec subst v = case v of {
  | Var -> eval_var eval_rec subst v
  | Abs -> eval_lambda eval_rec subst v
  | App -> eval_lambda eval_rec subst v
  | Num -> eval_expr eval_rec subst v
  | Add -> eval_expr eval_rec subst v
  | Mul -> eval_expr eval_rec subst v
  }
//│ eval_lexpr': ((Cons[('b, 'a | Var,)] with {head: ('b, 'a | Var,), tail: Nil}) -> 'lhs -> ('a & 'c & ((Abs[?] with {body: 'lhs, name: 'b}) | 'lhs0 & ((Abs[?] with {body: 'lhs, name: 'b}) & ~#Abs | 'lhs0 & ~#Abs))) & 'd) -> nothing -> ((Abs[?] with {body: 'lhs, name: 'b}) | (Add[?] with {lhs: 'lhs, rhs: 'lhs}) | (App[?] with {lhs: 'lhs, rhs: 'lhs}) | (Mul[?] with {lhs: 'lhs, rhs: 'lhs}) | Num & 'c | Var & 'e) -> (Abs['a] | Add['a] | (App['a] with {lhs: 'lhs0, rhs: 'a}) | Mul['a] | Num | 'c)
//│   where
//│     'd <: (Cons[?] with {head: {_1: string, _2: 'e -> 'c}, tail: 'd}) | Nil
