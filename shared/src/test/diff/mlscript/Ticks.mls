:js
//│ /!\ Unrecognized option :js
f' = 2
//│ f': int

:js
//│ /!\ Unrecognized option :js
f'
//│ res: int

:js
//│ /!\ Unrecognized option :js
f' + 2
//│ res: int

:js
//│ /!\ Unrecognized option :js
trait Foo'[T']
  method Bar': T' -> T'
//│ Defined trait Foo'[=T']
//│ Declared Foo'.Bar': Foo'['T'] -> 'T' -> 'T'

:js
//│ /!\ Unrecognized option :js
class A'[B'] : {x': B'}
  method C' = this.x'
//│ Defined class A'[+B']
//│ Defined A'.C': A'['B'] -> 'B'

:js
//│ /!\ Unrecognized option :js
class M : {x': int}
  method N' = this.x'
  method P' y' = this.x' + y'
def mm = M{ x' = 2 }
mm.N'
mm.P' f'
//│ Defined class M
//│ Defined M.N': M -> int
//│ Defined M.P': M -> int -> int
//│ mm: M
//│ res: int
//│ res: int

:js
//│ /!\ Unrecognized option :js
class D'[B'] : A'[B']
//│ Defined class D'[+B']

:js
//│ /!\ Unrecognized option :js
type E' = D'[int] | A'[int]
//│ Defined type alias E'

:js
//│ /!\ Unrecognized option :js
class None': {}
//│ Defined class None'

:js
//│ /!\ Unrecognized option :js
class CC': None' & Foo'[anything]
//│ Defined class CC'

:js
//│ /!\ Unrecognized option :js
class TT' : { a': int }
//│ Defined class TT'

:js
//│ /!\ Unrecognized option :js
def tt' = TT'{a'=4}
tt'.a'
//│ tt': TT'
//│ res: int

:js
//│ /!\ Unrecognized option :js
a' = {b' = 42}
//│ a': {b': int}

:js
//│ /!\ Unrecognized option :js
a'.b'
//│ res: int

:js
//│ /!\ Unrecognized option :js
def g' x' = x' with { c' = 24 }
//│ g': 'a -> ('a\c' & {c': int})

:js
//│ /!\ Unrecognized option :js
gg' = let w' = 2 in w' + w'
//│ gg': int

:js
//│ /!\ Unrecognized option :js
def rcd' = { x' = 1 }
rcd'.x'
//│ rcd': {x': int}
//│ res: int

:js
//│ /!\ Unrecognized option :js
foo { x' } = x'
//│ foo: {x': 'a} -> 'a

:js
//│ /!\ Unrecognized option :js
foo { x' = y' } = y'
//│ foo: {x': 'a} -> 'a

:js
//│ /!\ Unrecognized option :js
trait T : {x': int}
  method N' = this.x'
  method P' y' = this.x' + y'
  method Q ((y', {z'})) = this.x' + y' + z'
//│ Defined trait T
//│ Defined T.N': T -> int
//│ Defined T.P': T -> int -> int
//│ Defined T.Q: T -> (int, {z': int},) -> int

:js
//│ /!\ Unrecognized option :js
let f' = fun x -> x + 1 in f' 2
//│ res: int

:js
//│ /!\ Unrecognized option :js
foo { return } = return
//│ foo: {return: 'a} -> 'a

foo { return = 1 }
//│ res: int
