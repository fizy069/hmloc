

def t1 : (int, ...Array[int], bool)
//│ t1: (int, ...Array[int], bool)

def t2 : (int, ...(bool, int))
//│ t2: (int, ...(bool, int,))

:e
def t3 : (int, ...bool, mut int)
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.10: 	def t3 : (int, ...bool, mut int)
//│ ║        	                  ^^^^
//│ ╙── type `bool` does not match type `Array[?a]`
//│ t3: (int, ...bool, int)


:e
def t4 : (int, ...int, bool)
//│ ╔══[ERROR] Type mismatch in type reference:
//│ ║  l.19: 	def t4 : (int, ...int, bool)
//│ ║        	                  ^^^
//│ ╙── type `int` does not match type `Array[?a]`
//│ t4: (int, ...int, bool)


:d
def f1 : ('a, ...Array[int]) -> 'a
//│ 1. Typing type Function(Tuple(List((None,Field(None,Splice(List(Right(Field(None,'a)), Left(AppliedType(TypeName(Array),List(TypeName(int)))))))))),'a)
//│ | vars=Map() newDefsInfo=Map()
//│ | CONSTRAIN Array[Int] <! Array‹α27'›
//│ |   where 
//│ | C Array[Int] <! Array‹α27'›    (0) where TypeRef <: ArrayType}
//│ | | C Array‹Int› <! Array‹α27'›    (1) where ArrayType <: ArrayType}
//│ | | | C Int <! α27'    (2) where TypeRef <: TypeVariable}
//│ => ((SpliceType(List(Right('a26'), Left(Array[Int]))),) -> 'a26') | 'a26'
//│ ⬤ Typed as: ((SpliceType(List(Right('a26'), Left(Array[Int]))),) -> 'a26')
//│  where: 
//│ f1: ('a, ...Array[int]) -> 'a

// FIXME
def f1 (x, ...y) = x
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.42: 	def f1 (x, ...y) = x
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `('a, ...Array[int])` does not match type `(?a, ...?b)`
//│ ║  l.28: 	def f1 : ('a, ...Array[int]) -> 'a
//│ ║        	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from splice:
//│ ║  l.42: 	def f1 (x, ...y) = x
//│ ╙──      	       ^^^^^^^^^
//│ ('a, ...Array[anything]) -> 'a
//│   <:  f1:
//│ ('a, ...Array[int]) -> 'a




:e
errt = (1, ...2, 3)
//│ ╔══[ERROR] Type mismatch in splice:
//│ ║  l.60: 	errt = (1, ...2, 3)
//│ ║        	       ^^^^^^^^^^^^
//│ ╟── integer literal of type `int` does not match type `Array[?a]`
//│ ║  l.60: 	errt = (1, ...2, 3)
//│ ╙──      	              ^
//│ errt: (int, ...int, int)



:e
wrerr = (1, ...true, mut 3)
//│ ╔══[ERROR] Type mismatch in splice:
//│ ║  l.72: 	wrerr = (1, ...true, mut 3)
//│ ║        	        ^^^^^^^^^^^^^^^^^^^
//│ ╟── reference of type `bool` does not match type `Array[?a]`
//│ ║  l.72: 	wrerr = (1, ...true, mut 3)
//│ ╙──      	               ^^^^
//│ wrerr: (int, ...bool, int)



gt1 = (1, ...(1,2,3), 2)
//│ gt1: (int, ...(int, int, int,), int)

gt1[0]
//│ res: int | undefined

//FIXME
def arr1: Array[int]
gt2 = (...arr1)
//│ arr1: Array[int]
//│ gt2: (...Array[int])

:e
(1, ...(true, false), "hi") : Array[int | bool]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.96: 	(1, ...(true, false), "hi") : Array[int | bool]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── string literal of type `string` does not match type `bool | int`
//│ ║  l.96: 	(1, ...(true, false), "hi") : Array[int | bool]
//│ ║        	                      ^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.96: 	(1, ...(true, false), "hi") : Array[int | bool]
//│ ╙──      	                                    ^^^^^^^^^^
//│ res: Array[bool | int]




a1 = (1,2,3,4,5)
a2 = (1,2, ...a1, 4,5)
//│ a1: (int, int, int, int, int,)
//│ a2: (int, int, ...(int, int, int, int, int,), int, int)

// FIXME
a2 : Array[int]
//│ /!!!\ Uncaught error: scala.NotImplementedError: an implementation is missing
