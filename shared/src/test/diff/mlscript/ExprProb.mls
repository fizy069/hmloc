
def intToString: int -> string
def intToString x = toString x
def done x = case x of {}
//│ intToString: int -> string
//│ anything -> string
//│   <:  intToString:
//│ int -> string
//│ done: nothing -> nothing



class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})



rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> 'b) -> 'c -> 'b
//│   where
//│     'c <: Add[?] & {lhs: 'c} | 'a & ~#Add

rec def eval1_stub k e = case e of {
  | Add -> eval1_stub k e.lhs + eval1_stub k e.rhs
  | _ -> k e
  }
//│ eval1_stub: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | 'a & ~#Add

:ns
rec def eval1_stub e = case e of {
  | Lit -> 1
  | Add -> eval1_stub e.lhs
  | _ -> 0
  }
//│ eval1_stub: 'eval1_stub
//│   where
//│     'eval1_stub :> 'a -> 'b
//│                 <: 'lhs -> 'c
//│     'b :> int | 'c
//│        <: 'c
//│     'c :> int
//│     'a <: #Lit & 'd | (#Add & 'e | 'f & ~#Add) & ~#Lit
//│     'e <: {lhs: 'lhs}
//│     'lhs <: 'a

eval1_stub
//│ res: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a} | Lit | ~Add[?] & ~Lit

// def eval1: ('b -> int) -> Expr['b] -> int
:stats
rec def eval1 k e = case e of {
  | Lit -> e.val
  | Add -> eval1 k e.lhs + eval1 k e.rhs
  | _ -> k e
  }
//│ eval1: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│ constrain calls  : 70
//│ annoying  calls  : 0
//│ subtyping calls  : 99

:ns
eval1
//│ res: 'eval1
//│   where
//│     'eval1 :> 'a -> 'b -> 'c
//│            <: 'a -> 'd & 'a -> 'e
//│     'e :> 'b -> 'c
//│        <: 'lhs -> 'f
//│     'd :> 'b -> 'c
//│        <: 'rhs -> 'g
//│     'c :> 'val | 'h | 'i
//│        <: 'f & 'g
//│     'h :> int
//│        <: 'f & 'g
//│     'b <: #Lit & 'j | (#Add & 'k | 'l & ~#Add) & ~#Lit
//│     'k <: {rhs: 'rhs} & {lhs: 'lhs}
//│     'lhs <: 'b
//│     'rhs <: 'b
//│     'j <: {val: 'val}
//│     'val <: 'f & 'g
//│     'a <: 'l -> 'i
//│     'i <: 'f & 'g
//│     'g := int
//│     'f := int

:re
error: ~Add[?]
//│ res: ~Add[nothing]

:re
error: ('a & ~Lit) -> 'a
//│ res: ('a & ~Lit) -> 'a

:re
error: ('a) -> ('a & Add[?])
error: ('a) -> ('a & ~Add[?])
error: ('a & ~Add[?]) -> 'a
//│ res: 'a -> (Add[?] & 'a)
//│ res: 'a -> ('a & ~Add[nothing])
//│ res: ('a & ~Add[?]) -> 'a

:re
error: ('a & ~add) -> 'a
//│ res: ('a & ~#Add) -> 'a

:ns
def eval1_ty_ugly: ('a -> int) -> (Lit | Add['b] | 'a & ~Lit & ~Add[?] as 'b) -> int
//│ eval1_ty_ugly: ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~Lit & ~Add[?]

eval1_ty_ugly
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit

:stats
def eval1_ty_ugly = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│ constrain calls  : 111
//│ annoying  calls  : 36
//│ subtyping calls  : 331

:ns
def eval1_ty: ('a -> int) -> (Lit | Add['b] | 'a & ~lit & ~add as 'b) -> int
//│ eval1_ty: ('a -> int) -> 'b -> int
//│   where
//│     'b := Lit | Add['b] | 'a & ~#Lit & ~#Add

eval1_ty
//│ res: ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│ constrain calls  : 111
//│ annoying  calls  : 36
//│ subtyping calls  : 333

:stats
eval1_ty_ugly = eval1_ty
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│   <:  eval1_ty_ugly:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│ constrain calls  : 20
//│ annoying  calls  : 13
//│ subtyping calls  : 259

:stats
eval1_ty = eval1_ty_ugly
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~Add[?] & ~Lit | Add['b] | Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: 'a & ~#Add & ~#Lit | Add['b] | Lit
//│ constrain calls  : 170
//│ annoying  calls  : 315
//│ subtyping calls  : 4963


// Workaround:
:ns
type E1[A] = Lit | Add[E1[A]] | A & ~lit & ~add
def eval1_ty: ('a -> int) -> E1['a] -> int
//│ Defined type alias E1[+A]
//│ eval1_ty: ('a -> int) -> E1['a] -> int

eval1_ty
//│ res: ('a -> int) -> E1['a] -> int

:stats
def eval1_ty = eval1
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│   <:  eval1_ty:
//│ ('a -> int) -> E1['a] -> int
//│ constrain calls  : 118
//│ annoying  calls  : 38
//│ subtyping calls  : 237


:stats
rec def pretty1 k e = case e of {
  | Lit -> intToString e.val
  | Add -> concat (pretty1 k e.lhs) (pretty1 k e.rhs)
  | _ -> k e
  }
//│ pretty1: ('a -> string) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'a & ~#Add & ~#Lit
//│ constrain calls  : 95
//│ annoying  calls  : 0
//│ subtyping calls  : 97


:stats
rec def prettier1 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      if ev e.lhs == 0 then prettier1 k ev e.rhs
      else if ev e.rhs == 0 then prettier1 k ev e.lhs
      else concat (prettier1 k ev e.lhs) (prettier1 k ev e.rhs)
  | _ -> k e
  }
//│ prettier1: ('a -> (string & 'b)) -> ('rhs -> int) -> 'c -> 'b
//│   where
//│     'c <: Add[?] & {lhs: 'rhs & 'c, rhs: 'rhs & 'c} | Lit | 'a & ~#Add & ~#Lit
//│     'b := string
//│ constrain calls  : 426
//│ annoying  calls  : 0
//│ subtyping calls  : 146

:stats
rec def prettier11 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e.rhs == 0 then tmp else concat tmp (prettier11 k ev e.rhs)
  | _ -> k e
  }
//│ prettier11: ('a -> string) -> ('rhs -> int) -> 'b -> string
//│   where
//│     'b <: Add[?] & {lhs: 'c, rhs: 'rhs & 'b} | Lit | 'a & ~#Add & ~#Lit
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | 'a & ~#Add & ~#Lit
//│ constrain calls  : 228
//│ annoying  calls  : 0
//│ subtyping calls  : 208

// Doesn't make much sense, but generates very ugly type unless aggressively simplified:
:stats
rec def prettier12 k ev e = case e of {
  | Lit -> intToString e.val
  | Add ->
      let tmp = pretty1 k e.lhs
      in if ev e == 0 then tmp else concat tmp (pretty1 k e.rhs)
  | _ -> k e
  }
//│ prettier12: ('a -> string) -> ('b -> int) -> (Add[?] & {lhs: 'c, rhs: 'c} & 'b | Lit | 'a & ~#Add & ~#Lit) -> string
//│   where
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | 'a & ~#Add & ~#Lit
//│ constrain calls  : 211
//│ annoying  calls  : 0
//│ subtyping calls  : 292


:stats
e1 = Add{lhs = Lit {val = 1}; rhs = Add{lhs = Lit {val = 2}; rhs = Lit {val = 3}}}
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit] | Lit] & {lhs: Lit, rhs: Add[Lit]}
//│ res: int
//│ res: string
//│ res: string
//│ res: string
//│ res: string
//│ constrain calls  : 1522
//│ annoying  calls  : 438
//│ subtyping calls  : 3124


e1 = add (lit 1) (add (lit 2) (lit 3))
eval1 done e1
pretty1 done e1
prettier1 done (eval1 done) e1
prettier11 done (eval1 done) e1
prettier12 done (eval1 done) e1
//│ e1: Add[Add[Lit] | Lit] & {lhs: Lit, rhs: Add[Lit]}
//│ res: int
//│ res: string
//│ res: string
//│ res: string
//│ res: string



class Nega[E]: { arg: E }
def nega arg = Nega { arg }
//│ Defined class Nega[+E]
//│ nega: 'arg -> Nega['arg]



rec def eval2 k = eval1 (fun x -> case x of {
  | Nega -> 0 - (eval2 k x.arg)
  | _ -> k x
  })
//│ eval2: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'b} | 'a & ~#Add & ~#Lit & ~#Nega


:stats
rec def prettier2 k ev = prettier1 (fun x -> case x of {
  | Nega -> concat "-" (prettier2 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier2: ('a -> (string & 'b)) -> ('rhs -> int) -> 'c -> 'b
//│   where
//│     'c <: Add[?] & {lhs: 'rhs & 'c, rhs: 'rhs & 'c} | Lit | Nega[?] & {arg: 'c} | 'a & ~#Add & ~#Lit & ~#Nega
//│     'b := string
//│ constrain calls  : 228
//│ annoying  calls  : 0
//│ subtyping calls  : 238

:stats
rec def prettier22 k ev = prettier12 (fun x -> case x of {
  | Nega -> concat "-" (prettier22 k ev x.arg)
  | _ -> k x
  }) ev
//│ prettier22: ('a -> string) -> ('b -> int) -> 'c -> string
//│   where
//│     'b <: {lhs: 'd, rhs: 'd}
//│     'd <: Add[?] & {lhs: 'd, rhs: 'd} | Lit | 'e & ~#Add & ~#Lit
//│     'e <: Nega[?] & {arg: 'c} | 'a & ~#Nega
//│     'c <: Add[?] & 'b | Lit | 'e & ~#Add & ~#Lit
//│ constrain calls  : 214
//│ annoying  calls  : 0
//│ subtyping calls  : 335



:stats
eval2 done e1
//│ res: int
//│ constrain calls  : 325
//│ annoying  calls  : 52
//│ subtyping calls  : 390

e2 = add (lit 1) (nega e1)
//│ e2: Add[Lit | Nega[Add[Add[Lit] | Lit] & {lhs: Lit, rhs: Add[Lit]}]] & {lhs: Lit, rhs: Nega[Add[Add[Lit] | Lit] & {lhs: Lit, rhs: Add[Lit]}]}

:stats
eval2 done e2
//│ res: int
//│ constrain calls  : 519
//│ annoying  calls  : 91
//│ subtyping calls  : 869

d2 = nega (add (lit 1) (nega (lit 1)))
//│ d2: Nega[Add[Lit | Nega[Lit]] & {lhs: Lit, rhs: Nega[Lit]}]

:stats
eval2 done d2
//│ res: int
//│ constrain calls  : 400
//│ annoying  calls  : 67
//│ subtyping calls  : 346


prettier2 done
//│ res: ('rhs -> int) -> 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'rhs & 'a, rhs: 'rhs & 'a} | Lit | Nega[?] & {arg: 'a}

prettier22 done
//│ res: ('a -> int) -> 'b -> string
//│   where
//│     'a <: {lhs: 'c, rhs: 'c}
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | 'd & ~#Add & ~#Lit
//│     'd <: Nega[?] & {arg: 'b}
//│     'b <: Add[?] & 'a | Lit | 'd & ~#Add & ~#Lit

:stats
prettier2 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'a & 'b, rhs: 'a & 'b} | Lit | Nega[?] & {arg: 'a}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit
//│ constrain calls  : 88
//│ annoying  calls  : 0
//│ subtyping calls  : 234


prettier22 done (eval1 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'b, rhs: 'b} & 'c | Lit | 'd & ~#Add & ~#Lit
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'd & ~#Add & ~#Lit
//│     'd <: Nega[?] & {arg: 'a}

// TODO could probably merge `a` and `b` here!
:stats
prettier2 done (eval2 done)
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'a & 'b, rhs: 'a & 'b} | Lit | Nega[?] & {arg: 'a}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | Nega[?] & {arg: 'b}
//│ constrain calls  : 108
//│ annoying  calls  : 0
//│ subtyping calls  : 302

prettier2 done (eval2 done) e2
prettier2 done (eval2 done) d2
//│ res: string
//│ res: string

:stats
prettier22 done (eval2 done)
prettier22 done (eval2 done) e2
prettier22 done (eval2 done) d2
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: 'b, rhs: 'b} & 'c | Lit | 'd & ~#Add & ~#Lit
//│     'c <: Add[?] & {lhs: 'c, rhs: 'c} | Lit | Nega[?] & {arg: 'c}
//│     'b <: Add[?] & {lhs: 'b, rhs: 'b} | Lit | 'd & ~#Add & ~#Lit
//│     'd <: Nega[?] & {arg: 'a}
//│ res: string
//│ res: string
//│ constrain calls  : 1295
//│ annoying  calls  : 311
//│ subtyping calls  : 3319




// === === === ERROR CASES === === === //


:ShowRelativeLineNums


:e
eval1 done e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval1 done e2
//│ ║        	^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.316: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.+1: 	eval1 done e2
//│ ║        	           ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.64: 	rec def eval1 k e = case e of {
//│ ║        	                         ^
//│ ╟── from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ╙──     	                  ^
//│ res: int






:e
prettier2 done eval1 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.64: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.65: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.68: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.237: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit` is not a function
//│ ║  l.15: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval1 e1
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.233: 	rec def prettier1 k ev e = case e of {
//│ ║         	                                ^
//│ ╟── from reference:
//│ ║  l.67: 	  | _ -> k e
//│ ╙──      	         ^
//│ res: nothing













:e
:stats
prettier2 done (eval1 done) e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` does not match type `nothing`
//│ ║  l.316: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.+1: 	prettier2 done (eval1 done) e2
//│ ║        	                            ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.233: 	rec def prettier1 k ev e = case e of {
//│ ║         	                                ^
//│ ╟── from reference:
//│ ║  l.4: 	def done x = case x of {}
//│ ╙──     	                  ^
//│ res: string
//│ constrain calls  : 891
//│ annoying  calls  : 204
//│ subtyping calls  : 27738





:e
:stats
prettier2 done eval2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.64: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.65: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.68: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.237: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ res: 'a -> string
//│   where
//│     'a <: Add[?] & {lhs: nothing -> int & 'a, rhs: nothing -> int & 'a} | Lit | Nega[?] & {arg: 'a}
//│ constrain calls  : 72
//│ annoying  calls  : 0
//│ subtyping calls  : 182








:e
:stats
prettier2 done eval2 e1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.64: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.65: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.68: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.237: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit` is not a function
//│ ║  l.15: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval2 e1
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.233: 	rec def prettier1 k ev e = case e of {
//│ ║         	                                ^
//│ ╟── from reference:
//│ ║  l.324: 	  | _ -> k x
//│ ╙──       	         ^
//│ res: nothing
//│ constrain calls  : 456
//│ annoying  calls  : 100
//│ subtyping calls  : 7107












:e
:stats
prettier2 done eval2 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.64: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.65: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.68: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.237: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit` is not a function
//│ ║  l.15: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval2 e2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.233: 	rec def prettier1 k ev e = case e of {
//│ ║         	                                ^
//│ ╟── from reference:
//│ ║  l.324: 	  | _ -> k x
//│ ╙──       	         ^
//│ res: nothing
//│ constrain calls  : 529
//│ annoying  calls  : 123
//│ subtyping calls  : 17344












:e
:stats
prettier2 done eval2 d2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.64: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.65: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.68: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.237: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Nega[?E] & {Nega#E = ?E, arg: ?arg}` is not a function
//│ ║  l.316: 	def nega arg = Nega { arg }
//│ ║         	               ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval2 d2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.233: 	rec def prettier1 k ev e = case e of {
//│ ║         	                                ^
//│ ╟── from reference:
//│ ║  l.324: 	  | _ -> k x
//│ ╙──       	         ^
//│ res: string
//│ constrain calls  : 454
//│ annoying  calls  : 91
//│ subtyping calls  : 3650












:e
:stats
prettier2 done eval1 e2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── function of type `?a -> ?b` is not an instance of type `int`
//│ ║  l.64: 	rec def eval1 k e = case e of {
//│ ║        	                ^^^^^^^^^^^^^^^
//│ ║  l.65: 	  | Lit -> e.val
//│ ║        	^^^^^^^^^^^^^^^^^
//│ ║  l.66: 	  | Add -> eval1 k e.lhs + eval1 k e.rhs
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.67: 	  | _ -> k e
//│ ║        	^^^^^^^^^^^^
//│ ║  l.68: 	  }
//│ ║        	^^^
//│ ╟── Note: constraint arises from application:
//│ ║  l.237: 	      else if ev e.rhs == 0 then prettier1 k ev e.lhs
//│ ╙──       	              ^^^^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Lit` is not a function
//│ ║  l.15: 	def lit val = Lit { val }
//│ ║        	              ^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `?a -> ?b`
//│ ║  l.+1: 	prettier2 done eval1 e2
//│ ║        	                     ^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.233: 	rec def prettier1 k ev e = case e of {
//│ ║         	                                ^
//│ ╟── from reference:
//│ ║  l.67: 	  | _ -> k e
//│ ╙──      	         ^
//│ res: nothing
//│ constrain calls  : 521
//│ annoying  calls  : 123
//│ subtyping calls  : 17337












