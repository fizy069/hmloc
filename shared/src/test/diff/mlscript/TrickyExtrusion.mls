
// From SuperType tests

def True = true
//│ True: bool

def inc: int -> int
//│ inc: int -> int

test f =
  let r = fun x -> fun g -> (g x, )
  in (r 0 inc, r True not)
//│ test: anything -> ((int,), (bool,),)

// Here, notice the imprecise `(0 | true) -> 'a` type.
// In a system with inferred first-class constraints, this could be avoided.
test f =
  let r x = f x
  in (r 0, r True)
//│ test: ((bool | int) -> 'a) -> ('a, 'a,)

// Same example, a little elaborated
test f =
  let r = fun x -> fun g -> (g x, f x)
  in (r 0 inc, r True not)
//│ test: ((bool | int) -> 'a) -> ((int, 'a,), (bool, 'a,),)

