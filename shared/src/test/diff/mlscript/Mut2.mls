
(mut 1, mut 2): MutArray['a]
//│ res: MutArray['a]
//│   where
//│     'a :> int

((fun t -> let tmp = t._1 <- 3 in t) ((mut 1, mut 2))): MutArray['a]
//│ res: MutArray['a]
//│   where
//│     'a :> int

((fun t -> let tmp = t._1 + 1 in t) ((mut 1, mut 2))): MutArray['a]
//│ res: MutArray[int]

if true then (mut 1, mut 2) else (mut 3, mut 4)
//│ res: (mut in 'a out int | 'a, mut in 'b out int | 'b,)

def t1: (mut 1, mut 2)
def t2: (mut 3, mut 4)
//│ t1: (mut 1, mut 2,)
//│ t2: (mut 3, mut 4,)

r = if true then t1 else t2
//│ r: (mut out 1 | 3, mut out 2 | 4,)

:e
r._1 <- 1
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.27: 	r._1 <- 1
//│ ║        	^^^^^^^^^
//│ ╟── integer literal of type `int` does not match type `3`
//│ ║  l.27: 	r._1 <- 1
//│ ║        	        ^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.27: 	r._1 <- 1
//│ ║        	^^^^
//│ ╟── from literal type:
//│ ║  l.19: 	def t2: (mut 3, mut 4)
//│ ╙──      	             ^






def t1: (mut 1 | 2 | 3)
def t2: (mut 2 | 3 | 4)
//│ t1: (mut 1 | 2 | 3,)
//│ t2: (mut 2 | 3 | 4,)

r = if true then t1 else t2
//│ r: (mut in 2 | 3 out 1 | 2 | 3 | 4,)

r._1 <- if true then 2 else 3
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.54: 	r._1 <- if true then 2 else 3
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` does not match type `2 | 3 | 4`
//│ ║  l.54: 	r._1 <- if true then 2 else 3
//│ ║        	                            ^
//│ ╟── but it flows into application with expected type `2 | 3 | 4`
//│ ║  l.54: 	r._1 <- if true then 2 else 3
//│ ║        	           ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.54: 	r._1 <- if true then 2 else 3
//│ ║        	^^^^
//│ ╟── from union type:
//│ ║  l.47: 	def t2: (mut 2 | 3 | 4)
//│ ╙──      	             ^^^^^^^^^

:e
r._1 <- if true then 2 else 1
//│ ╔══[ERROR] Type mismatch in assignment:
//│ ║  l.72: 	r._1 <- if true then 2 else 1
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` does not match type `2 | 3 | 4`
//│ ║  l.72: 	r._1 <- if true then 2 else 1
//│ ║        	                            ^
//│ ╟── but it flows into application with expected type `2 | 3 | 4`
//│ ║  l.72: 	r._1 <- if true then 2 else 1
//│ ║        	           ^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from assigned selection:
//│ ║  l.72: 	r._1 <- if true then 2 else 1
//│ ║        	^^^^
//│ ╟── from union type:
//│ ║  l.47: 	def t2: (mut 2 | 3 | 4)
//│ ╙──      	             ^^^^^^^^^





