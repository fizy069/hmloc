
:e
type A = A
//│ ╔══[ERROR] illegal cycle involving type A
//│ ║  l.3: 	type A = A
//│ ╙──     	     ^^^^^


:e
"oops": A
//│ ╔══[ERROR] type identifier not found: A
//│ ║  l.10: 	"oops": A
//│ ╙──      	        ^
//│ res: error
//│    = 'oops'


res: "oops"
//│ res: "oops"
//│    = 'oops'

:e
add res 1
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.23: 	add res 1
//│ ║        	^^^^^^^
//│ ╟── type `"oops"` is not an instance of type `int`
//│ ║  l.18: 	res: "oops"
//│ ║        	     ^^^^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.23: 	add res 1
//│ ╙──      	    ^^^
//│ res: error | int
//│    = 'oops1'




:e
type B = Oops
//│ ╔══[ERROR] type identifier not found: Oops
//│ ║  l.40: 	type B = Oops
//│ ╙──      	         ^^^^
//│ Defined type alias B


42: B
//│ res: B
//│    = 42

:e
type NonReg[A] = { x: NonReg[NonReg[A]] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as NonReg[NonReg['A]], but is defined as NonReg['A]
//│ ║  l.52: 	type NonReg[A] = { x: NonReg[NonReg[A]] }
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


:e
type B = NonReg[A]
//│ ╔══[ERROR] Type 'B' is already defined.
//│ ║  l.59: 	type B = NonReg[A]
//│ ╙──      	     ^


:e
type NonReg[A] = { x: NonReg[int] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as NonReg[int], but is defined as NonReg['A]
//│ ║  l.66: 	type NonReg[A] = { x: NonReg[int] }
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


:e
42: NonReg[int]
//│ ╔══[ERROR] type identifier not found: NonReg
//│ ║  l.73: 	42: NonReg[int]
//│ ╙──      	    ^^^^^^^^^^^
//│ res: error
//│    = 42


:e
:w
type NonReg[A] = { x: NonReg[int] }
type RefToNongReg[A] = { x: NonReg[A] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as NonReg[int], but is defined as NonReg['A]
//│ ║  l.83: 	type NonReg[A] = { x: NonReg[int] }
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ Defined type alias RefToNongReg[±A]
//│ ╔══[WARNING] Type definition RefToNongReg has bivariant type parameters:
//│ ║  l.84: 	type RefToNongReg[A] = { x: NonReg[A] }
//│ ║        	     ^^^^^^^^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.84: 	type RefToNongReg[A] = { x: NonReg[A] }
//│ ╙──      	                  ^





:w
type Reg[A] = Reg[A] -> Reg[A]
//│ Defined type alias Reg[±A]
//│ ╔══[WARNING] Type definition Reg has bivariant type parameters:
//│ ║  l.101: 	type Reg[A] = Reg[A] -> Reg[A]
//│ ║         	     ^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.101: 	type Reg[A] = Reg[A] -> Reg[A]
//│ ╙──       	         ^




type Id[A] = A
//│ Defined type alias Id[+A]

// Our regularity check for now is very syntactic:
:e
type FalseNeg[A] = { x: FalseNeg[Id[A]] }
//│ ╔══[ERROR] Type definition is not regular: it occurs within itself as FalseNeg[Id['A]], but is defined as FalseNeg['A]
//│ ║  l.118: 	type FalseNeg[A] = { x: FalseNeg[Id[A]] }
//│ ╙──       	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



:e
42: Id
//│ ╔══[ERROR] Type Id takes parameters
//│ ║  l.126: 	42: Id
//│ ╙──       	    ^^
//│ res: error
//│    = 42


42: Id[int]
//│ res: Id[int]
//│    = 42

