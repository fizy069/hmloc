:w
class Seq[A]: { size: int }
//│ Defined class Seq[±A]
//│ ╔══[WARNING] Type definition Seq has bivariant type parameters:
//│ ║  l.2: 	class Seq[A]: { size: int }
//│ ║       	      ^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.2: 	class Seq[A]: { size: int }
//│ ╙──     	          ^



:w
class ListBase[A]: Seq[A]
//│ Defined class ListBase[±A]
//│ ╔══[WARNING] Type definition ListBase has bivariant type parameters:
//│ ║  l.14: 	class ListBase[A]: Seq[A]
//│ ║        	      ^^^^^^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.14: 	class ListBase[A]: Seq[A]
//│ ╙──      	               ^



class Nil: ListBase[nothing] & {}
class Cons[A]: ListBase[A] & { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

:e
Nil{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.33: 	Nil{}
//│ ║        	^^^^^
//│ ╟── record literal of type `anything` is not a 1-element tuple
//│ ║  l.33: 	Nil{}
//│ ╙──      	   ^^
//│ res: Nil & {size: nothing}



def Nil = Nil { size = 0 }
//│ Nil: Nil

:e
:re
Cons 1 Nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.49: 	Cons 1 Nil
//│ ║        	^^^^^^
//│ ╟── integer literal of type `int` is not a 1-element tuple
//│ ║  l.49: 	Cons 1 Nil
//│ ╙──      	     ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.49: 	Cons 1 Nil
//│ ║        	^^^^^^^^^^
//│ ╟── application of type `Cons[?A] with {Cons#A = ?A, head: ?head, size: ?size, tail: ?tail}` is not a function
//│ ║  l.49: 	Cons 1 Nil
//│ ╙──      	^^^^^^
//│ res: nothing





Cons
//│ res: {head: 'A & 'head, size: int & 'size, tail: List['A] & 'tail} -> (Cons['A] with {head: 'head, size: 'size, tail: 'tail})

// In the old inheritance semantics, this used to be required:
def Cons_old head tail =
  Cons (ListBase (Seq { size = succ tail.size }) with { head; tail })
//│ Cons_old: ('head & 'A) -> (List['A] & {size: int} & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})

def Cons head tail =
  Cons { size = succ tail.size; head; tail }
//│ Cons: ('head & 'A) -> (List['A] & {size: int} & 'tail) -> (Cons['A] with {head: 'head, tail: 'tail})

// * Works thanks to variance analysis
Nil: ListBase[anything]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.81: 	Nil: ListBase[anything]
//│ ║        	^^^
//│ ╟── application of type `Nil` does not match type `nothing`
//│ ║  l.44: 	def Nil = Nil { size = 0 }
//│ ║        	          ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.81: 	Nil: ListBase[anything]
//│ ║        	^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.81: 	Nil: ListBase[anything]
//│ ╙──      	     ^^^^^^^^^^^^^^^^^^
//│ res: ListBase[?]

def c = Cons 1 Nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.96: 	def c = Cons 1 Nil
//│ ║        	        ^^^^^^^^^^
//│ ╟── application of type `Nil` does not match type `Cons[?A] | Nil`
//│ ║  l.44: 	def Nil = Nil { size = 0 }
//│ ║        	          ^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Cons[?A0] | Nil`
//│ ║  l.96: 	def c = Cons 1 Nil
//│ ║        	               ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.77: 	  Cons { size = succ tail.size; head; tail }
//│ ║        	                                      ^^^^
//│ ╟── from union type:
//│ ║  l.27: 	type List[A] = Nil | Cons[A]
//│ ╙──      	               ^^^^^^^^^^^^^
//│ c: Cons[int] with {tail: Nil}

c: ListBase[int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.114: 	c: ListBase[int]
//│ ║         	^
//│ ╟── application of type `Cons[?A] & {Cons#A = ?A, head: ?head, tail: ?tail}` does not match type `nothing`
//│ ║  l.77: 	  Cons { size = succ tail.size; head; tail }
//│ ║        	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `nothing`
//│ ║  l.114: 	c: ListBase[int]
//│ ║         	^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.114: 	c: ListBase[int]
//│ ╙──       	   ^^^^^^^^^^^^^
//│ res: ListBase[?]

c.head
//│ res: int

c.tail
//│ res: Nil

c.size
//│ res: int

def d = Cons 2 c
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.138: 	def d = Cons 2 c
//│ ║         	        ^^^^^^^^
//│ ╟── application of type `Cons[?A] & {Cons#A = ?A, head: ?head, tail: ?tail}` does not match type `Cons[?A0] | Nil`
//│ ║  l.77: 	  Cons { size = succ tail.size; head; tail }
//│ ║        	  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Cons[?A1] | Nil`
//│ ║  l.138: 	def d = Cons 2 c
//│ ║         	               ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.77: 	  Cons { size = succ tail.size; head; tail }
//│ ║        	                                      ^^^^
//│ ╟── from union type:
//│ ║  l.27: 	type List[A] = Nil | Cons[A]
//│ ╙──      	               ^^^^^^^^^^^^^
//│ d: Cons[int] with {tail: Cons[int] with {tail: Nil}}

d.head
//│ res: int

d.size
//│ res: int

d.tail
//│ res: Cons[int] with {tail: Nil}

d.tail.size
//│ res: int

d.tail.head
d.tail.tail
//│ res: int
//│ res: Nil

