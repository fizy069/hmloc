:ShowRelativeLineNums

class MyArray[A]: { size: int }
  method Set: (int, A) -> ()
  method Get: int -> A 
//│ Defined class MyArray[=A]
//│ Declared MyArray.Set: MyArray['A] -> (int, 'A,) -> ()
//│ Declared MyArray.Get: MyArray['A] -> int -> 'A



class Dummy[A]: MyArray[A] & { size: 0 }
  method Set (i, a) = ()
  method Get i = error
//│ Defined class Dummy[=A]
//│ Defined Dummy.Set: Dummy['A] -> (anything, anything,) -> ()
//│ Defined Dummy.Get: Dummy['A] -> anything -> nothing


dummy = Dummy { size = 0 }
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	dummy = Dummy { size = 0 }
//│ ║        	        ^^^^^^^^^^^^^^^^^^
//│ ╟── integer literal of type `int` does not match type `0`
//│ ║  l.+1: 	dummy = Dummy { size = 0 }
//│ ║        	                       ^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.12: 	class Dummy[A]: MyArray[A] & { size: 0 }
//│ ╙──      	                                     ^
//│ dummy: Dummy['A]

dummy: MyArray[int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.+1: 	dummy: MyArray[int]
//│ ║        	^^^^^
//│ ╟── application of type `Dummy[?A]` does not match type `MyArray[?]`
//│ ║  l.20: 	dummy = Dummy { size = 0 }
//│ ║        	        ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `MyArray[?]`
//│ ║  l.+1: 	dummy: MyArray[int]
//│ ║        	^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.+1: 	dummy: MyArray[int]
//│ ╙──      	       ^^^^^^^^^^^^
//│ res: MyArray[int]


def ty4B: MyArray[MyArray[MyArray['a]]] as 'a
//│ ty4B: 'a
//│   where
//│     'a := MyArray[MyArray[MyArray['a]]]




:e
MyArray{ size = 0 }
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.+1: 	MyArray{ size = 0 }
//│ ║        	^^^^^^^
//│ ╟── Note that class MyArray is abstract:
//│ ║  l.3: 	class MyArray[A]: { size: int }
//│ ║       	      ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Set is abstract
//│ ║  l.4: 	  method Set: (int, A) -> ()
//│ ║       	         ^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Get is abstract
//│ ║  l.5: 	  method Get: int -> A 
//│ ╙──     	         ^^^^^^^^^^^^^
//│ res: error






