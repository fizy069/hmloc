
class Foo[A]: { x: A }
class Bar
//│ Defined class Foo[+A]
//│ Defined class Bar

def f e = case e of
  Foo -> e.y,
  Foo -> e.z,
  _ -> e
//│ f: (Foo[?] & {y: 'y} | 'y & ~#Foo) -> 'y

:ns
f
//│ res: 'a -> 'b
//│   where
//│     'b :> 'y | 'z | 'c
//│     'a <: #Foo & 'd | (#Foo & 'e | 'c & ~#Foo) & ~#Foo
//│     'e <: {z: 'z}
//│     'd <: {y: 'y}

class Foo2: Foo[int] & { y: int }
//│ Defined class Foo2

f (Foo2{x=1;y=2})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.25: 	f (Foo2{x=1;y=2})
//│ ║        	   ^^^^^^^^^^^^^
//│ ╟── argument of type `({x: int, y: int},)` is not a record (expected a record with fields: y, x)
//│ ║  l.25: 	f (Foo2{x=1;y=2})
//│ ╙──      	       ^^^^^^^^^
//│ res: Foo2 & {x: nothing, y: nothing}

// #Foo

def f e = case e of
  Foo2 -> e.y,
  Foo -> e.z,
//│ f: ((Foo2\x with {y: 'y}) | Foo[?] & {z: 'y}) -> 'y

