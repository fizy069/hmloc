
def x = 1
//│ x: int

1
//│ res: int

1;
2
//│ res: int
//│ res: int

def x = 1;
2
//│ x: int
//│ res: int

def x = 1;;
2
//│ x: int
//│ res: int

def x = 1
def y = 2
//│ x: int
//│ y: int

1
2
3
//│ res: int
//│ res: int
//│ res: int

1
def x = add x 1
//│ res: int
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.36: 	def x = add x 1
//│ ║        	        ^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.36: 	def x = add x 1
//│ ╙──      	            ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.36: 	def x = add x 1
//│ ║        	        ^^^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.36: 	def x = add x 1
//│ ╙──      	              ^
//│ x: int

def x = 1
x
def y = 2
y
def z = x + y
//│ x: int
//│ res: int
//│ y: int
//│ res: int
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.56: 	def z = x + y
//│ ║        	        ^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.56: 	def z = x + y
//│ ╙──      	        ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.56: 	def z = x + y
//│ ║        	        ^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.56: 	def z = x + y
//│ ╙──      	            ^
//│ z: int

:e
1
 2
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.76: 	1
//│ ║        	^
//│ ║  l.77: 	 2
//│ ║        	^^
//│ ╟── integer literal of type `int` is not a function
//│ ║  l.76: 	1
//│ ╙──      	^
//│ res: nothing




def f x y z = add x y 
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.91: 	def f x y z = add x y 
//│ ║        	              ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.91: 	def f x y z = add x y 
//│ ╙──      	                  ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.91: 	def f x y z = add x y 
//│ ║        	              ^^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.91: 	def f x y z = add x y 
//│ ╙──      	                    ^
//│ f: anything -> anything -> anything -> int


:e
:ge
def f (x y z) = add x y
//│ ╔══[ERROR] Unsupported pattern shape:
//│ ║  l.109: 	def f (x y z) = add x y
//│ ╙──       	       ^^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.109: 	def f (x y z) = add x y
//│ ║         	                ^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.109: 	def f (x y z) = add x y
//│ ╙──       	                    ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.109: 	def f (x y z) = add x y
//│ ║         	                ^^^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.109: 	def f (x y z) = add x y
//│ ╙──       	                      ^
//│ f: error -> int


f 1
//│ res: int
