
class Lit: { val: int }
class Add[E]: { lhs: E; rhs: E }
class Nega[E]: { arg: E }
def lit val = Lit { val }
def add lhs rhs = Add { lhs; rhs }
def nega arg = Nega { arg }
//│ Defined class Lit
//│ Defined class Add[+E]
//│ Defined class Nega[+E]
//│ lit: (int & 'val) -> (Lit with {val: 'val})
//│ add: ('lhs & 'E) -> ('E & 'rhs) -> (Add['E] with {lhs: 'lhs, rhs: 'rhs})
//│ nega: 'arg -> Nega['arg]

rec def evalStub1 e = case e of {
  Lit -> e.val
  }
//│ evalStub1: (Lit with {val: 'val}) -> 'val

rec def evalStub2 e = case e of {
  Lit -> e.val | Nega -> 0 - (evalStub2 e.arg)
  }
//│ evalStub2: 'a -> int
//│   where
//│     'a <: Lit | Nega[?] & {arg: 'a}

rec def eval e = case e of {
  | Lit -> e.val
  | Add -> eval e.lhs + eval e.rhs
  | Nega -> 0 - (eval e.arg)
  }
//│ eval: 'a -> int
//│   where
//│     'a <: Add[?] & {lhs: 'a, rhs: 'a} | Lit | Nega[?] & {arg: 'a}

def ex = add (lit 2) (lit 2)
//│ ex: Add[Lit]

eval ex
//│ res: int

def e: Add['e] as 'e
//│ e: 'e
//│   where
//│     'e :> Add['e]

def e: Lit | Add['e] as 'e
//│ e: 'e
//│   where
//│     'e :> Add['e] | Lit

def e: Lit | Add['e] | Nega['e] as 'e
//│ e: 'e
//│   where
//│     'e :> Add['e] | Lit | Nega['e]

def e = ex
//│ Add[Lit]
//│   <:  e:
//│ 'e
//│   where
//│     'e :> Add['e] | Lit | Nega['e]

eval e
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	eval e
//│ ║        	^^^^^^
//│ ╟── type `int` is not an instance of `int`
//│ ║  l.2: 	class Lit: { val: int }
//│ ║       	                  ^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.64: 	eval e
//│ ║        	     ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	rec def eval e = case e of {
//│ ║        	                      ^
//│ ╟── from argument:
//│ ║  l.29: 	  | Add -> eval e.lhs + eval e.rhs
//│ ╙──      	           ^^^^^^^^^^
//│ res: int

eval (e : Lit | Add['e] | Nega['e] as 'e)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.82: 	eval (e : Lit | Add['e] | Nega['e] as 'e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `int`
//│ ║  l.2: 	class Lit: { val: int }
//│ ║       	                  ^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.82: 	eval (e : Lit | Add['e] | Nega['e] as 'e)
//│ ║        	      ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	rec def eval e = case e of {
//│ ║        	                      ^
//│ ╟── from argument:
//│ ║  l.29: 	  | Add -> eval e.lhs + eval e.rhs
//│ ╙──      	           ^^^^^^^^^^
//│ res: int




// === === === ERROR CASES === === === //


:ShowRelativeLineNums
:AllowTypeErrors


class Automata
class Binding
//│ Defined class Automata
//│ Defined class Binding

def exp: Array[Automata] -> Array[Binding]
eval exp
//│ exp: Array[Automata] -> Array[Binding]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+2: 	eval exp
//│ ║        	^^^^^^^^
//│ ╟── type `Array[Automata] -> Array[Binding]` does not match type `Add[?] & ?a | Lit & ?b | Nega[?] & ?c`
//│ ║  l.+1: 	def exp: Array[Automata] -> Array[Binding]
//│ ║        	         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `Add[?] & ?d | Lit & ?e | Nega[?] & ?f`
//│ ║  l.+2: 	eval exp
//│ ║        	     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	rec def eval e = case e of {
//│ ╙──      	                      ^
//│ res: int





:e
eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	      ^
//│ ╟── type `Lit` is not an instance of type `int`
//│ ║  l.52: 	def e: Lit | Add['e] | Nega['e] as 'e
//│ ║        	       ^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	      ^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	          ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ╙──      	                               ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `int`
//│ ║  l.2: 	class Lit: { val: int }
//│ ║       	                  ^^^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.+1: 	eval (e : Lit | Add['e] | Nega[int] as 'e)
//│ ║        	      ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	rec def eval e = case e of {
//│ ║        	                      ^
//│ ╟── from argument:
//│ ║  l.29: 	  | Add -> eval e.lhs + eval e.rhs
//│ ╙──      	           ^^^^^^^^^^
//│ res: int









