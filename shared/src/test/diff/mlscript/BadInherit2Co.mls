

// ———


:e
trait S00[A]
  method Foo00: A
trait T00[B]: S00[B]
class A00: S00[int] & T00[string]
//│ ╔══[ERROR] Type mismatch in type definition:
//│ ║  l.10: 	class A00: S00[int] & T00[string]
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `int` is not an instance of `string`
//│ ║  l.10: 	class A00: S00[int] & T00[string]
//│ ║        	               ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.10: 	class A00: S00[int] & T00[string]
//│ ╙──      	                          ^^^^^^
//│ ╔══[ERROR] Type mismatch in type definition:
//│ ║  l.10: 	class A00: S00[int] & T00[string]
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `string` is not an instance of `int`
//│ ║  l.10: 	class A00: S00[int] & T00[string]
//│ ║        	                          ^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.10: 	class A00: S00[int] & T00[string]
//│ ╙──      	               ^^^
//│ Defined trait S00[+A]
//│ Declared S00.Foo00: S00['A] -> 'A
//│ Defined trait T00[+B]
//│ Defined class A00







// Note: the definition above becomes valid if we split it into two definition groups
//    so that the variance analysis has a chance of running in between...

trait S0[A]
  method Foo0: A
trait T0[B]: S0[B]
//│ Defined trait S0[+A]
//│ Declared S0.Foo0: S0['A] -> 'A
//│ Defined trait T0[+B]

class A0: S0[int] & T0[string]
//│ Defined class A0

:e
(A0{}).Foo0
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.54: 	(A0{}).Foo0
//│ ║        	 ^^
//│ ╟── Note that class A0 is abstract:
//│ ║  l.50: 	class A0: S0[int] & T0[string]
//│ ║        	      ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Foo0 is abstract
//│ ║  l.50: 	class A0: S0[int] & T0[string]
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error




:e
class A0_2: S0[int] & T0[string]
  method Foo0 = 1
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.71: 	  method Foo0 = 1
//│ ║        	         ^^^^^^^^
//│ ╟── integer literal of type `int` is not an instance of type `string`
//│ ║  l.71: 	  method Foo0 = 1
//│ ║        	                ^
//│ ╟── but it flows into method definition with expected type `string`
//│ ║  l.71: 	  method Foo0 = 1
//│ ║        	         ^^^^^^^^
//│ ╟── Note: constraint arises from inherited method declaration:
//│ ║  l.44: 	  method Foo0: A
//│ ║        	         ^^^^^^^
//│ ╟── from type reference:
//│ ║  l.70: 	class A0_2: S0[int] & T0[string]
//│ ╙──      	                         ^^^^^^
//│ Defined class A0_2
//│ Defined A0_2.Foo0: A0_2 -> int






(A0_2{}).Foo0
//│ ╔══[ERROR] Implicit call to method Foo0 is forbidden because it is ambiguous.
//│ ║  l.95: 	(A0_2{}).Foo0
//│ ║        	^^^^^^^^^^^^^
//│ ╟── Unrelated methods named Foo0 are defined by:
//│ ╟── • trait S0
//│ ║  l.43: 	trait S0[A]
//│ ║        	      ^^
//│ ╟── • class A0_2
//│ ║  l.70: 	class A0_2: S0[int] & T0[string]
//│ ╙──      	      ^^^^
//│ res: error


// ———


trait R1[A]
  method Foo1: A
//│ Defined trait R1[+A]
//│ Declared R1.Foo1: R1['A] -> 'A

trait S1: R1[int]
  method Foo1 = 1
trait T1: R1[string]
  method Foo1 = "a"
//│ Defined trait S1
//│ Defined S1.Foo1: S1 -> int
//│ Defined trait T1
//│ Defined T1.Foo1: T1 -> string

:e
class A1: S1 & T1
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.127: 	class A1: S1 & T1
//│ ║         	      ^^
//│ ╟── Definitions of method Foo1 inherited from:
//│ ╟── • S1
//│ ║  l.118: 	  method Foo1 = 1
//│ ║         	         ^^^^^^^^
//│ ╟── • T1
//│ ║  l.120: 	  method Foo1 = "a"
//│ ╙──       	         ^^^^^^^^^^
//│ Defined class A1




a1 = A1{}
//│ a1: A1

a1.Foo1
//│ ╔══[ERROR] Implicit call to method Foo1 is forbidden because it is ambiguous.
//│ ║  l.146: 	a1.Foo1
//│ ║         	^^^^^^^
//│ ╟── Unrelated methods named Foo1 are defined by:
//│ ╟── • trait R1
//│ ║  l.112: 	trait R1[A]
//│ ║         	      ^^
//│ ╟── • trait S1
//│ ║  l.117: 	trait S1: R1[int]
//│ ║         	      ^^
//│ ╟── • trait T1
//│ ║  l.119: 	trait T1: R1[string]
//│ ╙──       	      ^^
//│ res: error

a1: S1
a1: R1[int]
a1: R1[string]
a1: R1['_]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.162: 	a1: S1
//│ ║         	^^
//│ ╟── application of type `A1` does not match type `R1[int] & #S1`
//│ ║  l.143: 	a1 = A1{}
//│ ║         	     ^^^^
//│ ╟── but it flows into reference with expected type `R1[int] & #S1`
//│ ║  l.162: 	a1: S1
//│ ║         	^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.162: 	a1: S1
//│ ╙──       	    ^^
//│ res: S1
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.163: 	a1: R1[int]
//│ ║         	^^
//│ ╟── application of type `A1` does not match type `#R1`
//│ ║  l.143: 	a1 = A1{}
//│ ║         	     ^^^^
//│ ╟── but it flows into reference with expected type `#R1`
//│ ║  l.163: 	a1: R1[int]
//│ ║         	^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.163: 	a1: R1[int]
//│ ╙──       	    ^^^^^^^
//│ res: R1[int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.164: 	a1: R1[string]
//│ ║         	^^
//│ ╟── application of type `A1` does not match type `#R1`
//│ ║  l.143: 	a1 = A1{}
//│ ║         	     ^^^^
//│ ╟── but it flows into reference with expected type `#R1`
//│ ║  l.164: 	a1: R1[string]
//│ ║         	^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.164: 	a1: R1[string]
//│ ╙──       	    ^^^^^^^^^^
//│ res: R1[string]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.165: 	a1: R1['_]
//│ ║         	^^
//│ ╟── application of type `A1` does not match type `#R1`
//│ ║  l.143: 	a1 = A1{}
//│ ║         	     ^^^^
//│ ╟── but it flows into reference with expected type `#R1`
//│ ║  l.165: 	a1: R1['_]
//│ ║         	^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.165: 	a1: R1['_]
//│ ╙──       	    ^^^^^^
//│ res: R1[nothing]

:ns
a1: R1['_]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.220: 	a1: R1['_]
//│ ║         	^^
//│ ╟── application of type `A1` does not match type `#R1`
//│ ║  l.143: 	a1 = A1{}
//│ ║         	     ^^^^
//│ ╟── but it flows into reference with expected type `#R1`
//│ ║  l.220: 	a1: R1['_]
//│ ║         	^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.220: 	a1: R1['_]
//│ ╙──       	    ^^^^^^
//│ res: R1['_]


:js
//│ /!\ Unrecognized option :js
class A1_2: S1 & T1
  method Foo1 = error
//│ Defined class A1_2
//│ Defined A1_2.Foo1: A1_2 -> nothing

:re
(A1_2{}).Foo1
//│ ╔══[ERROR] Implicit call to method Foo1 is forbidden because it is ambiguous.
//│ ║  l.244: 	(A1_2{}).Foo1
//│ ║         	^^^^^^^^^^^^^
//│ ╟── Unrelated methods named Foo1 are defined by:
//│ ╟── • trait R1
//│ ║  l.112: 	trait R1[A]
//│ ║         	      ^^
//│ ╟── • trait S1
//│ ║  l.117: 	trait S1: R1[int]
//│ ║         	      ^^
//│ ╟── • trait T1
//│ ║  l.119: 	trait T1: R1[string]
//│ ║         	      ^^
//│ ╟── • class A1_2
//│ ║  l.238: 	class A1_2: S1 & T1
//│ ╙──       	      ^^^^
//│ res: error


def f = 0
//│ f: int

def f' = 1
//│ f': int

f'
//│ res: int

