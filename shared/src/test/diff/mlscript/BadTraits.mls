class A
class B
//│ Defined class A
//│ Defined class B

// Okay to define, but impossible to instantiate:
trait T: A & B
//│ Defined trait T

:e
T {}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.11: 	T {}
//│ ║        	^^^^
//│ ╟── record literal of type `anything` is not an instance of type `A`
//│ ║  l.11: 	T {}
//│ ║        	  ^^
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.7: 	trait T: A & B
//│ ║       	         ^^^^^
//│ ╟── from type reference:
//│ ║  l.7: 	trait T: A & B
//│ ╙──     	         ^
//│ res: #T





def a = A{}
//│ a: A

:e
T a
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.34: 	T a
//│ ║        	^^^
//│ ╟── application of type `A` is not an instance of type `B`
//│ ║  l.30: 	def a = A{}
//│ ║        	        ^^^
//│ ╟── but it flows into reference with expected type `B`
//│ ║  l.34: 	T a
//│ ║        	  ^
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.7: 	trait T: A & B
//│ ║       	         ^^^^^
//│ ╟── from type reference:
//│ ║  l.7: 	trait T: A & B
//│ ║       	             ^
//│ ╟── Note: class A is defined at:
//│ ║  l.1: 	class A
//│ ╙──     	      ^
//│ res: A & #T







:e
:js
//│ /!\ Unrecognized option :js
T A
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.64: 	T A
//│ ║        	^^^
//│ ╟── reference of type `anything -> A` is not an instance of type `A`
//│ ║  l.64: 	T A
//│ ║        	  ^
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.7: 	trait T: A & B
//│ ║       	         ^^^^^
//│ ╟── from type reference:
//│ ║  l.7: 	trait T: A & B
//│ ║       	         ^
//│ ╟── Note: class constructor A is defined at:
//│ ║  l.1: 	class A
//│ ╙──     	      ^
//│ res: anything -> A & #T






:e
T (B {})
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.88: 	T (B {})
//│ ║        	^^^^^^^^
//│ ╟── application of type `B` is not an instance of type `A`
//│ ║  l.88: 	T (B {})
//│ ║        	   ^^^^
//│ ╟── but it flows into argument with expected type `A`
//│ ║  l.88: 	T (B {})
//│ ║        	  ^^^^^^
//│ ╟── Note: constraint arises from intersection type:
//│ ║  l.7: 	trait T: A & B
//│ ║       	         ^^^^^
//│ ╟── from type reference:
//│ ║  l.7: 	trait T: A & B
//│ ║       	         ^
//│ ╟── Note: class B is defined at:
//│ ║  l.2: 	class B
//│ ╙──     	      ^
//│ res: B & #T






def t = T error
//│ t: nothing

:re
t: nothing
//│ res: nothing

type Als = A & B
//│ Defined type alias Als

:re
t: Als
//│ res: Als


:e
class D0: T
//│ ╔══[ERROR] class D0 cannot inherit from class B as it already inherits from class A
//│ ║  l.130: 	class D0: T
//│ ╙──       	      ^^^^^


:e
class D1: B & T
//│ ╔══[ERROR] class D1 cannot inherit from class A as it already inherits from class B
//│ ║  l.137: 	class D1: B & T
//│ ╙──       	      ^^^^^^^^^



trait S: { x: int }
//│ Defined trait S

s = S{ x = 1 }
//│ s: {x: int} & #S

t = s: s
//│ t: #S

:e
t.x
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.154: 	t.x
//│ ║         	^^^
//│ ╟── type `#S` does not have field 'x'
//│ ║  l.150: 	t = s: s
//│ ║         	       ^
//│ ╟── but it flows into reference with expected type `{x: ?x}`
//│ ║  l.154: 	t.x
//│ ╙──       	^
//│ res: nothing




t = s: S
//│ t: S

t.x
//│ res: int


trait Lol
  method Foo = 1
class Hey
  method Foo = "oops"
//│ Defined trait Lol
//│ Defined Lol.Foo: Lol -> int
//│ Defined class Hey
//│ Defined Hey.Foo: Hey -> string

:e
class H: Lol & Hey
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.186: 	class H: Lol & Hey
//│ ║         	      ^
//│ ╟── Definitions of method Foo inherited from:
//│ ╟── • Lol
//│ ║  l.177: 	  method Foo = 1
//│ ║         	         ^^^^^^^
//│ ╟── • Hey
//│ ║  l.179: 	  method Foo = "oops"
//│ ╙──       	         ^^^^^^^^^^^^
//│ Defined class H





// Forbid trait constructors when the trait contains method defs as well:

h = Hey{}
//│ h: Hey

:e
l = Lol h
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.209: 	l = Lol h
//│ ║         	    ^^^
//│ ╟── Note that traits with methods are always considered abstract
//│ ║  l.176: 	trait Lol
//│ ╙──       	      ^^^
//│ l: error



:e
e = Lol
e
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.221: 	e = Lol
//│ ║         	    ^^^
//│ ╟── Note that traits with methods are always considered abstract
//│ ║  l.176: 	trait Lol
//│ ╙──       	      ^^^
//│ e: error
//│ res: error



l.(Lol.Foo)
//│ res: int

l.(Hey.Foo)
//│ res: string


trait Lol2: Lol
//│ Defined trait Lol2

:e
Lol2
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.245: 	Lol2
//│ ║         	^^^^
//│ ╟── Note that traits with methods are always considered abstract
//│ ║  l.241: 	trait Lol2: Lol
//│ ╙──       	      ^^^^^^^^^
//│ res: error



