

:e
42: ?
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.4: 	42: ?
//│ ║       	^^
//│ ╟── integer literal of type `int` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.4: 	42: ?
//│ ╙──     	    ^
//│ res: anything



def n: ?
n = 42
//│ n: anything
//│ int
//│   <:  n:
//│ anything


def f x = x : ?
//│ f: nothing -> anything

class E[A]
  method In: A -> A
  method In = id
//│ Defined class E[=A]
//│ Declared E.In: E['A] -> 'A -> 'A
//│ Defined E.In: E['A] -> 'a -> 'a

:e
E{} : E[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.35: 	E{} : E[?]
//│ ║        	^^^
//│ ╟── type `anything` does not match type `nothing`
//│ ║  l.35: 	E{} : E[?]
//│ ║        	        ^
//│ ╟── but it flows into application with expected type `nothing`
//│ ║  l.35: 	E{} : E[?]
//│ ║        	^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.35: 	E{} : E[?]
//│ ║        	      ^^^^
//│ ╟── from type wildcard:
//│ ║  l.35: 	E{} : E[?]
//│ ╙──      	        ^
//│ res: E[?]




def e: E[?]
def e = E{}
//│ e: E[?]
//│ E['A]
//│   <:  e:
//│ E[?]


type Als1[A] = int -> A
//│ Defined type alias Als1[+A]

:e
add 1 : Als1[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.68: 	add 1 : Als1[?]
//│ ║        	^^^^^
//│ ╟── type `int` does not match type `nothing`
//│ ╟── Note: constraint arises from type wildcard:
//│ ║  l.68: 	add 1 : Als1[?]
//│ ╙──      	             ^
//│ res: Als1[?]



def a1: Als1[?]
a1 = add 1
//│ a1: Als1[?]
//│ int -> int
//│   <:  a1:
//│ Als1[?]


type Als2[A] = A -> int
//│ Defined type alias Als2[-A]

:e
add 1 : Als2[?]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.92: 	add 1 : Als2[?]
//│ ║        	^^^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.92: 	add 1 : Als2[?]
//│ ╙──      	             ^
//│ res: Als2[?]



def a2: Als2[?]
a2 = add 1
//│ a2: Als2[?]
//│ int -> int
//│   <:  a2:
//│ Als2[?]


def q: ?
//│ q: anything

q = 1
//│ int
//│   <:  q:
//│ anything

:e
q + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.120: 	q + 1
//│ ║         	^^^
//│ ╟── type `anything` is not an instance of type `int`
//│ ║  l.111: 	def q: ?
//│ ║         	       ^
//│ ╟── but it flows into reference with expected type `int`
//│ ║  l.120: 	q + 1
//│ ╙──       	^
//│ res: int




:e
q q
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.136: 	q q
//│ ║         	^^^
//│ ╟── type `anything` is not a function
//│ ║  l.111: 	def q: ?
//│ ║         	       ^
//│ ╟── but it flows into reference with expected type `anything -> ?a`
//│ ║  l.136: 	q q
//│ ╙──       	^
//│ res: nothing




