class Left[A]: { value: A }
//│ Defined class Left[+A]

Left{value=1}
//│ res: Left[int]

def Left value = Left{ value }
//│ Left: 'value -> Left['value]

class Right[A]: { value: A }
def Right value = Right{ value }
//│ Defined class Right[+A]
//│ Right: 'value -> Right['value]

def testVal = if true then Left 1 else Right 2
//│ testVal: Left[int] | Right[int]

testVal.value
//│ res: int

def res = case testVal of
  { Left -> testVal.value
  | Right -> 1
  }
//│ res: int

res: 1
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.27: 	res: 1
//│ ║        	^^^
//│ ╟── integer literal of type `int` does not match type `1`
//│ ║  l.15: 	def testVal = if true then Left 1 else Right 2
//│ ║        	                                ^
//│ ╟── but it flows into reference with expected type `1`
//│ ║  l.27: 	res: 1
//│ ║        	^^^
//│ ╟── Note: constraint arises from literal type:
//│ ║  l.27: 	res: 1
//│ ╙──      	     ^
//│ res: 1

case res of { 1 -> "ok" }
//│ res: string

def res = case testVal of
  { Left -> testVal
  | Right -> 1
  }
//│ res: int | Left[int]

