:AllowTypeErrors

class Foo[A]: { x: A }
    method Map[B]: (A -> B) -> A
class Bar[A]: Foo[A]
    method Map[B]: B -> A
    rec method Map f = f Map (fun x -> Map)
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.7: 	    rec method Map f = f Map (fun x -> Map)
//│ ║       	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `B` is not a function
//│ ║  l.6: 	    method Map[B]: B -> A
//│ ║       	               ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.7: 	    rec method Map f = f Map (fun x -> Map)
//│ ╙──     	                       ^
//│ Defined class Foo[+A]
//│ Declared Foo.Map: Foo['A] -> ('A -> anything) -> 'A
//│ Defined class Bar[+A]
//│ Declared Bar.Map: Bar['A] -> anything -> 'A
//│ Defined Bar.Map: Bar[?] -> 'Map
//│   where
//│     'Map :> ('Map -> (anything -> 'Map) -> 'a) -> 'a





Foo.Map
Bar.Map
//│ res: Foo['A] -> ('A -> anything) -> 'A
//│ res: Bar['A] -> anything -> 'A




class bar[A, B]: Foo[A] & { Y: B; z: int }
    method identity z = z
    method identity z = z
//│ ╔══[ERROR] Field identifiers must start with a small letter
//│ ║  l.37: 	class bar[A, B]: Foo[A] & { Y: B; z: int }
//│ ╙──      	                            ^
//│ ╔══[ERROR] Method names must start with a capital letter
//│ ║  l.38: 	    method identity z = z
//│ ╙──      	           ^^^^^^^^
//│ ╔══[ERROR] Method names must start with a capital letter
//│ ║  l.39: 	    method identity z = z
//│ ╙──      	           ^^^^^^^^
//│ ╔══[ERROR] Method 'bar.identity' is already defined
//│ ║  l.39: 	    method identity z = z
//│ ║        	           ^^^^^^^^
//│ ╟── at
//│ ║  l.38: 	    method identity z = z
//│ ╙──      	           ^^^^^^^^
//│ Defined class bar[+A, +B]
//│ Defined bar.identity: Bar[?] -> 'a -> 'a
//│ Defined bar.identity: Bar[?] -> 'a -> 'a






class ImplicitCall[A]: { x: A }
    method Fun = this.x
//│ Defined class ImplicitCall[+A]
//│ Defined ImplicitCall.Fun: ImplicitCall['A] -> 'A

i = ImplicitCall { x = "stonks" }
i.Fun
//│ i: ImplicitCall[string]
//│ res: string

class NoMoreImplicitCall
    method Fun = "not stonks"
//│ Defined class NoMoreImplicitCall
//│ Defined NoMoreImplicitCall.Fun: NoMoreImplicitCall -> string

i.Fun
//│ ╔══[ERROR] Implicit call to method Fun is forbidden because it is ambiguous.
//│ ║  l.79: 	i.Fun
//│ ║        	^^^^^
//│ ╟── Unrelated methods named Fun are defined by:
//│ ╟── • class ImplicitCall
//│ ║  l.64: 	class ImplicitCall[A]: { x: A }
//│ ║        	      ^^^^^^^^^^^^
//│ ╟── • class NoMoreImplicitCall
//│ ║  l.74: 	class NoMoreImplicitCall
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ res: error







def this = fun x -> fun y -> add x y
this 42 42
//│ this: int -> int -> int
//│ res: int

class BadThis: { x: int; y: int }
    method Sum = this this.x this.y
    method Funny = this 42 42
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.104: 	    method Sum = this this.x this.y
//│ ║         	                 ^^^^^^^^^^^
//│ ╟── reference of type `BadThis & this` is not a function
//│ ║  l.104: 	    method Sum = this this.x this.y
//│ ╙──       	                 ^^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.105: 	    method Funny = this 42 42
//│ ║         	                   ^^^^^^^
//│ ╟── reference of type `BadThis & this` is not a function
//│ ║  l.105: 	    method Funny = this 42 42
//│ ╙──       	                   ^^^^
//│ Defined class BadThis
//│ Defined BadThis.Sum: BadThis -> nothing
//│ Defined BadThis.Funny: BadThis -> nothing








class BadSelf[A]: { x: A }
    method F = this.x 42
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.130: 	    method F = this.x 42
//│ ║         	               ^^^^^^^^^
//│ ╟── reference of type `A` is not a function
//│ ║  l.130: 	    method F = this.x 42
//│ ║         	               ^^^^
//│ ╟── but it flows into field selection with expected type `int -> ?a`
//│ ║  l.130: 	    method F = this.x 42
//│ ║         	               ^^^^^^
//│ ╟── Note: class type parameter A is defined at:
//│ ║  l.129: 	class BadSelf[A]: { x: A }
//│ ╙──       	              ^
//│ Defined class BadSelf[+A]
//│ Defined BadSelf.F: BadSelf[?] -> nothing




c = BadSelf { x = fun x -> x }
c.F
//│ c: BadSelf['a -> 'a]
//│ res: nothing




class Simple2[A]: { a: A }
    method Get: A
//│ Defined class Simple2[+A]
//│ Declared Simple2.Get: Simple2['A] -> 'A

class Simple3[A, B]: Simple2[A]
    method Get: B
//│ ╔══[ERROR] Type mismatch in method declaration:
//│ ║  l.163: 	    method Get: B
//│ ║         	           ^^^^^^
//│ ╟── type `B` is not an instance of type `A`
//│ ║  l.162: 	class Simple3[A, B]: Simple2[A]
//│ ║         	                 ^
//│ ╟── Note: constraint arises from class type parameter:
//│ ║  l.162: 	class Simple3[A, B]: Simple2[A]
//│ ╙──       	              ^
//│ Defined class Simple3[+A, +B]
//│ Declared Simple3.Get: Simple3[?, 'B] -> 'B







class AbstractPair[A, B]: { x: A; y: B }
    method Test: (A -> B -> bool) -> bool
    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ Defined class AbstractPair[+A, +B]
//│ Declared AbstractPair.Test: AbstractPair['A, 'B] -> ('A -> 'B -> bool) -> bool
//│ Declared AbstractPair.Map: AbstractPair['A, 'B] -> ('A -> 'C) -> ('B -> 'D) -> AbstractPair['C, 'D]

class BadPair[A, B]: AbstractPair[A, B]
    method Test f = f this.x this.x
    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.191: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `BadPair[?A, ?B] & {x: ?x, y: ?y}` does not match type `AbstractPair[?, ?] & {x: C, y: D}`
//│ ║  l.191: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.184: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ╙──       	                                              ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.191: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `C` is not an instance of type `D`
//│ ║  l.191: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	                                                    ^^^^^^^^^
//│ ╟── but it flows into application with expected type `D`
//│ ║  l.191: 	    method Map fx fy = BadPair { x = fx this.x; y = fx this.x }
//│ ║         	                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.184: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ║         	                                              ^^^^^^^^^^^^^^^^^^
//│ ╟── from record type:
//│ ║  l.182: 	class AbstractPair[A, B]: { x: A; y: B }
//│ ║         	                          ^^^^^^^^^^^^^^
//│ ╟── Note: method type parameter C is defined at:
//│ ║  l.184: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ║         	               ^
//│ ╟──       method type parameter D is defined at:
//│ ║  l.184: 	    method Map[C, D]: (A -> C) -> (B -> D) -> AbstractPair[C, D]
//│ ╙──       	                  ^
//│ Defined class BadPair[+A, +B]
//│ Defined BadPair.Test: BadPair[?, ?] -> (nothing -> nothing -> 'a) -> 'a
//│ Defined BadPair.Map: BadPair[?, ?] -> (nothing -> 'y) -> anything -> BadPair['y, 'y]









bp = BadPair { x = 42; y = true }
bp.(BadPair.Test) (fun x -> fun y -> if (y) then x else y)
//│ bp: BadPair[int, true]
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.235: 	bp.(BadPair.Test) (fun x -> fun y -> if (y) then x else y)
//│ ║         	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `BadPair[?A, ?B] & {BadPair#A = ?A, BadPair#B = ?B, x: ?x, y: ?y}` is not an instance of type `AbstractPair`
//│ ║  l.234: 	bp = BadPair { x = 42; y = true }
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `AbstractPair[?, ?]`
//│ ║  l.235: 	bp.(BadPair.Test) (fun x -> fun y -> if (y) then x else y)
//│ ║         	^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.189: 	class BadPair[A, B]: AbstractPair[A, B]
//│ ╙──       	                     ^^^^^^^^^^^^^^^^^^
//│ res: nothing





BadPair = BadPair { x = 42; y = 0 }
BadPair.Map
BadPair.(BadPair.Map)
//│ BadPair: BadPair[int, int]
//│ res: BadPair[?, ?] -> (nothing -> 'y) -> anything -> BadPair['y, 'y]
//│ ╔══[ERROR] Class BadPair has no method BadPair.Map
//│ ║  l.257: 	BadPair.(BadPair.Map)
//│ ╙──       	^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.257: 	BadPair.(BadPair.Map)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── application of type `BadPair[?A, ?B] & {BadPair#A = ?A, BadPair#B = ?B, x: ?x, y: ?y}` is not an instance of type `AbstractPair`
//│ ║  l.255: 	BadPair = BadPair { x = 42; y = 0 }
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `AbstractPair[?, ?]`
//│ ║  l.257: 	BadPair.(BadPair.Map)
//│ ║         	^^^^^^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.189: 	class BadPair[A, B]: AbstractPair[A, B]
//│ ╙──       	                     ^^^^^^^^^^^^^^^^^^
//│ res: (nothing -> 'y) -> anything -> BadPair['y, 'y]



class ClassA
    method MtdA = 42
//│ Defined class ClassA
//│ Defined ClassA.MtdA: ClassA -> int

:e
class ClassB: ClassA
    method MtdA = 43
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.286: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.280: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassB
//│ Defined ClassB.MtdA: ClassB -> int








:e
class ClassC: ClassA
    method MtdA: int
    method MtdA = 43
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.305: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.280: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassC
//│ Declared ClassC.MtdA: ClassC -> int
//│ Defined ClassC.MtdA: ClassC -> int








:e
class ClassD: ClassA
    method MtdA: int
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.326: 	    method MtdA: int
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.280: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassD
//│ Declared ClassD.MtdA: ClassD -> int








// TODO: remove repeated overriding errors?
class ClassE: ClassD
    method MtdA = 43
//│ ╔══[ERROR] Overriding method ClassA.MtdA without explicit declaration is not allowed.
//│ ║  l.345: 	    method MtdA = 43
//│ ║         	           ^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.280: 	    method MtdA = 42
//│ ╙──       	           ^^^^^^^^^
//│ Defined class ClassE
//│ Defined ClassE.MtdA: ClassE -> int








(ClassE{}).MtdA // typed as 42!
//│ ╔══[ERROR] Implicit call to method MtdA is forbidden because it is ambiguous.
//│ ║  l.362: 	(ClassE{}).MtdA // typed as 42!
//│ ║         	^^^^^^^^^^^^^^^
//│ ╟── Unrelated methods named MtdA are defined by:
//│ ╟── • class ClassA
//│ ║  l.279: 	class ClassA
//│ ║         	      ^^^^^^
//│ ╟── • class ClassB
//│ ║  l.285: 	class ClassB: ClassA
//│ ║         	      ^^^^^^
//│ ╟── • class ClassC
//│ ║  l.304: 	class ClassC: ClassA
//│ ║         	      ^^^^^^
//│ ╟── • class ClassD
//│ ║  l.325: 	class ClassD: ClassA
//│ ║         	      ^^^^^^
//│ ╟── • class ClassE
//│ ║  l.344: 	class ClassE: ClassD
//│ ╙──       	      ^^^^^^
//│ res: error


:e
class Class2A[A]
    method MtdA: A
trait Trait2A[B]
    method MtdA: B
class Class2B: Class2A[int] & Trait2A[string]
    method MtdA = "ok"
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.391: 	    method MtdA = "ok"
//│ ║         	           ^^^^^^^^^^^
//│ ╟── string literal of type `string` is not an instance of type `int`
//│ ║  l.391: 	    method MtdA = "ok"
//│ ║         	                  ^^^^
//│ ╟── but it flows into method definition with expected type `int`
//│ ║  l.391: 	    method MtdA = "ok"
//│ ║         	           ^^^^^^^^^^^
//│ ╟── Note: constraint arises from inherited method declaration:
//│ ║  l.387: 	    method MtdA: A
//│ ║         	           ^^^^^^^
//│ ╟── from type reference:
//│ ║  l.390: 	class Class2B: Class2A[int] & Trait2A[string]
//│ ╙──       	                       ^^^
//│ Defined class Class2A[+A]
//│ Declared Class2A.MtdA: Class2A['A] -> 'A
//│ Defined trait Trait2A[+B]
//│ Declared Trait2A.MtdA: Trait2A['B] -> 'B
//│ Defined class Class2B
//│ Defined Class2B.MtdA: Class2B -> string







:e
class Class3A[A]
    method MtdA: A
type Type3A = Class3A[string]
class Class3B: Type3A
    method MtdA = 1
//│ ╔══[ERROR] cannot inherit from a type alias
//│ ║  l.424: 	class Class3B: Type3A
//│ ╙──       	      ^^^^^^^^^^^^^^^
//│ Defined class Class3A[+A]
//│ Declared Class3A.MtdA: Class3A['A] -> 'A
//│ Defined type alias Type3A



:e
Oops.M
//│ ╔══[ERROR] Method M not found
//│ ║  l.436: 	Oops.M
//│ ╙──       	^^^^^^
//│ res: error



class Test4A
    method Mth4A: anything
    method Mth4A = true
//│ Defined class Test4A
//│ Declared Test4A.Mth4A: Test4A -> anything
//│ Defined Test4A.Mth4A: Test4A -> true
:e
class Test4B: Test4A
    method Mth4A: int
//│ ╔══[ERROR] Type mismatch in inherited method definition:
//│ ║  l.446: 	    method Mth4A = true
//│ ║         	           ^^^^^^^^^^^^
//│ ╟── reference of type `true` is not an instance of type `int`
//│ ║  l.446: 	    method Mth4A = true
//│ ║         	                   ^^^^
//│ ╟── but it flows into inherited method definition with expected type `int`
//│ ║  l.446: 	    method Mth4A = true
//│ ║         	           ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from method declaration:
//│ ║  l.452: 	    method Mth4A: int
//│ ║         	           ^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.452: 	    method Mth4A: int
//│ ╙──       	                  ^^^
//│ ╔══[ERROR] Overriding method Test4A.Mth4A without an overriding definition is not allowed.
//│ ║  l.452: 	    method Mth4A: int
//│ ║         	           ^^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.446: 	    method Mth4A = true
//│ ╙──       	           ^^^^^^^^^^^^
//│ Defined class Test4B
//│ Declared Test4B.Mth4A: Test4B -> int








o = Test4A {}
o.Mth4A
o.(Test4A.Mth4A)
//│ o: Test4A
//│ ╔══[ERROR] Implicit call to method Mth4A is forbidden because it is ambiguous.
//│ ║  l.485: 	o.Mth4A
//│ ║         	^^^^^^^
//│ ╟── Unrelated methods named Mth4A are defined by:
//│ ╟── • class Test4A
//│ ║  l.444: 	class Test4A
//│ ║         	      ^^^^^^
//│ ╟── • class Test4B
//│ ║  l.451: 	class Test4B: Test4A
//│ ╙──       	      ^^^^^^
//│ res: error
//│ res: anything

:e
class Test5A
    method Mth5A: 42
class Test5B: Test5A
    method Mth5A = 43
//│ ╔══[ERROR] Type mismatch in method definition:
//│ ║  l.505: 	    method Mth5A = 43
//│ ║         	           ^^^^^^^^^^
//│ ╟── integer literal of type `int` does not match type `42`
//│ ║  l.505: 	    method Mth5A = 43
//│ ║         	                   ^^
//│ ╟── but it flows into method definition with expected type `42`
//│ ║  l.505: 	    method Mth5A = 43
//│ ║         	           ^^^^^^^^^^
//│ ╟── Note: constraint arises from inherited method declaration:
//│ ║  l.503: 	    method Mth5A: 42
//│ ║         	           ^^^^^^^^^
//│ ╟── from literal type:
//│ ║  l.503: 	    method Mth5A: 42
//│ ╙──       	                  ^^
//│ Defined class Test5A
//│ Declared Test5A.Mth5A: Test5A -> 42
//│ Defined class Test5B
//│ Defined Test5B.Mth5A: Test5B -> int







class Test6A[A]
    method Mth6A: A
    method Mth6B[B]: (A -> B) -> B
trait Test6B
    method Mth6A: bool
class Test6C: Test6A[int] & Test6B
//│ Defined class Test6A[+A]
//│ Declared Test6A.Mth6A: Test6A['A] -> 'A
//│ Declared Test6A.Mth6B: Test6A['A] -> ('A -> 'B) -> 'B
//│ Defined trait Test6B
//│ Declared Test6B.Mth6A: Test6B -> bool
//│ Defined class Test6C

:e
Test6A
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.546: 	Test6A
//│ ║         	^^^^^^
//│ ╟── Note that class Test6A is abstract:
//│ ║  l.532: 	class Test6A[A]
//│ ║         	      ^^^^^^^^
//│ ╟── Hint: method Mth6A is abstract
//│ ║  l.533: 	    method Mth6A: A
//│ ║         	           ^^^^^^^^
//│ ╟── Hint: method Mth6B is abstract
//│ ║  l.534: 	    method Mth6B[B]: (A -> B) -> B
//│ ╙──       	           ^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error





:e
Test6B
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.566: 	Test6B
//│ ║         	^^^^^^
//│ ╟── Note that trait Test6B is abstract:
//│ ║  l.535: 	trait Test6B
//│ ║         	      ^^^^^^
//│ ╟── Hint: method Mth6A is abstract
//│ ║  l.536: 	    method Mth6A: bool
//│ ╙──       	           ^^^^^^^^^^^
//│ res: error




:e
Test6C
//│ ╔══[ERROR] Instantiation of an abstract type is forbidden
//│ ║  l.582: 	Test6C
//│ ║         	^^^^^^
//│ ╟── Note that class Test6C is abstract:
//│ ║  l.537: 	class Test6C: Test6A[int] & Test6B
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Mth6B is abstract
//│ ║  l.534: 	    method Mth6B[B]: (A -> B) -> B
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Hint: method Mth6A is abstract
//│ ║  l.537: 	class Test6C: Test6A[int] & Test6B
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: error








:e
class Dup[A, A]: { x: A }
    method MthDup[B, C, // random comment
        B]: (A -> B) -> B
    method MthDup f = f this.x
//│ ╔══[ERROR] Multiple declarations of type parameter A in class definition
//│ ║  l.605: 	class Dup[A, A]: { x: A }
//│ ║         	      ^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.605: 	class Dup[A, A]: { x: A }
//│ ║         	          ^
//│ ╟── Declared at
//│ ║  l.605: 	class Dup[A, A]: { x: A }
//│ ╙──       	             ^
//│ ╔══[ERROR] Multiple declarations of type parameter B in method declaration
//│ ║  l.606: 	    method MthDup[B, C, // random comment
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.607: 	        B]: (A -> B) -> B
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Declared at
//│ ║  l.606: 	    method MthDup[B, C, // random comment
//│ ║         	                  ^
//│ ╟── Declared at
//│ ║  l.607: 	        B]: (A -> B) -> B
//│ ╙──       	        ^
//│ Defined class Dup[±A, +A]
//│ Declared Dup.MthDup: Dup[?, 'A] -> ('A -> 'B) -> 'B
//│ Defined Dup.MthDup: Dup[?, 'A] -> ('A -> 'a) -> 'a
//│ ╔══[WARNING] Type definition Dup has bivariant type parameters:
//│ ║  l.605: 	class Dup[A, A]: { x: A }
//│ ║         	      ^^^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.605: 	class Dup[A, A]: { x: A }
//│ ╙──       	          ^










t = Dup { x = 42 }
//│ t: Dup[?, ?] & {x: int}

:stats
t : Dup[bool, int]
//│ res: Dup[?, int]
//│ constrain calls  : 21
//│ annoying  calls  : 21
//│ subtyping calls  : 43

:stats
t : Dup[int, bool]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.659: 	t : Dup[int, bool]
//│ ║         	^
//│ ╟── integer literal of type `int` is not an instance of type `bool`
//│ ║  l.648: 	t = Dup { x = 42 }
//│ ║         	              ^^
//│ ╟── but it flows into reference with expected type `bool`
//│ ║  l.659: 	t : Dup[int, bool]
//│ ║         	^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.659: 	t : Dup[int, bool]
//│ ║         	    ^^^^^^^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.659: 	t : Dup[int, bool]
//│ ╙──       	             ^^^^
//│ res: Dup[?, bool]
//│ constrain calls  : 24
//│ annoying  calls  : 23
//│ subtyping calls  : 42




:stats
t.MthDup (fun x -> mul 2 x)
//│ res: int
//│ constrain calls  : 88
//│ annoying  calls  : 21
//│ subtyping calls  : 36

:stats
t.MthDup id
//│ res: int
//│ constrain calls  : 93
//│ annoying  calls  : 19
//│ subtyping calls  : 30


// We don't currently analyze forward method declarations
:e
class A
  method Yes = B { x = 1 }
  method Nope = this.Yes.F1
class B: { x: int }
  method F1: int
  method F1 = 1
//│ ╔══[ERROR] Method F1 not found
//│ ║  l.702: 	  method Nope = this.Yes.F1
//│ ╙──       	                ^^^^^^^^^^^
//│ Defined class A
//│ Defined A.Yes: A -> B
//│ Defined A.Nope: A -> error
//│ Defined class B
//│ Declared B.F1: B -> int
//│ Defined B.F1: B -> int



trait D
  method G = 1
trait E
  method G: int
class H: D & E
  method G = 2
//│ ╔══[ERROR] Overriding method D.G without explicit declaration is not allowed.
//│ ║  l.723: 	  method G = 2
//│ ║         	         ^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.719: 	  method G = 1
//│ ╙──       	         ^^^^^
//│ Defined trait D
//│ Defined D.G: D -> int
//│ Defined trait E
//│ Declared E.G: E -> int
//│ Defined class H
//│ Defined H.G: H -> int








h = H{}
//│ h: H

d = h: D
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.747: 	d = h: D
//│ ║         	    ^
//│ ╟── application of type `H` is not an instance of `D`
//│ ║  l.744: 	h = H{}
//│ ║         	    ^^^
//│ ╟── but it flows into reference with expected type `D`
//│ ║  l.747: 	d = h: D
//│ ║         	    ^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.747: 	d = h: D
//│ ║         	       ^
//│ ╟── Note: class H is defined at:
//│ ║  l.722: 	class H: D & E
//│ ╙──       	      ^
//│ d: D

d.(D.G)
//│ res: int

((H{}): D).(D.G)
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.768: 	((H{}): D).(D.G)
//│ ║         	 ^^^^^
//│ ╟── application of type `H` is not an instance of `D`
//│ ║  l.768: 	((H{}): D).(D.G)
//│ ║         	  ^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.768: 	((H{}): D).(D.G)
//│ ║         	        ^
//│ ╟── Note: class H is defined at:
//│ ║  l.722: 	class H: D & E
//│ ╙──       	      ^
//│ res: int


trait D2
  method G2 = 1
trait E2
  method G2: bool
class H2: D2 & E2
//│ ╔══[ERROR] Type mismatch in inherited method definition:
//│ ║  l.785: 	  method G2 = 1
//│ ║         	         ^^^^^^
//│ ╟── integer literal of type `int` is not an instance of type `bool`
//│ ║  l.785: 	  method G2 = 1
//│ ║         	              ^
//│ ╟── but it flows into inherited method definition with expected type `bool`
//│ ║  l.785: 	  method G2 = 1
//│ ║         	         ^^^^^^
//│ ╟── Note: constraint arises from inherited method declaration:
//│ ║  l.787: 	  method G2: bool
//│ ║         	         ^^^^^^^^
//│ ╟── from type reference:
//│ ║  l.787: 	  method G2: bool
//│ ╙──       	             ^^^^
//│ Defined trait D2
//│ Defined D2.G2: D2 -> int
//│ Defined trait E2
//│ Declared E2.G2: E2 -> bool
//│ Defined class H2









trait Test7A
  method Mth7A: int
  method Mth7A = 42
trait Test7B
  method Mth7A: int
  method Mth7A = 43
//│ Defined trait Test7A
//│ Declared Test7A.Mth7A: Test7A -> int
//│ Defined Test7A.Mth7A: Test7A -> int
//│ Defined trait Test7B
//│ Declared Test7B.Mth7A: Test7B -> int
//│ Defined Test7B.Mth7A: Test7B -> int

:e
class Test7C: Test7A & Test7B
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.832: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7A
//│ ║  l.820: 	  method Mth7A = 42
//│ ║         	         ^^^^^^^^^^
//│ ╟── • Test7B
//│ ║  l.823: 	  method Mth7A = 43
//│ ╙──       	         ^^^^^^^^^^
//│ Defined class Test7C




Test7C.Mth7A
//│ res: error

class Test7D: Test7A & Test7B
  method Mth7A = this.(Test7A.Mth7A) * this.(Test7B.Mth7A)
//│ Defined class Test7D
//│ Defined Test7D.Mth7A: Test7D -> int

:e // TODO: suppress?
class Test7E: Test7C
  method Mth7A = 0
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.832: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7A
//│ ║  l.820: 	  method Mth7A = 42
//│ ║         	         ^^^^^^^^^^
//│ ╟── • Test7B
//│ ║  l.823: 	  method Mth7A = 43
//│ ╙──       	         ^^^^^^^^^^
//│ Defined class Test7E
//│ Defined Test7E.Mth7A: Test7E -> int




trait Test7F
  method Mth7A = 0
//│ Defined trait Test7F
//│ Defined Test7F.Mth7A: Test7F -> int

:e
class Test7G: Test7C & Test7F
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.832: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7A
//│ ║  l.820: 	  method Mth7A = 42
//│ ║         	         ^^^^^^^^^^
//│ ╟── • Test7B
//│ ║  l.823: 	  method Mth7A = 43
//│ ╙──       	         ^^^^^^^^^^
//│ ╔══[ERROR] An overriding method definition must be given when inheriting from multiple method definitions
//│ ║  l.881: 	class Test7G: Test7C & Test7F
//│ ║         	      ^^^^^^
//│ ╟── Definitions of method Mth7A inherited from:
//│ ╟── • Test7C
//│ ║  l.832: 	class Test7C: Test7A & Test7B
//│ ║         	      ^^^^^^
//│ ╟── • Test7F
//│ ║  l.876: 	  method Mth7A = 0
//│ ╙──       	         ^^^^^^^^^
//│ Defined class Test7G










class Test8A
    method F: int
    method F = 1
//│ Defined class Test8A
//│ Declared Test8A.F: Test8A -> int
//│ Defined Test8A.F: Test8A -> int

:e
class Test8B: Test8A
    method F: 1
//│ ╔══[ERROR] Type mismatch in inherited method definition:
//│ ║  l.915: 	    method F = 1
//│ ║         	           ^^^^^
//│ ╟── integer literal of type `int` does not match type `1`
//│ ║  l.915: 	    method F = 1
//│ ║         	               ^
//│ ╟── but it flows into inherited method definition with expected type `1`
//│ ║  l.915: 	    method F = 1
//│ ║         	           ^^^^^
//│ ╟── Note: constraint arises from method declaration:
//│ ║  l.922: 	    method F: 1
//│ ║         	           ^^^^
//│ ╟── from literal type:
//│ ║  l.922: 	    method F: 1
//│ ╙──       	              ^
//│ ╔══[ERROR] Overriding method Test8A.F without an overriding definition is not allowed.
//│ ║  l.922: 	    method F: 1
//│ ║         	           ^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.915: 	    method F = 1
//│ ╙──       	           ^^^^^
//│ Defined class Test8B
//│ Declared Test8B.F: Test8B -> 1



class Test8C[A]
    method F: A
    method F = error
//│ Defined class Test8C[+A]
//│ Declared Test8C.F: Test8C['A] -> 'A
//│ Defined Test8C.F: Test8C[?] -> nothing

// We used to allow syntactically identitcal declarations for documentation,
//  but that's actually a bad idea (and the implementation was broken)
:e
class Test8D: Test8C[int]
    method F: int
//│ ╔══[ERROR] Overriding method Test8C.F without an overriding definition is not allowed.
//│ ║  l.960: 	    method F: int
//│ ║         	           ^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.951: 	    method F = error
//│ ╙──       	           ^^^^^^^^^
//│ Defined class Test8D
//│ Declared Test8D.F: Test8D -> int






class Test9A[A]: { x: A }
    method Mth9A = this.x
//│ Defined class Test9A[+A]
//│ Defined Test9A.Mth9A: Test9A['A] -> 'A

class Test9B: Test9A[int]
    method Mth9A : Test9A[int] -> int
    method Mth9A = this.x
//│ ╔══[ERROR] Overriding method Test9A.Mth9A without explicit declaration is not allowed.
//│ ║  l.981: 	    method Mth9A : Test9A[int] -> int
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: method definition inherited from
//│ ║  l.976: 	    method Mth9A = this.x
//│ ╙──       	           ^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in method declaration:
//│ ║  l.981: 	    method Mth9A : Test9A[int] -> int
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Test9A[int] -> int` is not an instance of type `X`
//│ ║  l.981: 	    method Mth9A : Test9A[int] -> int
//│ ║         	                   ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into method declaration with expected type `#X`
//│ ║  l.981: 	    method Mth9A : Test9A[int] -> int
//│ ║         	           ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from inherited method definition:
//│ ║  l.976: 	    method Mth9A = this.x
//│ ║         	           ^^^^^^^^^^^^^^
//│ ╟── from field selection:
//│ ║  l.976: 	    method Mth9A = this.x
//│ ╙──       	                   ^^^^^^
//│ Defined class Test9B
//│ Declared Test9B.Mth9A: Test9B -> Test9A[int] -> int
//│ Defined Test9B.Mth9A: Test9B -> nothing













:e

error.(Test9B.Mth9A): nothing
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.1022: 	error.(Test9B.Mth9A): nothing
//│ ║          	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Test9A[int] -> int` does not match type `nothing`
//│ ║  l.981: 	    method Mth9A : Test9A[int] -> int
//│ ║         	                   ^^^^^^^^^^^^^^^^^^
//│ ╟── but it flows into field selection with expected type `nothing`
//│ ║  l.1022: 	error.(Test9B.Mth9A): nothing
//│ ║          	^^^^^^^^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.1022: 	error.(Test9B.Mth9A): nothing
//│ ╙──        	                      ^^^^^^^
//│ res: nothing




