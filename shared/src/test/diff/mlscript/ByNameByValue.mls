
def incr x = x.a <- x.a + 1
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.2: 	def incr x = x.a <- x.a + 1
//│ ║       	                    ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.2: 	def incr x = x.a <- x.a + 1
//│ ╙──     	                    ^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.2: 	def incr x = x.a <- x.a + 1
//│ ║       	                    ^^^^^^^
//│ ╟── argument of type `(int,)` is not an instance of `int`
//│ ║  l.2: 	def incr x = x.a <- x.a + 1
//│ ╙──     	                          ^
//│ incr: {mut a: in int} -> unit


:p

def gensym = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ gensym: () -> (unit, {mut a: 'a},)
//│   where
//│     'a :> int


:p
gensym1 = let n = { mut a = 0 } in fun () -> (incr n, n)
//│ gensym1: () -> (unit, {mut a: 'a},)
//│   where
//│     'a :> int


gensym ()
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> int


gensym ()
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> int


gensym1 ()
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> int

gensym1 ()
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> int


gensym1 ()
//│ res: (unit, {mut a: 'a},)
//│   where
//│     'a :> int


def f x = x
//│ f: 'a -> 'a


f 1
//│ res: int


rec def xx = xx
//│ xx: nothing

class Nil: {}
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons[+A]
//│ Defined type alias List[+A]

def Nil = Nil {}
def Cons head tail = Cons { head; tail }
//│ Nil: Nil
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.81: 	def Cons head tail = Cons { head; tail }
//│ ║        	                     ^^^^^^^^^^^^^^^^^^^
//│ ╟── argument of type `({head: ?a, tail: ?b},)` is not a record (expected a record with fields: head, tail)
//│ ║  l.81: 	def Cons head tail = Cons { head; tail }
//│ ╙──      	                          ^^^^^^^^^^^^^^
//│ Cons: anything -> anything -> (Cons[nothing] & {tail: nothing})


rec def xs = Cons 0 (Cons 1 xs)
//│ xs: Cons[nothing] & {tail: nothing}

:re
xs
//│ res: Cons[nothing] & {tail: nothing}
