
def foo(a, b, c) = add a (add b c)
foo(1, 2, 3)
foo(1, 2, 3,)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ║       	                   ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ╙──     	                       ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ║       	                          ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ╙──     	                              ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ║       	                          ^^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ╙──     	                                ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ║       	                   ^^^^^^^^^^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.2: 	def foo(a, b, c) = add a (add b c)
//│ ╙──     	                         ^^^^^^^^^
//│ foo: (anything, anything, anything,) -> int
//│ res: int
//│ res: int

def bar() = 1
bar()
bar(,)
//│ bar: () -> int
//│ res: int
//│ res: int

def bar(x) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│ res: int
//│ res: int

def bar(x,) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│ res: int
//│ res: int

def bar(x, y) = add x y
bar(1, 2)
bar(1, 2,)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.54: 	def bar(x, y) = add x y
//│ ║        	                ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.54: 	def bar(x, y) = add x y
//│ ╙──      	                    ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.54: 	def bar(x, y) = add x y
//│ ║        	                ^^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.54: 	def bar(x, y) = add x y
//│ ╙──      	                      ^
//│ bar: (anything, anything,) -> int
//│ res: int
//│ res: int

:e
bar((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.74: 	bar((1, 2))
//│ ║        	^^^^^^^^^^^
//│ ╟── argument of type `((int, int,),)` does not match type `(?a, ?b,)`
//│ ║  l.74: 	bar((1, 2))
//│ ║        	   ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.54: 	def bar(x, y) = add x y
//│ ╙──      	       ^^^^^^
//│ res: int




def bar((x, y)) = add x y
bar((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.89: 	def bar((x, y)) = add x y
//│ ║        	                  ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.89: 	def bar((x, y)) = add x y
//│ ╙──      	                      ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.89: 	def bar((x, y)) = add x y
//│ ║        	                  ^^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.89: 	def bar((x, y)) = add x y
//│ ╙──      	                        ^
//│ bar: (anything, anything,) -> int
//│ res: int

:p
f = fun (x, y) -> add x y
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.107: 	f = fun (x, y) -> add x y
//│ ║         	                  ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.107: 	f = fun (x, y) -> add x y
//│ ╙──       	                      ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.107: 	f = fun (x, y) -> add x y
//│ ║         	                  ^^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.107: 	f = fun (x, y) -> add x y
//│ ╙──       	                        ^
//│ f: (anything, anything,) -> int
//│ res: int

:e
f((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.125: 	f((1, 2))
//│ ║         	^^^^^^^^^
//│ ╟── argument of type `((int, int,),)` does not match type `(?a, ?b,)`
//│ ║  l.125: 	f((1, 2))
//│ ║         	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.107: 	f = fun (x, y) -> add x y
//│ ╙──       	        ^^^^^^
//│ res: int




:e
r = (1, 2)
f r
//│ r: (int, int,)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.142: 	f r
//│ ║         	^^^
//│ ╟── argument of type `((int, int,),)` does not match type `(?a, ?b,)`
//│ ║  l.142: 	f r
//│ ║         	  ^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.107: 	f = fun (x, y) -> add x y
//│ ╙──       	        ^^^^^^
//│ res: int




:p
f = fun ((x, y)) -> add x y
f((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.159: 	f = fun ((x, y)) -> add x y
//│ ║         	                    ^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.159: 	f = fun ((x, y)) -> add x y
//│ ╙──       	                        ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.159: 	f = fun ((x, y)) -> add x y
//│ ║         	                    ^^^^^^^
//│ ╟── argument of type `(?a,)` is not an instance of `int`
//│ ║  l.159: 	f = fun ((x, y)) -> add x y
//│ ╙──       	                          ^
//│ f: (anything, anything,) -> int
//│ res: int

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.177: 	f(1, 2)
//│ ║         	^^^^^^^
//│ ╟── tuple literal of type `(int, int,)` does not match type `((?a, ?b,),)`
//│ ║  l.177: 	f(1, 2)
//│ ╙──       	 ^^^^^^
//│ res: int



r = (1, 2)
f r
//│ r: (int, int,)
//│ res: int

