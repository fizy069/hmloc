
def foo(a, b, c) = add a (add b c)
foo(1, 2, 3)
foo(1, 2, 3,)
//│ foo: (int, int, int,) -> int
//│ res: int
//│ res: int

def bar() = 1
bar()
bar(,)
//│ bar: () -> int
//│ res: int
//│ res: int

def bar(x) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│ res: int
//│ res: int

def bar(x,) = x
bar(1)
bar(1,)
//│ bar: 'a -> 'a
//│ res: int
//│ res: int

def bar(x, y) = add x y
bar(1, 2)
bar(1, 2,)
//│ bar: (int, int,) -> int
//│ res: int
//│ res: int

:e
bar((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.38: 	bar((1, 2))
//│ ║        	^^^^^^^^^^^
//│ ╟── argument of type `((int, int,),)` does not match type `(?a, ?b,)`
//│ ║  l.38: 	bar((1, 2))
//│ ║        	   ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.30: 	def bar(x, y) = add x y
//│ ╙──      	       ^^^^^^
//│ res: int




def bar((x, y)) = add x y
bar((1, 2))
//│ bar: (int, int,) -> int
//│ res: int

:p
f = fun (x, y) -> add x y
f(1, 2)
//│ f: (int, int,) -> int
//│ res: int

:e
f((1, 2))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.65: 	f((1, 2))
//│ ║        	^^^^^^^^^
//│ ╟── argument of type `((int, int,),)` does not match type `(?a, ?b,)`
//│ ║  l.65: 	f((1, 2))
//│ ║        	 ^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.59: 	f = fun (x, y) -> add x y
//│ ╙──      	        ^^^^^^
//│ res: int




:e
r = (1, 2)
f r
//│ r: (int, int,)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.82: 	f r
//│ ║        	^^^
//│ ╟── argument of type `((int, int,),)` does not match type `(?a, ?b,)`
//│ ║  l.82: 	f r
//│ ║        	  ^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.59: 	f = fun (x, y) -> add x y
//│ ╙──      	        ^^^^^^
//│ res: int




:p
f = fun ((x, y)) -> add x y
f((1, 2))
//│ f: (int, int,) -> int
//│ res: int

:e
f(1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.105: 	f(1, 2)
//│ ║         	^^^^^^^
//│ ╟── tuple literal of type `(int, int,)` does not match type `((?a, ?b,),)`
//│ ║  l.105: 	f(1, 2)
//│ ╙──       	 ^^^^^^
//│ res: int



r = (1, 2)
f r
//│ r: (int, int,)
//│ res: int

