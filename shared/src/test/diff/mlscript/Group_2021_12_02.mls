
class Lit
class Add
class Const
//│ Defined class Lit
//│ Defined class Add
//│ Defined class Const

Lit
//│ res: anything -> Lit

def eval0: ('b -> ('c & int)) -> (Lit & {val: int} | Add & {lhs: 'a; rhs: 'a} | ~lit & ~add & 'b as 'a) -> (int | 'c)
//│ eval0: ('b -> int) -> 'a -> int
//│   where
//│     'a <: 'b & ~#Add & ~#Lit | Add & {lhs: 'a, rhs: 'a} | Lit & {val: int}

def evalUgly: ('b -> ('c & int)) -> (Lit & {val: int} | Add & {lhs: 'a; rhs: 'a} | ~Lit & ~Add & 'b as 'a) -> (int | 'c)
//│ evalUgly: ('b -> int) -> 'a -> int
//│   where
//│     'a <: 'b & ~Add & ~Lit | Add & {lhs: 'a, rhs: 'a} | Lit & {val: int}

def evalBad: ('b -> 'c) -> (Lit & {val: int} | Add & {lhs: 'a; rhs: 'a} | ~Lit & ~Add & 'b as 'a) -> (int | 'c)
//│ evalBad: ('b -> 'c) -> 'a -> ('c | int)
//│   where
//│     'a <: 'b & ~Add & ~Lit | Add & {lhs: 'a, rhs: 'a} | Lit & {val: int}

type Expr[A] = Lit & {val: int} | Add & {lhs: Expr[A]; rhs: Expr[A]} | ~Lit & ~Add & A
//│ Defined type alias Expr[+A]

def eval1: ('b -> ('c & int)) -> Expr['b] -> (int | 'c)
//│ eval1: ('b -> int) -> Expr['b] -> int

def eval: ('b -> int) -> Expr['b] -> int
//│ eval: ('b -> int) -> Expr['b] -> int

rec def evalImpl f e = case e of {
  | Lit -> e.val
  | Add -> evalImpl f e.lhs + evalImpl f e.rhs
  | _ -> f e
  }
//│ evalImpl: ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add & {lhs: 'b, rhs: 'b} | Lit & {val: int} | 'a & ~#Add & ~#Lit

rec def evalPeel f e = case e of {
  | Lit -> e.val
  | Add -> eval f e.lhs + eval f e.rhs
  | _ -> f e
  }
//│ evalPeel: ('b -> (int & 'val)) -> ('b & ~#Add & ~#Lit | Add & {lhs: Expr['b], rhs: Expr['b]} | Lit & {val: 'val}) -> (int | 'val)

eval = evalPeel
//│ ('b -> (int & 'val)) -> ('b & ~#Add & ~#Lit | Add & {lhs: Expr['b], rhs: Expr['b]} | Lit & {val: 'val}) -> (int | 'val)
//│   <:  eval:
//│ ('b -> int) -> Expr['b] -> int

eval = evalImpl
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add & {lhs: 'b, rhs: 'b} | Lit & {val: int} | 'a & ~#Add & ~#Lit
//│   <:  eval:
//│ ('b -> int) -> Expr['b] -> int

eval0 = evalImpl
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add & {lhs: 'b, rhs: 'b} | Lit & {val: int} | 'a & ~#Add & ~#Lit
//│   <:  eval0:
//│ ('b -> int) -> 'a -> int
//│   where
//│     'a <: 'b & ~#Add & ~#Lit | Add & {lhs: 'a, rhs: 'a} | Lit & {val: int}

evalUgly = evalImpl
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add & {lhs: 'b, rhs: 'b} | Lit & {val: int} | 'a & ~#Add & ~#Lit
//│   <:  evalUgly:
//│ ('b -> int) -> 'a -> int
//│   where
//│     'a <: 'b & ~Add & ~Lit | Add & {lhs: 'a, rhs: 'a} | Lit & {val: int}

eval1 = evalImpl
//│ ('a -> int) -> 'b -> int
//│   where
//│     'b <: Add & {lhs: 'b, rhs: 'b} | Lit & {val: int} | 'a & ~#Add & ~#Lit
//│   <:  eval1:
//│ ('b -> int) -> Expr['b] -> int

:e
evalBad = eval
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.90: 	evalBad = eval
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── type `'c` is not an instance of `int`
//│ ║  l.22: 	def evalBad: ('b -> 'c) -> (Lit & {val: int} | Add & {lhs: 'a; rhs: 'a} | ~Lit & ~Add & 'b as 'a) -> (int | 'c)
//│ ║        	                    ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.33: 	def eval: ('b -> int) -> Expr['b] -> int
//│ ╙──      	                 ^^^
//│ ('b -> int) -> Expr['b] -> int
//│   <:  evalBad:
//│ ('b -> 'c) -> 'a -> ('c | int)
//│   where
//│     'a <: 'b & ~Add & ~Lit | Add & {lhs: 'a, rhs: 'a} | Lit & {val: int}




:e
eval {} (Lit{} with { val = 1 })
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.110: 	eval {} (Lit{} with { val = 1 })
//│ ║         	^^^^^^^
//│ ╟── record literal of type `anything` is not a function
//│ ║  l.110: 	eval {} (Lit{} with { val = 1 })
//│ ║         	     ^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.33: 	def eval: ('b -> int) -> Expr['b] -> int
//│ ╙──      	          ^^^^^^^^^^^
//│ res: int




eval (fun x -> x) (Lit{} with { val = 1 })
//│ res: int

eval (fun x -> x) 1
//│ res: int

eval (fun x -> x.hello) (Const{} with {hello=1})
//│ res: int

:e
eval (fun x -> x.hello) {hello=1}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.135: 	eval (fun x -> x.hello) {hello=1}
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── record literal of type `{hello: int}` does not match type `?b & ~Add & ~Lit | Add & {lhs: Expr[?b], rhs: Expr[?b]} | Lit & {val: int}`
//│ ║  l.135: 	eval (fun x -> x.hello) {hello=1}
//│ ║         	                        ^^^^^^^^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.33: 	def eval: ('b -> int) -> Expr['b] -> int
//│ ║        	                         ^^^^^^^^
//│ ╟── from union type:
//│ ║  l.27: 	type Expr[A] = Lit & {val: int} | Add & {lhs: Expr[A]; rhs: Expr[A]} | ~Lit & ~Add & A
//│ ╙──      	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ res: int





l = Lit{} with {hello=1}
//│ l: Lit & {hello: int}
l: {hello:1}
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.156: 	l: {hello:1}
//│ ║         	^
//│ ╟── integer literal of type `int` does not match type `1`
//│ ║  l.154: 	l = Lit{} with {hello=1}
//│ ║         	                      ^
//│ ╟── but it flows into reference with expected type `1`
//│ ║  l.156: 	l: {hello:1}
//│ ║         	^
//│ ╟── Note: constraint arises from record type:
//│ ║  l.156: 	l: {hello:1}
//│ ║         	   ^^^^^^^^^
//│ ╟── from literal type:
//│ ║  l.156: 	l: {hello:1}
//│ ╙──       	          ^
//│ res: {hello: 1}


