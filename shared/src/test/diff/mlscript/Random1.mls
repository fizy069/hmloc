
:w
// class G[A]: { a: G[A] & A & G[A] }
class G[A]: { a: G[A] }
//│ Defined class G[±A]
//│ ╔══[WARNING] Type definition G has bivariant type parameters:
//│ ║  l.4: 	class G[A]: { a: G[A] }
//│ ║       	      ^
//│ ╟── A is irrelevant and may be removed
//│ ║  l.4: 	class G[A]: { a: G[A] }
//│ ╙──     	        ^



def g: G['a] & {a: 'a} as 'a
//│ g: 'a
//│   where
//│     'a :> G[?] with {a: 'a}



rec def g2 a = G { a }
//│ g2: (G[?] & 'a) -> (G[?] with {a: 'a})

:e
g = g2
//│ ╔══[ERROR] Type mismatch in def definition:
//│ ║  l.26: 	g = g2
//│ ║        	^^^^^^
//│ ╟── function of type `?b -> ?c` does not match type `(G[?] with {a: ?a}) | 'a`
//│ ║  l.22: 	rec def g2 a = G { a }
//│ ║        	           ^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `(G[?] with {a: ?a0}) | 'a`
//│ ║  l.26: 	g = g2
//│ ║        	    ^^
//│ ╟── Note: constraint arises from local type binding:
//│ ║  l.15: 	def g: G['a] & {a: 'a} as 'a
//│ ╙──      	       ^^^^^^^^^^^^^^^
//│ (G[?] & 'a) -> (G[?] with {a: 'a})
//│   <:  g:
//│ 'a
//│   where
//│     'a :> G[?] with {a: 'a}





rec def g2 = G { a = g2 }
//│ g2: 'a
//│   where
//│     'a :> G[?] with {a: 'a}

g = g2
//│ 'a
//│   where
//│     'a :> G[?] with {a: 'a}
//│   <:  g:
//│ 'a
//│   where
//│     'a :> G[?] with {a: 'a}

g = g
//│ 'a
//│   where
//│     'a :> G[?] with {a: 'a}
//│   <:  g:
//│ 'a
//│   where
//│     'a :> G[?] with {a: 'a}


def manual: 'a -> nothing as 'a
//│ manual: 'a
//│   where
//│     'a := 'a -> nothing

:e
manual id
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.79: 	manual id
//│ ║        	^^^^^^^^^
//│ ╟── type `?a -> nothing` does not match type `nothing`
//│ ║  l.73: 	def manual: 'a -> nothing as 'a
//│ ║        	            ^^^^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.73: 	def manual: 'a -> nothing as 'a
//│ ╙──      	                  ^^^^^^^
//│ res: ('a & 'b) -> 'b
//│   where
//│     'a <: ('b -> 'b) -> nothing & 'b
//│     'b :> ('a & 'b) -> 'b
//│        <: nothing




def manual: 'a -> anything as 'a
//│ manual: 'a
//│   where
//│     'a := 'a -> anything

manual id
//│ res: anything


def f: { mut x: int }
//│ f: {mut x: int}

f: { mut x: int }
//│ res: {mut x: int}

f = { mut x = 1 }
//│ {mut x: 'x}
//│   where
//│     'x :> int
//│   <:  f:
//│ {mut x: int}




